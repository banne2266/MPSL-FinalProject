
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c450  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd8c  0800cd8c  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd8c  0800cd8c  0001cd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd94  0800cd94  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd98  0800cd98  0001cd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  0800cd9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b90  200001b4  0800cf50  000201b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d44  0800cf50  00024d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 12 .debug_line   000171f8  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00020115  00000000  00000000  000373dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003abf  00000000  00000000  000574f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000019c0  00000000  00000000  0005afb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000fab48  00000000  00000000  0005c970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000017d8  00000000  00000000  001574b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002ae75  00000000  00000000  00158c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00183b05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d00  00000000  00000000  00183b80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001b4 	.word	0x200001b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c5c0 	.word	0x0800c5c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001b8 	.word	0x200001b8
 80001c4:	0800c5c0 	.word	0x0800c5c0

080001c8 <max7219_send>:
    .equ CS,            0x2     // PC1
    .equ CLK,           0x4     // PC2

max7219_send:
	//input parameter: r0 is ADDRESS , r1 is DATA
	PUSH  {r4-r11, LR}
 80001c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LDR  r2, =DIN
 80001cc:	f04f 0201 	mov.w	r2, #1
	LDR  r3, =CS
 80001d0:	f04f 0302 	mov.w	r3, #2
	LDR  r4, =CLK
 80001d4:	f04f 0404 	mov.w	r4, #4
	LDR  r5, =GPIOC_BSRR
 80001d8:	4d37      	ldr	r5, [pc, #220]	; (80002b8 <displayloop+0x36>)
	LDR  r6, =GPIOC_BRR
 80001da:	4e38      	ldr	r6, [pc, #224]	; (80002bc <displayloop+0x3a>)
	MOV  r7, #16 // Serial-Data counter
 80001dc:	f04f 0710 	mov.w	r7, #16
	STR  r3, [r6]  // set CS as 0
 80001e0:	6033      	str	r3, [r6, #0]

	LSL  r0, r0, 8
 80001e2:	ea4f 2000 	mov.w	r0, r0, lsl #8
	ADD  r0, r0, r1
 80001e6:	4408      	add	r0, r1

080001e8 <SendLoop>:

SendLoop:
	STR  r4, [r6]   // set CLK as 0
 80001e8:	6034      	str	r4, [r6, #0]
	MOV  r8, #1
 80001ea:	f04f 0801 	mov.w	r8, #1
	sub  r9, r7, #1
 80001ee:	f1a7 0901 	sub.w	r9, r7, #1
	LSL  r8, r9
 80001f2:	fa08 f809 	lsl.w	r8, r8, r9
	ANDS r8, r8, r0
 80001f6:	ea18 0800 	ands.w	r8, r8, r0
	CMP  r8, #0
 80001fa:	f1b8 0f00 	cmp.w	r8, #0
	ite  eq
 80001fe:	bf0c      	ite	eq
	STReq  r2, [r6] // set DIN as 0
 8000200:	6032      	streq	r2, [r6, #0]
	STRne  r2, [r5] // set DIN as 1
 8000202:	602a      	strne	r2, [r5, #0]
	STR  r4, [r5]   // CLK rise
 8000204:	602c      	str	r4, [r5, #0]
	SUBS r7, r7, #1
 8000206:	3f01      	subs	r7, #1
	CMP  r7, #0
 8000208:	2f00      	cmp	r7, #0
	BGT  SendLoop
 800020a:	dced      	bgt.n	80001e8 <SendLoop>

	STR  r3, [r5]   // CS rise
 800020c:	602b      	str	r3, [r5, #0]
	POP  {r4-r11, PC}
 800020e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000212 <max7219_init>:
max7219_init:
	PUSH  {r4-r11, LR}
 8000212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	LDR  r0, =SHUTDOWN
 8000216:	f04f 000c 	mov.w	r0, #12
	LDR  r1, =#0x1
 800021a:	f04f 0101 	mov.w	r1, #1
	BL   max7219_send
 800021e:	f7ff ffd3 	bl	80001c8 <max7219_send>

	LDR  r0, =DECODE_MODE
 8000222:	f04f 0009 	mov.w	r0, #9
	LDR  r1, =#0xFF
 8000226:	f04f 01ff 	mov.w	r1, #255	; 0xff
	BL   max7219_send
 800022a:	f7ff ffcd 	bl	80001c8 <max7219_send>

	LDR  r0, =INTENSITY
 800022e:	f04f 000a 	mov.w	r0, #10
	LDR  r1, =#0xF
 8000232:	f04f 010f 	mov.w	r1, #15
	BL   max7219_send
 8000236:	f7ff ffc7 	bl	80001c8 <max7219_send>

	LDR  r0, =SCAN_LIMIT
 800023a:	f04f 000b 	mov.w	r0, #11
	LDR  r1, =#0x7
 800023e:	f04f 0107 	mov.w	r1, #7
	BL   max7219_send
 8000242:	f7ff ffc1 	bl	80001c8 <max7219_send>

	LDR  r0, =DISPLAY_TEST
 8000246:	f04f 000f 	mov.w	r0, #15
	LDR  r1, =#0x0
 800024a:	f04f 0100 	mov.w	r1, #0
	BL   max7219_send
 800024e:	f7ff ffbb 	bl	80001c8 <max7219_send>
	BL  ClearScreen
 8000252:	f000 f802 	bl	800025a <ClearScreen>
	POP  {r4-r11, PC}
 8000256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800025a <ClearScreen>:

ClearScreen:
	PUSH  {r4-r11, LR}
 800025a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	MOV  r4, #1
 800025e:	f04f 0401 	mov.w	r4, #1

08000262 <ClearLoop>:
ClearLoop:

	MOV  r0, r4
 8000262:	4620      	mov	r0, r4
	MOV  r1, #0xF
 8000264:	f04f 010f 	mov.w	r1, #15
	BL  max7219_send
 8000268:	f7ff ffae 	bl	80001c8 <max7219_send>
	ADD  r4, r4 ,#1
 800026c:	f104 0401 	add.w	r4, r4, #1
	CMP  R4, #8
 8000270:	2c08      	cmp	r4, #8
	BLE ClearLoop
 8000272:	ddf6      	ble.n	8000262 <ClearLoop>

	POP  {r4-r11, PC}
 8000274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000278 <Display>:


Display:
	PUSH {r4,r5,r6,r7,r8,r9,LR}
 8000278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	MOV  r6, r0
 800027c:	4606      	mov	r6, r0
	MOV  r5, #1 //COUNT
 800027e:	f04f 0501 	mov.w	r5, #1

08000282 <displayloop>:
displayloop:
	MOV  r4, #10
 8000282:	f04f 040a 	mov.w	r4, #10
	UDIV r7, r6, r4
 8000286:	fbb6 f7f4 	udiv	r7, r6, r4
	MUL  r7, r7, r4
 800028a:	fb07 f704 	mul.w	r7, r7, r4
	SUB  r7, r6, r7
 800028e:	eba6 0707 	sub.w	r7, r6, r7
	UDIV r6, r6, r4
 8000292:	fbb6 f6f4 	udiv	r6, r6, r4
	MOV  r0, r5
 8000296:	4628      	mov	r0, r5
	MOV  r1, r7
 8000298:	4639      	mov	r1, r7

	CMP  r5, #3
 800029a:	2d03      	cmp	r5, #3
	it   eq
 800029c:	bf08      	it	eq
	addeq r1, r1, 0x80
 800029e:	3180      	addeq	r1, #128	; 0x80
	BL  max7219_send
 80002a0:	f7ff ff92 	bl	80001c8 <max7219_send>
	ADD  r5, r5, #1
 80002a4:	f105 0501 	add.w	r5, r5, #1
	CMP  r5, #3
 80002a8:	2d03      	cmp	r5, #3
	BLE  displayloop
 80002aa:	ddea      	ble.n	8000282 <displayloop>
	CMP  r6, #0
 80002ac:	2e00      	cmp	r6, #0
	BNE  displayloop
 80002ae:	d1e8      	bne.n	8000282 <displayloop>
	POP {r4,r5,r6,r7,r8,r9,LR}
 80002b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	BX LR
 80002b4:	4770      	bx	lr
 80002b6:	0000      	.short	0x0000
	LDR  r5, =GPIOC_BSRR
 80002b8:	48000818 	.word	0x48000818
	LDR  r6, =GPIOC_BRR
 80002bc:	48000828 	.word	0x48000828

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <SELECT+0x14>)
 80005da:	f003 fbd7 	bl	8003d8c <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	48000400 	.word	0x48000400

080005e8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2101      	movs	r1, #1
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <DESELECT+0x14>)
 80005f2:	f003 fbcb 	bl	8003d8c <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	48000400 	.word	0x48000400

08000600 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800060a:	bf00      	nop
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <SPI_TxByte+0x30>)
 800060e:	f006 f85b 	bl	80066c8 <HAL_SPI_GetState>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d1f9      	bne.n	800060c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000618:	1df9      	adds	r1, r7, #7
 800061a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061e:	2201      	movs	r2, #1
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <SPI_TxByte+0x30>)
 8000622:	f005 fcd0 	bl	8005fc6 <HAL_SPI_Transmit>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20001be8 	.word	0x20001be8

08000634 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800063a:	23ff      	movs	r3, #255	; 0xff
 800063c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000642:	bf00      	nop
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <SPI_RxByte+0x38>)
 8000646:	f006 f83f 	bl	80066c8 <HAL_SPI_GetState>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	d1f9      	bne.n	8000644 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000650:	1dba      	adds	r2, r7, #6
 8000652:	1df9      	adds	r1, r7, #7
 8000654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2301      	movs	r3, #1
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <SPI_RxByte+0x38>)
 800065e:	f005 fe20 	bl	80062a2 <HAL_SPI_TransmitReceive>

  return data;
 8000662:	79bb      	ldrb	r3, [r7, #6]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20001be8 	.word	0x20001be8

08000670 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000678:	f7ff ffdc 	bl	8000634 <SPI_RxByte>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	701a      	strb	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <SD_ReadyWait+0x34>)
 8000694:	2232      	movs	r2, #50	; 0x32
 8000696:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000698:	f7ff ffcc 	bl	8000634 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800069c:	f7ff ffca 	bl	8000634 <SPI_RxByte>
 80006a0:	4603      	mov	r3, r0
 80006a2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2bff      	cmp	r3, #255	; 0xff
 80006a8:	d004      	beq.n	80006b4 <SD_ReadyWait+0x28>
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <SD_ReadyWait+0x34>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f3      	bne.n	800069c <SD_ReadyWait+0x10>

  return res;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20002ccc 	.word	0x20002ccc

080006c4 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80006ca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006ce:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80006d0:	f7ff ff8a 	bl	80005e8 <DESELECT>

  for(int i = 0; i < 10; i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	e005      	b.n	80006e6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006da:	20ff      	movs	r0, #255	; 0xff
 80006dc:	f7ff ff90 	bl	8000600 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	3301      	adds	r3, #1
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	ddf6      	ble.n	80006da <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80006ec:	f7ff ff70 	bl	80005d0 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80006f0:	2340      	movs	r3, #64	; 0x40
 80006f2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000704:	2395      	movs	r3, #149	; 0x95
 8000706:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e009      	b.n	8000722 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800070e:	1d3a      	adds	r2, r7, #4
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff72 	bl	8000600 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2b05      	cmp	r3, #5
 8000726:	ddf2      	ble.n	800070e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000728:	e002      	b.n	8000730 <SD_PowerOn+0x6c>
  {
    Count--;
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	3b01      	subs	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000730:	f7ff ff80 	bl	8000634 <SPI_RxByte>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d002      	beq.n	8000740 <SD_PowerOn+0x7c>
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1f4      	bne.n	800072a <SD_PowerOn+0x66>
  }

  DESELECT();
 8000740:	f7ff ff52 	bl	80005e8 <DESELECT>
  SPI_TxByte(0XFF);
 8000744:	20ff      	movs	r0, #255	; 0xff
 8000746:	f7ff ff5b 	bl	8000600 <SPI_TxByte>

  PowerFlag = 1;
 800074a:	4b03      	ldr	r3, [pc, #12]	; (8000758 <SD_PowerOn+0x94>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200001d1 	.word	0x200001d1

0800075c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <SD_PowerOff+0x14>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	200001d1 	.word	0x200001d1

08000774 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <SD_CheckPower+0x14>)
 800077a:	781b      	ldrb	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	200001d1 	.word	0x200001d1

0800078c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <SD_RxDataBlock+0x68>)
 8000798:	220a      	movs	r2, #10
 800079a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800079c:	f7ff ff4a 	bl	8000634 <SPI_RxByte>
 80007a0:	4603      	mov	r3, r0
 80007a2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	2bff      	cmp	r3, #255	; 0xff
 80007a8:	d104      	bne.n	80007b4 <SD_RxDataBlock+0x28>
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <SD_RxDataBlock+0x68>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1f3      	bne.n	800079c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	2bfe      	cmp	r3, #254	; 0xfe
 80007b8:	d001      	beq.n	80007be <SD_RxDataBlock+0x32>
    return FALSE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e016      	b.n	80007ec <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff53 	bl	8000670 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff4d 	bl	8000670 <SPI_RxBytePtr>
  } while(btr -= 2);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	3b02      	subs	r3, #2
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1ed      	bne.n	80007be <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80007e2:	f7ff ff27 	bl	8000634 <SPI_RxByte>
  SPI_RxByte();
 80007e6:	f7ff ff25 	bl	8000634 <SPI_RxByte>

  return TRUE;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20002ccd 	.word	0x20002ccd

080007f8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000808:	f7ff ff40 	bl	800068c <SD_ReadyWait>
 800080c:	4603      	mov	r3, r0
 800080e:	2bff      	cmp	r3, #255	; 0xff
 8000810:	d001      	beq.n	8000816 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000812:	2300      	movs	r3, #0
 8000814:	e040      	b.n	8000898 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fef1 	bl	8000600 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800081e:	78fb      	ldrb	r3, [r7, #3]
 8000820:	2bfd      	cmp	r3, #253	; 0xfd
 8000822:	d031      	beq.n	8000888 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fee5 	bl	8000600 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fede 	bl	8000600 <SPI_TxByte>
    } while (--wc);
 8000844:	7bbb      	ldrb	r3, [r7, #14]
 8000846:	3b01      	subs	r3, #1
 8000848:	73bb      	strb	r3, [r7, #14]
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1eb      	bne.n	8000828 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000850:	f7ff fef0 	bl	8000634 <SPI_RxByte>
    SPI_RxByte();
 8000854:	f7ff feee 	bl	8000634 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000858:	e00b      	b.n	8000872 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800085a:	f7ff feeb 	bl	8000634 <SPI_RxByte>
 800085e:	4603      	mov	r3, r0
 8000860:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	f003 031f 	and.w	r3, r3, #31
 8000868:	2b05      	cmp	r3, #5
 800086a:	d006      	beq.n	800087a <SD_TxDataBlock+0x82>
        break;

      i++;
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	3301      	adds	r3, #1
 8000870:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000872:	7b7b      	ldrb	r3, [r7, #13]
 8000874:	2b40      	cmp	r3, #64	; 0x40
 8000876:	d9f0      	bls.n	800085a <SD_TxDataBlock+0x62>
 8000878:	e000      	b.n	800087c <SD_TxDataBlock+0x84>
        break;
 800087a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800087c:	bf00      	nop
 800087e:	f7ff fed9 	bl	8000634 <SPI_RxByte>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0fa      	beq.n	800087e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f003 031f 	and.w	r3, r3, #31
 800088e:	2b05      	cmp	r3, #5
 8000890:	d101      	bne.n	8000896 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000892:	2301      	movs	r3, #1
 8000894:	e000      	b.n	8000898 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80008ac:	f7ff feee 	bl	800068c <SD_ReadyWait>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2bff      	cmp	r3, #255	; 0xff
 80008b4:	d001      	beq.n	80008ba <SD_SendCmd+0x1a>
    return 0xFF;
 80008b6:	23ff      	movs	r3, #255	; 0xff
 80008b8:	e040      	b.n	800093c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe9f 	bl	8000600 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	0e1b      	lsrs	r3, r3, #24
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe99 	bl	8000600 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe93 	bl	8000600 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe8d 	bl	8000600 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe88 	bl	8000600 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b40      	cmp	r3, #64	; 0x40
 80008f8:	d101      	bne.n	80008fe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80008fa:	2395      	movs	r3, #149	; 0x95
 80008fc:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b48      	cmp	r3, #72	; 0x48
 8000902:	d101      	bne.n	8000908 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000904:	2387      	movs	r3, #135	; 0x87
 8000906:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe78 	bl	8000600 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b4c      	cmp	r3, #76	; 0x4c
 8000914:	d101      	bne.n	800091a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000916:	f7ff fe8d 	bl	8000634 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800091a:	230a      	movs	r3, #10
 800091c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800091e:	f7ff fe89 	bl	8000634 <SPI_RxByte>
 8000922:	4603      	mov	r3, r0
 8000924:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000926:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800092a:	2b00      	cmp	r3, #0
 800092c:	da05      	bge.n	800093a <SD_SendCmd+0x9a>
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	3b01      	subs	r3, #1
 8000932:	73bb      	strb	r3, [r7, #14]
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1f1      	bne.n	800091e <SD_SendCmd+0x7e>

  return res;
 800093a:	7b7b      	ldrb	r3, [r7, #13]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000954:	2301      	movs	r3, #1
 8000956:	e0d5      	b.n	8000b04 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000958:	4b6c      	ldr	r3, [pc, #432]	; (8000b0c <SD_disk_initialize+0x1c8>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <SD_disk_initialize+0x2a>
    return Stat;
 8000966:	4b69      	ldr	r3, [pc, #420]	; (8000b0c <SD_disk_initialize+0x1c8>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	e0ca      	b.n	8000b04 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800096e:	f7ff fea9 	bl	80006c4 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000972:	f7ff fe2d 	bl	80005d0 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800097a:	2100      	movs	r1, #0
 800097c:	2040      	movs	r0, #64	; 0x40
 800097e:	f7ff ff8f 	bl	80008a0 <SD_SendCmd>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	f040 80a5 	bne.w	8000ad4 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800098a:	4b61      	ldr	r3, [pc, #388]	; (8000b10 <SD_disk_initialize+0x1cc>)
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000990:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000994:	2048      	movs	r0, #72	; 0x48
 8000996:	f7ff ff83 	bl	80008a0 <SD_SendCmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d158      	bne.n	8000a52 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e00c      	b.n	80009c0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80009a6:	7bfc      	ldrb	r4, [r7, #15]
 80009a8:	f7ff fe44 	bl	8000634 <SPI_RxByte>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4423      	add	r3, r4
 80009b6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	3301      	adds	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d9ef      	bls.n	80009a6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009c6:	7abb      	ldrb	r3, [r7, #10]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	f040 8083 	bne.w	8000ad4 <SD_disk_initialize+0x190>
 80009ce:	7afb      	ldrb	r3, [r7, #11]
 80009d0:	2baa      	cmp	r3, #170	; 0xaa
 80009d2:	d17f      	bne.n	8000ad4 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80009d4:	2100      	movs	r1, #0
 80009d6:	2077      	movs	r0, #119	; 0x77
 80009d8:	f7ff ff62 	bl	80008a0 <SD_SendCmd>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d807      	bhi.n	80009f2 <SD_disk_initialize+0xae>
 80009e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009e6:	2069      	movs	r0, #105	; 0x69
 80009e8:	f7ff ff5a 	bl	80008a0 <SD_SendCmd>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d005      	beq.n	80009fe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80009f2:	4b47      	ldr	r3, [pc, #284]	; (8000b10 <SD_disk_initialize+0x1cc>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1eb      	bne.n	80009d4 <SD_disk_initialize+0x90>
 80009fc:	e000      	b.n	8000a00 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80009fe:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <SD_disk_initialize+0x1cc>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d064      	beq.n	8000ad4 <SD_disk_initialize+0x190>
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	207a      	movs	r0, #122	; 0x7a
 8000a0e:	f7ff ff47 	bl	80008a0 <SD_SendCmd>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d15d      	bne.n	8000ad4 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
 8000a1c:	e00c      	b.n	8000a38 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000a1e:	7bfc      	ldrb	r4, [r7, #15]
 8000a20:	f7ff fe08 	bl	8000634 <SPI_RxByte>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4423      	add	r3, r4
 8000a2e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	3301      	adds	r3, #1
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d9ef      	bls.n	8000a1e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000a3e:	7a3b      	ldrb	r3, [r7, #8]
 8000a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SD_disk_initialize+0x108>
 8000a48:	2306      	movs	r3, #6
 8000a4a:	e000      	b.n	8000a4e <SD_disk_initialize+0x10a>
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	73bb      	strb	r3, [r7, #14]
 8000a50:	e040      	b.n	8000ad4 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a52:	2100      	movs	r1, #0
 8000a54:	2077      	movs	r0, #119	; 0x77
 8000a56:	f7ff ff23 	bl	80008a0 <SD_SendCmd>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d808      	bhi.n	8000a72 <SD_disk_initialize+0x12e>
 8000a60:	2100      	movs	r1, #0
 8000a62:	2069      	movs	r0, #105	; 0x69
 8000a64:	f7ff ff1c 	bl	80008a0 <SD_SendCmd>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d801      	bhi.n	8000a72 <SD_disk_initialize+0x12e>
 8000a6e:	2302      	movs	r3, #2
 8000a70:	e000      	b.n	8000a74 <SD_disk_initialize+0x130>
 8000a72:	2301      	movs	r3, #1
 8000a74:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d10e      	bne.n	8000a9a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2077      	movs	r0, #119	; 0x77
 8000a80:	f7ff ff0e 	bl	80008a0 <SD_SendCmd>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d80e      	bhi.n	8000aa8 <SD_disk_initialize+0x164>
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2069      	movs	r0, #105	; 0x69
 8000a8e:	f7ff ff07 	bl	80008a0 <SD_SendCmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d107      	bne.n	8000aa8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000a98:	e00d      	b.n	8000ab6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2041      	movs	r0, #65	; 0x41
 8000a9e:	f7ff feff 	bl	80008a0 <SD_SendCmd>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d005      	beq.n	8000ab4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <SD_disk_initialize+0x1cc>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1e1      	bne.n	8000a76 <SD_disk_initialize+0x132>
 8000ab2:	e000      	b.n	8000ab6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000ab4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <SD_disk_initialize+0x1cc>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d007      	beq.n	8000ad0 <SD_disk_initialize+0x18c>
 8000ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac4:	2050      	movs	r0, #80	; 0x50
 8000ac6:	f7ff feeb 	bl	80008a0 <SD_SendCmd>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <SD_disk_initialize+0x1d0>)
 8000ad6:	7bbb      	ldrb	r3, [r7, #14]
 8000ad8:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000ada:	f7ff fd85 	bl	80005e8 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000ade:	f7ff fda9 	bl	8000634 <SPI_RxByte>

  if (type)
 8000ae2:	7bbb      	ldrb	r3, [r7, #14]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d008      	beq.n	8000afa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <SD_disk_initialize+0x1c8>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f023 0301 	bic.w	r3, r3, #1
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SD_disk_initialize+0x1c8>)
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e001      	b.n	8000afe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000afa:	f7ff fe2f 	bl	800075c <SD_PowerOff>
  }

  return Stat;
 8000afe:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <SD_disk_initialize+0x1c8>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20002ccd 	.word	0x20002ccd
 8000b14:	200001d0 	.word	0x200001d0

08000b18 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SD_disk_status+0x14>
    return STA_NOINIT;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e002      	b.n	8000b32 <SD_disk_status+0x1a>

  return Stat;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SD_disk_status+0x28>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000000 	.word	0x20000000

08000b44 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	4603      	mov	r3, r0
 8000b52:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <SD_disk_read+0x1c>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d101      	bne.n	8000b64 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b60:	2304      	movs	r3, #4
 8000b62:	e051      	b.n	8000c08 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <SD_disk_read+0xcc>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e048      	b.n	8000c08 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <SD_disk_read+0xd0>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	025b      	lsls	r3, r3, #9
 8000b86:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b88:	f7ff fd22 	bl	80005d0 <SELECT>

  if (count == 1)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d111      	bne.n	8000bb6 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2051      	movs	r0, #81	; 0x51
 8000b96:	f7ff fe83 	bl	80008a0 <SD_SendCmd>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d129      	bne.n	8000bf4 <SD_disk_read+0xb0>
 8000ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba4:	68b8      	ldr	r0, [r7, #8]
 8000ba6:	f7ff fdf1 	bl	800078c <SD_RxDataBlock>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d021      	beq.n	8000bf4 <SD_disk_read+0xb0>
      count = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	e01e      	b.n	8000bf4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2052      	movs	r0, #82	; 0x52
 8000bba:	f7ff fe71 	bl	80008a0 <SD_SendCmd>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d117      	bne.n	8000bf4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc8:	68b8      	ldr	r0, [r7, #8]
 8000bca:	f7ff fddf 	bl	800078c <SD_RxDataBlock>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00a      	beq.n	8000bea <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bda:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1ed      	bne.n	8000bc4 <SD_disk_read+0x80>
 8000be8:	e000      	b.n	8000bec <SD_disk_read+0xa8>
          break;
 8000bea:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	204c      	movs	r0, #76	; 0x4c
 8000bf0:	f7ff fe56 	bl	80008a0 <SD_SendCmd>
    }
  }

  DESELECT();
 8000bf4:	f7ff fcf8 	bl	80005e8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000bf8:	f7ff fd1c 	bl	8000634 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf14      	ite	ne
 8000c02:	2301      	movne	r3, #1
 8000c04:	2300      	moveq	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200001d0 	.word	0x200001d0

08000c18 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	4603      	mov	r3, r0
 8000c26:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <SD_disk_write+0x1c>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <SD_disk_write+0x20>
    return RES_PARERR;
 8000c34:	2304      	movs	r3, #4
 8000c36:	e06b      	b.n	8000d10 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000c38:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <SD_disk_write+0x100>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e062      	b.n	8000d10 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000c4a:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <SD_disk_write+0x100>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SD_disk_write+0x44>
    return RES_WRPRT;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e059      	b.n	8000d10 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <SD_disk_write+0x104>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	025b      	lsls	r3, r3, #9
 8000c6c:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c6e:	f7ff fcaf 	bl	80005d0 <SELECT>

  if (count == 1)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d110      	bne.n	8000c9a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	2058      	movs	r0, #88	; 0x58
 8000c7c:	f7ff fe10 	bl	80008a0 <SD_SendCmd>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d13a      	bne.n	8000cfc <SD_disk_write+0xe4>
 8000c86:	21fe      	movs	r1, #254	; 0xfe
 8000c88:	68b8      	ldr	r0, [r7, #8]
 8000c8a:	f7ff fdb5 	bl	80007f8 <SD_TxDataBlock>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d033      	beq.n	8000cfc <SD_disk_write+0xe4>
      count = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	e030      	b.n	8000cfc <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <SD_disk_write+0x104>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d007      	beq.n	8000cb6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2077      	movs	r0, #119	; 0x77
 8000caa:	f7ff fdf9 	bl	80008a0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cae:	6839      	ldr	r1, [r7, #0]
 8000cb0:	2057      	movs	r0, #87	; 0x57
 8000cb2:	f7ff fdf5 	bl	80008a0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	2059      	movs	r0, #89	; 0x59
 8000cba:	f7ff fdf1 	bl	80008a0 <SD_SendCmd>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d11b      	bne.n	8000cfc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000cc4:	21fc      	movs	r1, #252	; 0xfc
 8000cc6:	68b8      	ldr	r0, [r7, #8]
 8000cc8:	f7ff fd96 	bl	80007f8 <SD_TxDataBlock>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00a      	beq.n	8000ce8 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000cd8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1ee      	bne.n	8000cc4 <SD_disk_write+0xac>
 8000ce6:	e000      	b.n	8000cea <SD_disk_write+0xd2>
          break;
 8000ce8:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000cea:	21fd      	movs	r1, #253	; 0xfd
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fd83 	bl	80007f8 <SD_TxDataBlock>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <SD_disk_write+0xe4>
      {
        count = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000cfc:	f7ff fc74 	bl	80005e8 <DESELECT>
  SPI_RxByte();
 8000d00:	f7ff fc98 	bl	8000634 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	bf14      	ite	ne
 8000d0a:	2301      	movne	r3, #1
 8000d0c:	2300      	moveq	r3, #0
 8000d0e:	b2db      	uxtb	r3, r3
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	200001d0 	.word	0x200001d0

08000d20 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b08b      	sub	sp, #44	; 0x2c
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	603a      	str	r2, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e117      	b.n	8000f6e <SD_disk_ioctl+0x24e>

  res = RES_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000d44:	79bb      	ldrb	r3, [r7, #6]
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	d126      	bne.n	8000d98 <SD_disk_ioctl+0x78>
  {
    switch (*ptr)
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d00e      	beq.n	8000d70 <SD_disk_ioctl+0x50>
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d012      	beq.n	8000d7c <SD_disk_ioctl+0x5c>
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d11a      	bne.n	8000d90 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8000d5a:	f7ff fd0b 	bl	8000774 <SD_CheckPower>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8000d64:	f7ff fcfa 	bl	800075c <SD_PowerOff>
      res = RES_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d6e:	e0fc      	b.n	8000f6a <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d70:	f7ff fca8 	bl	80006c4 <SD_PowerOn>
      res = RES_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d7a:	e0f6      	b.n	8000f6a <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	1c5c      	adds	r4, r3, #1
 8000d80:	f7ff fcf8 	bl	8000774 <SD_CheckPower>
 8000d84:	4603      	mov	r3, r0
 8000d86:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d8e:	e0ec      	b.n	8000f6a <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8000d90:	2304      	movs	r3, #4
 8000d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d96:	e0e8      	b.n	8000f6a <SD_disk_ioctl+0x24a>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000d98:	4b77      	ldr	r3, [pc, #476]	; (8000f78 <SD_disk_ioctl+0x258>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e0e1      	b.n	8000f6e <SD_disk_ioctl+0x24e>

    SELECT();
 8000daa:	f7ff fc11 	bl	80005d0 <SELECT>

    switch (ctrl)
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	2b0d      	cmp	r3, #13
 8000db2:	f200 80cb 	bhi.w	8000f4c <SD_disk_ioctl+0x22c>
 8000db6:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <SD_disk_ioctl+0x9c>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000eb7 	.word	0x08000eb7
 8000dc0:	08000df5 	.word	0x08000df5
 8000dc4:	08000ea7 	.word	0x08000ea7
 8000dc8:	08000f4d 	.word	0x08000f4d
 8000dcc:	08000f4d 	.word	0x08000f4d
 8000dd0:	08000f4d 	.word	0x08000f4d
 8000dd4:	08000f4d 	.word	0x08000f4d
 8000dd8:	08000f4d 	.word	0x08000f4d
 8000ddc:	08000f4d 	.word	0x08000f4d
 8000de0:	08000f4d 	.word	0x08000f4d
 8000de4:	08000f4d 	.word	0x08000f4d
 8000de8:	08000ec9 	.word	0x08000ec9
 8000dec:	08000eed 	.word	0x08000eed
 8000df0:	08000f11 	.word	0x08000f11
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000df4:	2100      	movs	r1, #0
 8000df6:	2049      	movs	r0, #73	; 0x49
 8000df8:	f7ff fd52 	bl	80008a0 <SD_SendCmd>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 80a8 	bne.w	8000f54 <SD_disk_ioctl+0x234>
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2110      	movs	r1, #16
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fcbe 	bl	800078c <SD_RxDataBlock>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 809e 	beq.w	8000f54 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1)
 8000e18:	7b3b      	ldrb	r3, [r7, #12]
 8000e1a:	099b      	lsrs	r3, r3, #6
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d10e      	bne.n	8000e40 <SD_disk_ioctl+0x120>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e22:	7d7b      	ldrb	r3, [r7, #21]
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	7d3b      	ldrb	r3, [r7, #20]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000e36:	8bfb      	ldrh	r3, [r7, #30]
 8000e38:	029a      	lsls	r2, r3, #10
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e02e      	b.n	8000e9e <SD_disk_ioctl+0x17e>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e40:	7c7b      	ldrb	r3, [r7, #17]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	7dbb      	ldrb	r3, [r7, #22]
 8000e4a:	09db      	lsrs	r3, r3, #7
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4413      	add	r3, r2
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	7d7b      	ldrb	r3, [r7, #21]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f003 0306 	and.w	r3, r3, #6
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4413      	add	r3, r2
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	3302      	adds	r3, #2
 8000e64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e68:	7d3b      	ldrb	r3, [r7, #20]
 8000e6a:	099b      	lsrs	r3, r3, #6
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	7cfb      	ldrb	r3, [r7, #19]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	7cbb      	ldrb	r3, [r7, #18]
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e90:	8bfa      	ldrh	r2, [r7, #30]
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e96:	3b09      	subs	r3, #9
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000ea4:	e056      	b.n	8000f54 <SD_disk_ioctl+0x234>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eac:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eb4:	e055      	b.n	8000f62 <SD_disk_ioctl+0x242>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000eb6:	f7ff fbe9 	bl	800068c <SD_ReadyWait>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2bff      	cmp	r3, #255	; 0xff
 8000ebe:	d14b      	bne.n	8000f58 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000ec6:	e047      	b.n	8000f58 <SD_disk_ioctl+0x238>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2049      	movs	r0, #73	; 0x49
 8000ecc:	f7ff fce8 	bl	80008a0 <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d142      	bne.n	8000f5c <SD_disk_ioctl+0x23c>
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fc57 	bl	800078c <SD_RxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d03b      	beq.n	8000f5c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eea:	e037      	b.n	8000f5c <SD_disk_ioctl+0x23c>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000eec:	2100      	movs	r1, #0
 8000eee:	204a      	movs	r0, #74	; 0x4a
 8000ef0:	f7ff fcd6 	bl	80008a0 <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d132      	bne.n	8000f60 <SD_disk_ioctl+0x240>
 8000efa:	2110      	movs	r1, #16
 8000efc:	6a38      	ldr	r0, [r7, #32]
 8000efe:	f7ff fc45 	bl	800078c <SD_RxDataBlock>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d02b      	beq.n	8000f60 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000f0e:	e027      	b.n	8000f60 <SD_disk_ioctl+0x240>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000f10:	2100      	movs	r1, #0
 8000f12:	207a      	movs	r0, #122	; 0x7a
 8000f14:	f7ff fcc4 	bl	80008a0 <SD_SendCmd>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <SD_disk_ioctl+0x22c>
      {
        for (n = 0; n < 4; n++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f24:	e00b      	b.n	8000f3e <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8000f26:	6a3c      	ldr	r4, [r7, #32]
 8000f28:	1c63      	adds	r3, r4, #1
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	f7ff fb82 	bl	8000634 <SPI_RxByte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000f34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d9ef      	bls.n	8000f26 <SD_disk_ioctl+0x206>
        }

        res = RES_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f52:	e006      	b.n	8000f62 <SD_disk_ioctl+0x242>
      break;
 8000f54:	bf00      	nop
 8000f56:	e004      	b.n	8000f62 <SD_disk_ioctl+0x242>
      break;
 8000f58:	bf00      	nop
 8000f5a:	e002      	b.n	8000f62 <SD_disk_ioctl+0x242>
      break;
 8000f5c:	bf00      	nop
 8000f5e:	e000      	b.n	8000f62 <SD_disk_ioctl+0x242>
      break;
 8000f60:	bf00      	nop
    }

    DESELECT();
 8000f62:	f7ff fb41 	bl	80005e8 <DESELECT>
    SPI_RxByte();
 8000f66:	f7ff fb65 	bl	8000634 <SPI_RxByte>
  }

  return res;
 8000f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	372c      	adds	r7, #44	; 0x2c
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000

08000f7c <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

/* to send the data to the uart*/
void send_uart(char *string)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff f99b 	bl	80002c0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <send_uart+0x2c>)
 8000f9a:	f007 fc0b 	bl	80087b4 <HAL_UART_Transmit>
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20001748 	.word	0x20001748

08000fac <bufclear>:
	while(*buf++ != '\0') i++;
	return i;
}

void bufclear(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
	for(int i=0;i<1024;i++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	e007      	b.n	8000fc8 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <bufclear+0x30>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<1024;i++)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fce:	dbf3      	blt.n	8000fb8 <bufclear+0xc>
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	200017c8 	.word	0x200017c8

08000fe0 <writedata>:

void writedata(char *filename,char *data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	bufclear();
 8000fea:	f7ff ffdf 	bl	8000fac <bufclear>
	fresult = f_open(&fil, filename, FA_READ);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4818      	ldr	r0, [pc, #96]	; (8001054 <writedata+0x74>)
 8000ff4:	f00a fae6 	bl	800b5c4 <f_open>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <writedata+0x78>)
 8000ffe:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <writedata+0x78>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d108      	bne.n	800101a <writedata+0x3a>
	{
		//send_uart ("file exist \r\n");
		f_gets(buffer, sizeof(buffer), &fil);
 8001008:	4a12      	ldr	r2, [pc, #72]	; (8001054 <writedata+0x74>)
 800100a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100e:	4813      	ldr	r0, [pc, #76]	; (800105c <writedata+0x7c>)
 8001010:	f00b f83f 	bl	800c092 <f_gets>
		//send_uart(buffer);
		//send_uart("\r\n");
		f_close(&fil);
 8001014:	480f      	ldr	r0, [pc, #60]	; (8001054 <writedata+0x74>)
 8001016:	f00b f812 	bl	800c03e <f_close>
	}
	fresult = f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800101a:	2213      	movs	r2, #19
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <writedata+0x74>)
 8001020:	f00a fad0 	bl	800b5c4 <f_open>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <writedata+0x78>)
 800102a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
	{
		//send_uart ("file is opened \r\n");
	}
	strcat(buffer, data);
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	480b      	ldr	r0, [pc, #44]	; (800105c <writedata+0x7c>)
 8001030:	f00b fa70 	bl	800c514 <strcat>
	f_puts(buffer, &fil);
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <writedata+0x74>)
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <writedata+0x7c>)
 8001038:	f00b f8e0 	bl	800c1fc <f_puts>
	fresult = f_close(&fil);
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <writedata+0x74>)
 800103e:	f00a fffe 	bl	800c03e <f_close>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <writedata+0x78>)
 8001048:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
	{
		//send_uart ("file created and the data is written \r\n");
	}
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20001c9c 	.word	0x20001c9c
 8001058:	20001be4 	.word	0x20001be4
 800105c:	200017c8 	.word	0x200017c8

08001060 <readdata>:

int readdata(char *filename)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	bufclear();
 8001068:	f7ff ffa0 	bl	8000fac <bufclear>
	fresult = f_open(&fil, filename, FA_READ);
 800106c:	2201      	movs	r2, #1
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <readdata+0x48>)
 8001072:	f00a faa7 	bl	800b5c4 <f_open>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <readdata+0x4c>)
 800107c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <readdata+0x4c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10a      	bne.n	800109c <readdata+0x3c>
	{
		//send_uart ("exist \r\n");
		f_gets(buffer, sizeof(buffer), &fil);
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <readdata+0x48>)
 8001088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108c:	4808      	ldr	r0, [pc, #32]	; (80010b0 <readdata+0x50>)
 800108e:	f00b f800 	bl	800c092 <f_gets>
		//send_uart(buffer);
		//send_uart("\r\n");
		f_close(&fil);
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <readdata+0x48>)
 8001094:	f00a ffd3 	bl	800c03e <f_close>
		return 1;
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <readdata+0x3e>
	}
	return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20001c9c 	.word	0x20001c9c
 80010ac:	20001be4 	.word	0x20001be4
 80010b0:	200017c8 	.word	0x200017c8

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0e2      	sub	sp, #392	; 0x188
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t buff[255];
	uint8_t uid[MIFARE_UID_MAX_LENGTH];
	int32_t uid_len = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c0:	f002 f8ab 	bl	800321a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c4:	f000 fa92 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c8:	f000 fd3a 	bl	8001b40 <MX_GPIO_Init>
  MX_DMA_Init();
 80010cc:	f000 fd1a 	bl	8001b04 <MX_DMA_Init>
  MX_SPI1_Init();
 80010d0:	f000 fb6c 	bl	80017ac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010d4:	f000 fce6 	bl	8001aa4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80010d8:	f007 ffec 	bl	80090b4 <MX_FATFS_Init>
  MX_TIM2_Init();
 80010dc:	f000 fba4 	bl	8001828 <MX_TIM2_Init>
  MX_RNG_Init();
 80010e0:	f000 fb50 	bl	8001784 <MX_RNG_Init>
  MX_TIM3_Init();
 80010e4:	f000 fc16 	bl	8001914 <MX_TIM3_Init>
  MX_TIM5_Init();
 80010e8:	f000 fc64 	bl	80019b4 <MX_TIM5_Init>
  MX_I2C1_Init();
 80010ec:	f000 fb0a 	bl	8001704 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //pn532 start
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80010f0:	2028      	movs	r0, #40	; 0x28
 80010f2:	f002 fa50 	bl	8003596 <HAL_NVIC_DisableIRQ>
  PN532 pn532;
  PN532_I2C_Init(&pn532);
 80010f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fab4 	bl	8002668 <PN532_I2C_Init>
  PN532_GetFirmwareVersion(&pn532, buff);
 8001100:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001104:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f001 f924 	bl	8002358 <PN532_GetFirmwareVersion>

  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 8001110:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001114:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 f91c 	bl	8002358 <PN532_GetFirmwareVersion>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d15b      	bne.n	80011de <main+0x12a>
	send_uart("Found PN532 with firmware version\r\n");
 8001126:	48c5      	ldr	r0, [pc, #788]	; (800143c <main+0x388>)
 8001128:	f7ff ff28 	bl	8000f7c <send_uart>
  } else {
	send_uart("FAIL");
	return -1;
  }
  PN532_SamConfiguration(&pn532);
 800112c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001130:	4618      	mov	r0, r3
 8001132:	f001 f935 	bl	80023a0 <PN532_SamConfiguration>
  send_uart("\r\nWaiting for RFID/NFC card...\r\n");
 8001136:	48c2      	ldr	r0, [pc, #776]	; (8001440 <main+0x38c>)
 8001138:	f7ff ff20 	bl	8000f7c <send_uart>
//pn532 end

  char uid_str[15] = {0};
 800113c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001140:	461a      	mov	r2, r3
 8001142:	2300      	movs	r3, #0
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	6053      	str	r3, [r2, #4]
 8001148:	6093      	str	r3, [r2, #8]
 800114a:	f8c2 300b 	str.w	r3, [r2, #11]
  char uid_str_display[15] = {0};
 800114e:	f107 0318 	add.w	r3, r7, #24
 8001152:	461a      	mov	r2, r3
 8001154:	2300      	movs	r3, #0
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	6053      	str	r3, [r2, #4]
 800115a:	6093      	str	r3, [r2, #8]
 800115c:	f8c2 300b 	str.w	r3, [r2, #11]

  SET_REG(RCC->CFGR,RCC_CFGR_HPRE,0b1011<<4)
 8001160:	4bb8      	ldr	r3, [pc, #736]	; (8001444 <main+0x390>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001168:	4ab6      	ldr	r2, [pc, #728]	; (8001444 <main+0x390>)
 800116a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800116e:	6093      	str	r3, [r2, #8]
  max7219_init();
 8001170:	f7ff f84f 	bl	8000212 <max7219_init>
  ClearScreen();
 8001174:	f7ff f871 	bl	800025a <ClearScreen>
  SET_REG(RCC->CFGR,RCC_CFGR_HPRE,0b0000<<4)
 8001178:	4bb2      	ldr	r3, [pc, #712]	; (8001444 <main+0x390>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4ab1      	ldr	r2, [pc, #708]	; (8001444 <main+0x390>)
 800117e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001182:	6093      	str	r3, [r2, #8]
  int8_t angle = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
  const uint8_t angle_difference = 11;
 800118a:	230b      	movs	r3, #11
 800118c:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
  time = 0;
 8001190:	4bad      	ldr	r3, [pc, #692]	; (8001448 <main+0x394>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
  score = 0;
 8001196:	4bad      	ldr	r3, [pc, #692]	; (800144c <main+0x398>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
  Max7219Display(0,0);
 800119c:	2100      	movs	r1, #0
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 fe32 	bl	8001e08 <Max7219Display>
  HAL_TIM_Base_Start_IT(&htim3);
 80011a4:	48aa      	ldr	r0, [pc, #680]	; (8001450 <main+0x39c>)
 80011a6:	f005 fc51 	bl	8006a4c <HAL_TIM_Base_Start_IT>

  score = 0;
 80011aa:	4ba8      	ldr	r3, [pc, #672]	; (800144c <main+0x398>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
  hash_num = 0;
 80011b0:	4ba8      	ldr	r3, [pc, #672]	; (8001454 <main+0x3a0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
  Max7219Display(score,0);
 80011b6:	4ba5      	ldr	r3, [pc, #660]	; (800144c <main+0x398>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fe23 	bl	8001e08 <Max7219Display>
  /* Mount SD Card*/

  fresult = f_mount(&fs, "", 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	49a4      	ldr	r1, [pc, #656]	; (8001458 <main+0x3a4>)
 80011c6:	48a5      	ldr	r0, [pc, #660]	; (800145c <main+0x3a8>)
 80011c8:	f00a f9b6 	bl	800b538 <f_mount>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4ba3      	ldr	r3, [pc, #652]	; (8001460 <main+0x3ac>)
 80011d2:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK) send_uart("error in mounting SD CARD ... \r\n");
 80011d4:	4ba2      	ldr	r3, [pc, #648]	; (8001460 <main+0x3ac>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00a      	beq.n	80011f2 <main+0x13e>
 80011dc:	e005      	b.n	80011ea <main+0x136>
	send_uart("FAIL");
 80011de:	48a1      	ldr	r0, [pc, #644]	; (8001464 <main+0x3b0>)
 80011e0:	f7ff fecc 	bl	8000f7c <send_uart>
	return -1;
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	e1e7      	b.n	80015ba <main+0x506>
  if(fresult != FR_OK) send_uart("error in mounting SD CARD ... \r\n");
 80011ea:	489f      	ldr	r0, [pc, #636]	; (8001468 <main+0x3b4>)
 80011ec:	f7ff fec6 	bl	8000f7c <send_uart>
 80011f0:	e002      	b.n	80011f8 <main+0x144>
  else send_uart("SD CARD mounted successfully ... \r\n");
 80011f2:	489e      	ldr	r0, [pc, #632]	; (800146c <main+0x3b8>)
 80011f4:	f7ff fec2 	bl	8000f7c <send_uart>

  int now_time = 0, prev_time = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  //led_render(); // transmit to WS2812
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */prev_time = now_time;
 8001204:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001208:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	now_time = time;
 800120c:	4b8e      	ldr	r3, [pc, #568]	; (8001448 <main+0x394>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	if(prev_time != time){
 8001214:	4b8c      	ldr	r3, [pc, #560]	; (8001448 <main+0x394>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800121c:	429a      	cmp	r2, r3
 800121e:	d00a      	beq.n	8001236 <main+0x182>
		HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001220:	2104      	movs	r1, #4
 8001222:	4893      	ldr	r0, [pc, #588]	; (8001470 <main+0x3bc>)
 8001224:	f005 fd12 	bl	8006c4c <HAL_TIM_PWM_Start>
		HAL_Delay(20);
 8001228:	2014      	movs	r0, #20
 800122a:	f002 f86b 	bl	8003304 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);
 800122e:	2104      	movs	r1, #4
 8001230:	488f      	ldr	r0, [pc, #572]	; (8001470 <main+0x3bc>)
 8001232:	f005 fe11 	bl	8006e58 <HAL_TIM_PWM_Stop>
	}

	if(state == STATE_IDLE){
 8001236:	4b8f      	ldr	r3, [pc, #572]	; (8001474 <main+0x3c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 80d4 	bne.w	80013e8 <main+0x334>
		//LED start
		for(uint8_t i = 0; i < 132 ; i++)
 8001240:	2300      	movs	r3, #0
 8001242:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8001246:	e025      	b.n	8001294 <main+0x1e0>
	  {
		// Calculate color
		uint32_t rgb_color = hsl_to_rgb(angle + (i * angle_difference), 255, 50); // hue, saturation, lightness
 8001248:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 800124c:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8001250:	fb12 f303 	smulbb	r3, r2, r3
 8001254:	b2da      	uxtb	r2, r3
 8001256:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800125a:	4413      	add	r3, r2
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2232      	movs	r2, #50	; 0x32
 8001260:	21ff      	movs	r1, #255	; 0xff
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fd0a 	bl	8001c7c <hsl_to_rgb>
 8001268:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
		// Set color
		led_set_RGB(i, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 800126c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	b2d9      	uxtb	r1, r3
 8001274:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	b2da      	uxtb	r2, r3
 800127c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f897 017f 	ldrb.w	r0, [r7, #383]	; 0x17f
 8001286:	f001 fa2d 	bl	80026e4 <led_set_RGB>
		for(uint8_t i = 0; i < 132 ; i++)
 800128a:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800128e:	3301      	adds	r3, #1
 8001290:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8001294:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8001298:	2b83      	cmp	r3, #131	; 0x83
 800129a:	d9d5      	bls.n	8001248 <main+0x194>
	   }
		// Write to LED
		angle+=10;
 800129c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80012a0:	330a      	adds	r3, #10
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		led_render();
 80012a8:	f001 fa54 	bl	8002754 <led_render>
		// Some delay
		HAL_Delay(10);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f002 f829 	bl	8003304 <HAL_Delay>
		//LED end

		uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 100);
 80012b2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80012b6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80012ba:	2364      	movs	r3, #100	; 0x64
 80012bc:	2200      	movs	r2, #0
 80012be:	f001 f891 	bl	80023e4 <PN532_ReadPassiveTarget>
 80012c2:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
		if (uid_len == PN532_STATUS_ERROR) {
 80012c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80012ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ce:	d099      	beq.n	8001204 <main+0x150>
			//send_uart(".");
		} else {
			send_uart("Found card with UID: ");
 80012d0:	4869      	ldr	r0, [pc, #420]	; (8001478 <main+0x3c4>)
 80012d2:	f7ff fe53 	bl	8000f7c <send_uart>
		  for (uint8_t i = 0; i < uid_len; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80012dc:	e032      	b.n	8001344 <main+0x290>
			  char temp[10];
			  itoa(uid[i], temp, 16);
 80012de:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80012e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2210      	movs	r2, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	f00b f905 	bl	800c500 <itoa>
			  send_uart(temp);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe3e 	bl	8000f7c <send_uart>
			  if(i < uid_len-1)
 8001300:	f897 217e 	ldrb.w	r2, [r7, #382]	; 0x17e
 8001304:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001308:	3b01      	subs	r3, #1
 800130a:	429a      	cmp	r2, r3
 800130c:	da02      	bge.n	8001314 <main+0x260>
				  send_uart("_");
 800130e:	485b      	ldr	r0, [pc, #364]	; (800147c <main+0x3c8>)
 8001310:	f7ff fe34 	bl	8000f7c <send_uart>
			  uid_str[i*2] = temp[0];
 8001314:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	f107 020c 	add.w	r2, r7, #12
 800131e:	7811      	ldrb	r1, [r2, #0]
 8001320:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001324:	54d1      	strb	r1, [r2, r3]
			  uid_str[i*2+1] = temp[1];
 8001326:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	3301      	adds	r3, #1
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	7851      	ldrb	r1, [r2, #1]
 8001334:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001338:	54d1      	strb	r1, [r2, r3]
		  for (uint8_t i = 0; i < uid_len; i++) {
 800133a:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800133e:	3301      	adds	r3, #1
 8001340:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8001344:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8001348:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800134c:	429a      	cmp	r2, r3
 800134e:	dcc6      	bgt.n	80012de <main+0x22a>
		  }
		  strcpy(uid_str_display, uid_str);
 8001350:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f00b f8e9 	bl	800c532 <strcpy>
		  strcat(uid_str, ".txt");
 8001360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ffab 	bl	80002c0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001372:	4413      	add	r3, r2
 8001374:	4a42      	ldr	r2, [pc, #264]	; (8001480 <main+0x3cc>)
 8001376:	6810      	ldr	r0, [r2, #0]
 8001378:	6018      	str	r0, [r3, #0]
 800137a:	7912      	ldrb	r2, [r2, #4]
 800137c:	711a      	strb	r2, [r3, #4]
		  send_uart("  uid:");
 800137e:	4841      	ldr	r0, [pc, #260]	; (8001484 <main+0x3d0>)
 8001380:	f7ff fdfc 	bl	8000f7c <send_uart>
		  send_uart(uid_str);
 8001384:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fdf7 	bl	8000f7c <send_uart>
		  send_uart("\r\n");
 800138e:	483e      	ldr	r0, [pc, #248]	; (8001488 <main+0x3d4>)
 8001390:	f7ff fdf4 	bl	8000f7c <send_uart>

		  for(int i = 0; i <132; i ++)
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800139a:	e00c      	b.n	80013b6 <main+0x302>
			  led_set_RGB(i,0,0,0);
 800139c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80013a0:	b2d8      	uxtb	r0, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	f001 f99c 	bl	80026e4 <led_set_RGB>
		  for(int i = 0; i <132; i ++)
 80013ac:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80013b0:	3301      	adds	r3, #1
 80013b2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80013b6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80013ba:	2b83      	cmp	r3, #131	; 0x83
 80013bc:	ddee      	ble.n	800139c <main+0x2e8>

		  led_render();
 80013be:	f001 f9c9 	bl	8002754 <led_render>
		  state = STATE_READY;
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <main+0x3c0>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
		  score = 0;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <main+0x398>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
		  Max7219Display(score,0);
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <main+0x398>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fd17 	bl	8001e08 <Max7219Display>
		  time = 4;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <main+0x394>)
 80013dc:	2204      	movs	r2, #4
 80013de:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim3);
 80013e0:	481b      	ldr	r0, [pc, #108]	; (8001450 <main+0x39c>)
 80013e2:	f005 fb33 	bl	8006a4c <HAL_TIM_Base_Start_IT>
 80013e6:	e70d      	b.n	8001204 <main+0x150>
		}
	}
	else if(state == STATE_READY){
 80013e8:	4b22      	ldr	r3, [pc, #136]	; (8001474 <main+0x3c0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	f040 80a9 	bne.w	8001544 <main+0x490>
		if(time == 0){
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <main+0x394>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f47f af04 	bne.w	8001204 <main+0x150>
			time = 61;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <main+0x394>)
 80013fe:	223d      	movs	r2, #61	; 0x3d
 8001400:	601a      	str	r2, [r3, #0]
			state = STATE_PLAY;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <main+0x3c0>)
 8001404:	2202      	movs	r2, #2
 8001406:	601a      	str	r2, [r3, #0]
			if(readdata(uid_str))
 8001408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fe27 	bl	8001060 <readdata>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d03f      	beq.n	8001498 <main+0x3e4>
			{
				send_uart("Hello: ");
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <main+0x3d8>)
 800141a:	f7ff fdaf 	bl	8000f7c <send_uart>
				send_uart(uid_str_display);
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fdaa 	bl	8000f7c <send_uart>
				send_uart("\r\n");
 8001428:	4817      	ldr	r0, [pc, #92]	; (8001488 <main+0x3d4>)
 800142a:	f7ff fda7 	bl	8000f7c <send_uart>
				send_uart("Your history scores are \r\n");
 800142e:	4818      	ldr	r0, [pc, #96]	; (8001490 <main+0x3dc>)
 8001430:	f7ff fda4 	bl	8000f7c <send_uart>
				send_uart(buffer);
 8001434:	4817      	ldr	r0, [pc, #92]	; (8001494 <main+0x3e0>)
 8001436:	f7ff fda1 	bl	8000f7c <send_uart>
 800143a:	e038      	b.n	80014ae <main+0x3fa>
 800143c:	0800c5d8 	.word	0x0800c5d8
 8001440:	0800c604 	.word	0x0800c604
 8001444:	40021000 	.word	0x40021000
 8001448:	20001bc8 	.word	0x20001bc8
 800144c:	20001740 	.word	0x20001740
 8001450:	200016f4 	.word	0x200016f4
 8001454:	200001d4 	.word	0x200001d4
 8001458:	0800c628 	.word	0x0800c628
 800145c:	20000620 	.word	0x20000620
 8001460:	20001be4 	.word	0x20001be4
 8001464:	0800c5fc 	.word	0x0800c5fc
 8001468:	0800c62c 	.word	0x0800c62c
 800146c:	0800c650 	.word	0x0800c650
 8001470:	200016a8 	.word	0x200016a8
 8001474:	200001d8 	.word	0x200001d8
 8001478:	0800c674 	.word	0x0800c674
 800147c:	0800c68c 	.word	0x0800c68c
 8001480:	0800c690 	.word	0x0800c690
 8001484:	0800c698 	.word	0x0800c698
 8001488:	0800c6a0 	.word	0x0800c6a0
 800148c:	0800c6a4 	.word	0x0800c6a4
 8001490:	0800c6ac 	.word	0x0800c6ac
 8001494:	200017c8 	.word	0x200017c8
			}else
			{
				send_uart("New User: ");
 8001498:	484a      	ldr	r0, [pc, #296]	; (80015c4 <main+0x510>)
 800149a:	f7ff fd6f 	bl	8000f7c <send_uart>
				send_uart(uid_str_display);
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd6a 	bl	8000f7c <send_uart>
				send_uart("\r\n");
 80014a8:	4847      	ldr	r0, [pc, #284]	; (80015c8 <main+0x514>)
 80014aa:	f7ff fd67 	bl	8000f7c <send_uart>
			}
			int hash_out = my_hash[hash_num];
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <main+0x518>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a47      	ldr	r2, [pc, #284]	; (80015d0 <main+0x51c>)
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
			for(int i = 1; i <= 6; i ++){
 80014bc:	2301      	movs	r3, #1
 80014be:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80014c2:	e032      	b.n	800152a <main+0x476>
				for(int j = 0; j < 3; j++){//change here
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80014ca:	e025      	b.n	8001518 <main+0x464>
					if(i == hash_out)
 80014cc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80014d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10d      	bne.n	80014f4 <main+0x440>
						led_set_RGB((i-1)*1+j+1,0,255,0);
 80014d8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	b2d8      	uxtb	r0, r3
 80014e8:	2300      	movs	r3, #0
 80014ea:	22ff      	movs	r2, #255	; 0xff
 80014ec:	2100      	movs	r1, #0
 80014ee:	f001 f8f9 	bl	80026e4 <led_set_RGB>
 80014f2:	e00c      	b.n	800150e <main+0x45a>
					else
						led_set_RGB((i-1)*1+j+1,0,  0,0);
 80014f4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4413      	add	r3, r2
 8001502:	b2d8      	uxtb	r0, r3
 8001504:	2300      	movs	r3, #0
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	f001 f8eb 	bl	80026e4 <led_set_RGB>
				for(int j = 0; j < 3; j++){//change here
 800150e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001512:	3301      	adds	r3, #1
 8001514:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001518:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800151c:	2b02      	cmp	r3, #2
 800151e:	ddd5      	ble.n	80014cc <main+0x418>
			for(int i = 1; i <= 6; i ++){
 8001520:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001524:	3301      	adds	r3, #1
 8001526:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800152a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800152e:	2b06      	cmp	r3, #6
 8001530:	ddc8      	ble.n	80014c4 <main+0x410>
				}
			}
			led_render();
 8001532:	f001 f90f 	bl	8002754 <led_render>

			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001536:	2028      	movs	r0, #40	; 0x28
 8001538:	f002 f81f 	bl	800357a <HAL_NVIC_EnableIRQ>
			HAL_TIM_Base_Start_IT(&htim3);
 800153c:	4825      	ldr	r0, [pc, #148]	; (80015d4 <main+0x520>)
 800153e:	f005 fa85 	bl	8006a4c <HAL_TIM_Base_Start_IT>
 8001542:	e65f      	b.n	8001204 <main+0x150>
		}
	}
	else if(state == STATE_PLAY){
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <main+0x524>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d12c      	bne.n	80015a6 <main+0x4f2>
		if(time == 0){
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <main+0x528>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f ae57 	bne.w	8001204 <main+0x150>
			time = 0;
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <main+0x528>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800155c:	2028      	movs	r0, #40	; 0x28
 800155e:	f002 f81a 	bl	8003596 <HAL_NVIC_DisableIRQ>
			state = STATE_IDLE;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <main+0x524>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
			char tempp[10];
			itoa(score, tempp, 10);
 8001568:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <main+0x52c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4639      	mov	r1, r7
 800156e:	220a      	movs	r2, #10
 8001570:	4618      	mov	r0, r3
 8001572:	f00a ffc5 	bl	800c500 <itoa>
			writedata(uid_str, tempp);
 8001576:	463a      	mov	r2, r7
 8001578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fd2e 	bl	8000fe0 <writedata>
			writedata(uid_str, ", ");
 8001584:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001588:	4916      	ldr	r1, [pc, #88]	; (80015e4 <main+0x530>)
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd28 	bl	8000fe0 <writedata>
			send_uart("Waiting for RFID/NFC card...\r\n");
 8001590:	4815      	ldr	r0, [pc, #84]	; (80015e8 <main+0x534>)
 8001592:	f7ff fcf3 	bl	8000f7c <send_uart>
			memset(uid_str, 0, 15);
 8001596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159a:	220f      	movs	r2, #15
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f00a ffb0 	bl	800c504 <memset>
 80015a4:	e62e      	b.n	8001204 <main+0x150>
		}
	}
	else{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80015a6:	2028      	movs	r0, #40	; 0x28
 80015a8:	f001 fff5 	bl	8003596 <HAL_NVIC_DisableIRQ>
		state = STATE_IDLE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <main+0x524>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
		send_uart("Waiting for RFID/NFC card...\r\n");
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <main+0x534>)
 80015b4:	f7ff fce2 	bl	8000f7c <send_uart>
    /* USER CODE BEGIN 3 */prev_time = now_time;
 80015b8:	e624      	b.n	8001204 <main+0x150>
	}

  }
  /* USER CODE END 3 */
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	0800c6c8 	.word	0x0800c6c8
 80015c8:	0800c6a0 	.word	0x0800c6a0
 80015cc:	200001d4 	.word	0x200001d4
 80015d0:	20000004 	.word	0x20000004
 80015d4:	200016f4 	.word	0x200016f4
 80015d8:	200001d8 	.word	0x200001d8
 80015dc:	20001bc8 	.word	0x20001bc8
 80015e0:	20001740 	.word	0x20001740
 80015e4:	0800c6d4 	.word	0x0800c6d4
 80015e8:	0800c6d8 	.word	0x0800c6d8

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0b8      	sub	sp, #224	; 0xe0
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f6:	2244      	movs	r2, #68	; 0x44
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00a ff82 	bl	800c504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2288      	movs	r2, #136	; 0x88
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00a ff74 	bl	800c504 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162a:	2310      	movs	r3, #16
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001642:	2309      	movs	r3, #9
 8001644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001648:	2307      	movs	r3, #7
 800164a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800164e:	2302      	movs	r3, #2
 8001650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800165e:	4618      	mov	r0, r3
 8001660:	f003 f924 	bl	80048ac <HAL_RCC_OscConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800166a:	f000 fc0f 	bl	8001e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166e:	230f      	movs	r3, #15
 8001670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001674:	2303      	movs	r3, #3
 8001676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800168c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001690:	2104      	movs	r1, #4
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fcf0 	bl	8005078 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800169e:	f000 fbf5 	bl	8001e8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <SystemClock_Config+0x114>)
 80016a4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016a6:	2300      	movs	r3, #0
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80016ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016b2:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80016b4:	2302      	movs	r3, #2
 80016b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80016bc:	2308      	movs	r3, #8
 80016be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016c0:	2307      	movs	r3, #7
 80016c2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80016c4:	2304      	movs	r3, #4
 80016c6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016d0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d2:	463b      	mov	r3, r7
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fed3 	bl	8005480 <HAL_RCCEx_PeriphCLKConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80016e0:	f000 fbd4 	bl	8001e8c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016e8:	f003 f88a 	bl	8004800 <HAL_PWREx_ControlVoltageScaling>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80016f2:	f000 fbcb 	bl	8001e8c <Error_Handler>
  }
}
 80016f6:	bf00      	nop
 80016f8:	37e0      	adds	r7, #224	; 0xe0
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	00040041 	.word	0x00040041

08001704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_I2C1_Init+0x74>)
 800170a:	4a1c      	ldr	r2, [pc, #112]	; (800177c <MX_I2C1_Init+0x78>)
 800170c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_I2C1_Init+0x74>)
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <MX_I2C1_Init+0x7c>)
 8001712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 144;
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_I2C1_Init+0x74>)
 8001716:	2290      	movs	r2, #144	; 0x90
 8001718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_I2C1_Init+0x74>)
 800171c:	2201      	movs	r2, #1
 800171e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_I2C1_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_I2C1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_I2C1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800173e:	480e      	ldr	r0, [pc, #56]	; (8001778 <MX_I2C1_Init+0x74>)
 8001740:	f002 fb5f 	bl	8003e02 <HAL_I2C_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800174a:	f000 fb9f 	bl	8001e8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	4809      	ldr	r0, [pc, #36]	; (8001778 <MX_I2C1_Init+0x74>)
 8001752:	f002 ffaf 	bl	80046b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800175c:	f000 fb96 	bl	8001e8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_I2C1_Init+0x74>)
 8001764:	f002 fff1 	bl	800474a <HAL_I2CEx_ConfigDigitalFilter>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800176e:	f000 fb8d 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20001658 	.word	0x20001658
 800177c:	40005400 	.word	0x40005400
 8001780:	10808dd3 	.word	0x10808dd3

08001784 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_RNG_Init+0x20>)
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <MX_RNG_Init+0x24>)
 800178c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_RNG_Init+0x20>)
 8001790:	f004 fb26 	bl	8005de0 <HAL_RNG_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800179a:	f000 fb77 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20001bd0 	.word	0x20001bd0
 80017a8:	50060800 	.word	0x50060800

080017ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_SPI1_Init+0x74>)
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <MX_SPI1_Init+0x78>)
 80017b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_SPI1_Init+0x74>)
 80017b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_SPI1_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_SPI1_Init+0x74>)
 80017c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_SPI1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_SPI1_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_SPI1_Init+0x74>)
 80017da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_SPI1_Init+0x74>)
 80017e2:	2210      	movs	r2, #16
 80017e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_SPI1_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_SPI1_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_SPI1_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_SPI1_Init+0x74>)
 80017fa:	2207      	movs	r2, #7
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_SPI1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_SPI1_Init+0x74>)
 8001806:	2208      	movs	r2, #8
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_SPI1_Init+0x74>)
 800180c:	f004 fb38 	bl	8005e80 <HAL_SPI_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001816:	f000 fb39 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20001be8 	.word	0x20001be8
 8001824:	40013000 	.word	0x40013000

08001828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	; 0x38
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001848:	463b      	mov	r3, r7
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	615a      	str	r2, [r3, #20]
 8001858:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800185a:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <MX_TIM2_Init+0xe8>)
 800185c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001860:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <MX_TIM2_Init+0xe8>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <MX_TIM2_Init+0xe8>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <MX_TIM2_Init+0xe8>)
 8001870:	2259      	movs	r2, #89	; 0x59
 8001872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <MX_TIM2_Init+0xe8>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <MX_TIM2_Init+0xe8>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001880:	4823      	ldr	r0, [pc, #140]	; (8001910 <MX_TIM2_Init+0xe8>)
 8001882:	f005 f88b 	bl	800699c <HAL_TIM_Base_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800188c:	f000 fafe 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800189a:	4619      	mov	r1, r3
 800189c:	481c      	ldr	r0, [pc, #112]	; (8001910 <MX_TIM2_Init+0xe8>)
 800189e:	f006 f8a9 	bl	80079f4 <HAL_TIM_ConfigClockSource>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018a8:	f000 faf0 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018ac:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM2_Init+0xe8>)
 80018ae:	f005 f96c 	bl	8006b8a <HAL_TIM_PWM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018b8:	f000 fae8 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	4811      	ldr	r0, [pc, #68]	; (8001910 <MX_TIM2_Init+0xe8>)
 80018cc:	f006 fe7e 	bl	80085cc <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80018d6:	f000 fad9 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018da:	2360      	movs	r3, #96	; 0x60
 80018dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	2200      	movs	r2, #0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM2_Init+0xe8>)
 80018f2:	f005 ff6f 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80018fc:	f000 fac6 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM2_Init+0xe8>)
 8001902:	f001 fa17 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 8001906:	bf00      	nop
 8001908:	3738      	adds	r7, #56	; 0x38
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20001c4c 	.word	0x20001c4c

08001914 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <MX_TIM3_Init+0x98>)
 8001934:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <MX_TIM3_Init+0x9c>)
 8001936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <MX_TIM3_Init+0x98>)
 800193a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800193e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <MX_TIM3_Init+0x98>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <MX_TIM3_Init+0x98>)
 8001948:	f242 720f 	movw	r2, #9999	; 0x270f
 800194c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_TIM3_Init+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <MX_TIM3_Init+0x98>)
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <MX_TIM3_Init+0x98>)
 800195c:	f005 f81e 	bl	800699c <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001966:	f000 fa91 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <MX_TIM3_Init+0x98>)
 8001978:	f006 f83c 	bl	80079f4 <HAL_TIM_ConfigClockSource>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001982:	f000 fa83 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	; (80019ac <MX_TIM3_Init+0x98>)
 8001994:	f006 fe1a 	bl	80085cc <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800199e:	f000 fa75 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200016f4 	.word	0x200016f4
 80019b0:	40000400 	.word	0x40000400

080019b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08e      	sub	sp, #56	; 0x38
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <MX_TIM5_Init+0xe8>)
 80019e8:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <MX_TIM5_Init+0xec>)
 80019ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <MX_TIM5_Init+0xe8>)
 80019ee:	2264      	movs	r2, #100	; 0x64
 80019f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <MX_TIM5_Init+0xe8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3600;
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <MX_TIM5_Init+0xe8>)
 80019fa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80019fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <MX_TIM5_Init+0xe8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <MX_TIM5_Init+0xe8>)
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a0c:	4823      	ldr	r0, [pc, #140]	; (8001a9c <MX_TIM5_Init+0xe8>)
 8001a0e:	f004 ffc5 	bl	800699c <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001a18:	f000 fa38 	bl	8001e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a26:	4619      	mov	r1, r3
 8001a28:	481c      	ldr	r0, [pc, #112]	; (8001a9c <MX_TIM5_Init+0xe8>)
 8001a2a:	f005 ffe3 	bl	80079f4 <HAL_TIM_ConfigClockSource>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001a34:	f000 fa2a 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a38:	4818      	ldr	r0, [pc, #96]	; (8001a9c <MX_TIM5_Init+0xe8>)
 8001a3a:	f005 f8a6 	bl	8006b8a <HAL_TIM_PWM_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001a44:	f000 fa22 	bl	8001e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <MX_TIM5_Init+0xe8>)
 8001a58:	f006 fdb8 	bl	80085cc <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001a62:	f000 fa13 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a66:	2360      	movs	r3, #96	; 0x60
 8001a68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8001a6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4807      	ldr	r0, [pc, #28]	; (8001a9c <MX_TIM5_Init+0xe8>)
 8001a80:	f005 fea8 	bl	80077d4 <HAL_TIM_PWM_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 8001a8a:	f000 f9ff 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <MX_TIM5_Init+0xe8>)
 8001a90:	f001 f950 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 8001a94:	bf00      	nop
 8001a96:	3738      	adds	r7, #56	; 0x38
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200016a8 	.word	0x200016a8
 8001aa0:	40000c00 	.word	0x40000c00

08001aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <MX_USART1_UART_Init+0x5c>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART1_UART_Init+0x58>)
 8001ae8:	f006 fe16 	bl	8008718 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001af2:	f000 f9cb 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20001748 	.word	0x20001748
 8001b00:	40013800 	.word	0x40013800

08001b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_DMA_Init+0x38>)
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <MX_DMA_Init+0x38>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6493      	str	r3, [r2, #72]	; 0x48
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_DMA_Init+0x38>)
 8001b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	200f      	movs	r0, #15
 8001b28:	f001 fd0b 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b2c:	200f      	movs	r0, #15
 8001b2e:	f001 fd24 	bl	800357a <HAL_NVIC_EnableIRQ>

}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000

08001b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b56:	4b45      	ldr	r3, [pc, #276]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a44      	ldr	r2, [pc, #272]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b39      	ldr	r3, [pc, #228]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a38      	ldr	r2, [pc, #224]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a32      	ldr	r2, [pc, #200]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001baa:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <MX_GPIO_Init+0x12c>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2107      	movs	r1, #7
 8001bba:	482d      	ldr	r0, [pc, #180]	; (8001c70 <MX_GPIO_Init+0x130>)
 8001bbc:	f002 f8e6 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PN532_RST_Pin, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	482b      	ldr	r0, [pc, #172]	; (8001c74 <MX_GPIO_Init+0x134>)
 8001bc6:	f002 f8e1 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001bca:	2307      	movs	r3, #7
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4823      	ldr	r0, [pc, #140]	; (8001c70 <MX_GPIO_Init+0x130>)
 8001be2:	f001 ff2b 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001be6:	2301      	movs	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	481d      	ldr	r0, [pc, #116]	; (8001c74 <MX_GPIO_Init+0x134>)
 8001bfe:	f001 ff1d 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PN532_RST_Pin */
  GPIO_InitStruct.Pin = PN532_RST_Pin;
 8001c02:	2304      	movs	r3, #4
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PN532_RST_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4816      	ldr	r0, [pc, #88]	; (8001c74 <MX_GPIO_Init+0x134>)
 8001c1a:	f001 ff0f 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c1e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_GPIO_Init+0x138>)
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4810      	ldr	r0, [pc, #64]	; (8001c74 <MX_GPIO_Init+0x134>)
 8001c34:	f001 ff02 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_GPIO_Init+0x138>)
 8001c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4808      	ldr	r0, [pc, #32]	; (8001c70 <MX_GPIO_Init+0x130>)
 8001c4e:	f001 fef5 	bl	8003a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2028      	movs	r0, #40	; 0x28
 8001c58:	f001 fc73 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c5c:	2028      	movs	r0, #40	; 0x28
 8001c5e:	f001 fc8c 	bl	800357a <HAL_NVIC_EnableIRQ>

}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	48000800 	.word	0x48000800
 8001c74:	48000400 	.word	0x48000400
 8001c78:	10210000 	.word	0x10210000

08001c7c <hsl_to_rgb>:

/* USER CODE BEGIN 4 */
uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	460b      	mov	r3, r1
 8001c88:	71bb      	strb	r3, [r7, #6]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 8001c8e:	797b      	ldrb	r3, [r7, #5]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <hsl_to_rgb+0x1c>
 8001c94:	2300      	movs	r3, #0
 8001c96:	e0b1      	b.n	8001dfc <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8001c98:	797b      	ldrb	r3, [r7, #5]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8001ca2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db09      	blt.n	8001cbe <hsl_to_rgb+0x42>
 8001caa:	89bb      	ldrh	r3, [r7, #12]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	79ba      	ldrb	r2, [r7, #6]
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	121b      	asrs	r3, r3, #8
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	74fb      	strb	r3, [r7, #19]
 8001cbc:	e00a      	b.n	8001cd4 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8001cbe:	89bb      	ldrh	r3, [r7, #12]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001cc8:	79ba      	ldrb	r2, [r7, #6]
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	121b      	asrs	r3, r3, #8
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	0052      	lsls	r2, r2, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8001ce4:	897b      	ldrh	r3, [r7, #10]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8001cec:	7d3b      	ldrb	r3, [r7, #20]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <hsl_to_rgb+0x9c>
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	7cfa      	ldrb	r2, [r7, #19]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	121b      	asrs	r3, r3, #8
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	74bb      	strb	r3, [r7, #18]
 8001d16:	e00a      	b.n	8001d2e <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8001d18:	89fb      	ldrh	r3, [r7, #14]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001d20:	7cfa      	ldrb	r2, [r7, #19]
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	121b      	asrs	r3, r3, #8
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 8001d2e:	7cfb      	ldrb	r3, [r7, #19]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	797a      	ldrb	r2, [r7, #5]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 8001d3e:	897b      	ldrh	r3, [r7, #10]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d839      	bhi.n	8001dbe <hsl_to_rgb+0x142>
 8001d4a:	a201      	add	r2, pc, #4	; (adr r2, 8001d50 <hsl_to_rgb+0xd4>)
 8001d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d50:	08001d65 	.word	0x08001d65
 8001d54:	08001d77 	.word	0x08001d77
 8001d58:	08001d89 	.word	0x08001d89
 8001d5c:	08001d9b 	.word	0x08001d9b
 8001d60:	08001dad 	.word	0x08001dad
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8001d64:	7cfb      	ldrb	r3, [r7, #19]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	75fb      	strb	r3, [r7, #23]
 8001d6a:	7cbb      	ldrb	r3, [r7, #18]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	75bb      	strb	r3, [r7, #22]
 8001d70:	2300      	movs	r3, #0
 8001d72:	757b      	strb	r3, [r7, #21]
 8001d74:	e02c      	b.n	8001dd0 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8001d76:	7cbb      	ldrb	r3, [r7, #18]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	75fb      	strb	r3, [r7, #23]
 8001d7c:	7cfb      	ldrb	r3, [r7, #19]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	75bb      	strb	r3, [r7, #22]
 8001d82:	2300      	movs	r3, #0
 8001d84:	757b      	strb	r3, [r7, #21]
 8001d86:	e023      	b.n	8001dd0 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8001d88:	2300      	movs	r3, #0
 8001d8a:	75fb      	strb	r3, [r7, #23]
 8001d8c:	7cfb      	ldrb	r3, [r7, #19]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	75bb      	strb	r3, [r7, #22]
 8001d92:	7cbb      	ldrb	r3, [r7, #18]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	757b      	strb	r3, [r7, #21]
 8001d98:	e01a      	b.n	8001dd0 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
 8001d9e:	7cbb      	ldrb	r3, [r7, #18]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	75bb      	strb	r3, [r7, #22]
 8001da4:	7cfb      	ldrb	r3, [r7, #19]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	757b      	strb	r3, [r7, #21]
 8001daa:	e011      	b.n	8001dd0 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8001dac:	7cbb      	ldrb	r3, [r7, #18]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	75fb      	strb	r3, [r7, #23]
 8001db2:	2300      	movs	r3, #0
 8001db4:	75bb      	strb	r3, [r7, #22]
 8001db6:	7cfb      	ldrb	r3, [r7, #19]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	757b      	strb	r3, [r7, #21]
 8001dbc:	e008      	b.n	8001dd0 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	75fb      	strb	r3, [r7, #23]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	75bb      	strb	r3, [r7, #22]
 8001dc8:	7cbb      	ldrb	r3, [r7, #18]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	757b      	strb	r3, [r7, #21]
 8001dce:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	7c7b      	ldrb	r3, [r7, #17]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4413      	add	r3, r2
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	7dbb      	ldrb	r3, [r7, #22]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4619      	mov	r1, r3
 8001de4:	7c7b      	ldrb	r3, [r7, #17]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	440b      	add	r3, r1
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	431a      	orrs	r2, r3
 8001dee:	7d7b      	ldrb	r3, [r7, #21]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	7c7b      	ldrb	r3, [r7, #17]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	440b      	add	r3, r1
 8001dfa:	4313      	orrs	r3, r2
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <Max7219Display>:
// score 0 -> score
// score 4 -> time
void Max7219Display(int num, int score)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
	SET_REG(RCC->CFGR,RCC_CFGR_HPRE,0b1011<<4)
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <Max7219Display+0x7c>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <Max7219Display+0x7c>)
 8001e1c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001e20:	6093      	str	r3, [r2, #8]
	for(int i = 1; i < 4; i++){
 8001e22:	2301      	movs	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e020      	b.n	8001e6a <Max7219Display+0x62>
		max7219_send(i+score, num%10);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	b2d8      	uxtb	r0, r3
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <Max7219Display+0x80>)
 8001e38:	fb83 1302 	smull	r1, r3, r3, r2
 8001e3c:	1099      	asrs	r1, r3, #2
 8001e3e:	17d3      	asrs	r3, r2, #31
 8001e40:	1ac9      	subs	r1, r1, r3
 8001e42:	460b      	mov	r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	1ad1      	subs	r1, r2, r3
 8001e4c:	b2cb      	uxtb	r3, r1
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe f9ba 	bl	80001c8 <max7219_send>
		num /= 10;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <Max7219Display+0x80>)
 8001e58:	fb82 1203 	smull	r1, r2, r2, r3
 8001e5c:	1092      	asrs	r2, r2, #2
 8001e5e:	17db      	asrs	r3, r3, #31
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < 4; i++){
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3301      	adds	r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	dddb      	ble.n	8001e28 <Max7219Display+0x20>
	}
	SET_REG(RCC->CFGR,RCC_CFGR_HPRE,0b0000<<4)
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <Max7219Display+0x7c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a03      	ldr	r2, [pc, #12]	; (8001e84 <Max7219Display+0x7c>)
 8001e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e7a:	6093      	str	r3, [r2, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	66666667 	.word	0x66666667

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <Error_Handler+0x6>

08001e94 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0c8      	sub	sp, #288	; 0x120
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	6018      	str	r0, [r3, #0]
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	6019      	str	r1, [r3, #0]
 8001ea6:	1dbb      	adds	r3, r7, #6
 8001ea8:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8001eaa:	1dbb      	adds	r3, r7, #6
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d803      	bhi.n	8001eba <PN532_WriteFrame+0x26>
 8001eb2:	1dbb      	adds	r3, r7, #6
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <PN532_WriteFrame+0x2c>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e080      	b.n	8001fc2 <PN532_WriteFrame+0x12e>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	22ff      	movs	r2, #255	; 0xff
 8001edc:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001ee4:	e00e      	b.n	8001f04 <PN532_WriteFrame+0x70>
        checksum += frame[i];
 8001ee6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001eea:	f107 0214 	add.w	r2, r7, #20
 8001eee:	5cd2      	ldrb	r2, [r2, r3]
 8001ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8001efa:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001efe:	3301      	adds	r3, #1
 8001f00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001f04:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d9ec      	bls.n	8001ee6 <PN532_WriteFrame+0x52>
    }
    frame[3] = length & 0xFF;
 8001f0c:	1dbb      	adds	r3, r7, #6
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8001f18:	1dbb      	adds	r3, r7, #6
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	425b      	negs	r3, r3
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8001f2e:	e01d      	b.n	8001f6c <PN532_WriteFrame+0xd8>
        frame[5 + i] = data[i];
 8001f30:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001f34:	f107 0208 	add.w	r2, r7, #8
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	441a      	add	r2, r3
 8001f3c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001f40:	3305      	adds	r3, #5
 8001f42:	7811      	ldrb	r1, [r2, #0]
 8001f44:	f107 0214 	add.w	r2, r7, #20
 8001f48:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8001f4a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001f4e:	f107 0208 	add.w	r2, r7, #8
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8001f62:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001f66:	3301      	adds	r3, #1
 8001f68:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8001f6c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	1dba      	adds	r2, r7, #6
 8001f74:	8812      	ldrh	r2, [r2, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d8da      	bhi.n	8001f30 <PN532_WriteFrame+0x9c>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8001f7a:	1dbb      	adds	r3, r7, #6
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	3305      	adds	r3, #5
 8001f80:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8001f84:	43d2      	mvns	r2, r2
 8001f86:	b2d1      	uxtb	r1, r2
 8001f88:	f107 0214 	add.w	r2, r7, #20
 8001f8c:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8001f8e:	1dbb      	adds	r3, r7, #6
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	3306      	adds	r3, #6
 8001f94:	f107 0214 	add.w	r2, r7, #20
 8001f98:	2100      	movs	r1, #0
 8001f9a:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	1dba      	adds	r2, r7, #6
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	3207      	adds	r2, #7
 8001faa:	b291      	uxth	r1, r2
 8001fac:	f107 0214 	add.w	r2, r7, #20
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4798      	blx	r3
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <PN532_WriteFrame+0x12c>
        return PN532_STATUS_ERROR;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e000      	b.n	8001fc2 <PN532_WriteFrame+0x12e>
    }
    return PN532_STATUS_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0c8      	sub	sp, #288	; 0x120
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	6018      	str	r0, [r3, #0]
 8001fd8:	f107 0308 	add.w	r3, r7, #8
 8001fdc:	6019      	str	r1, [r3, #0]
 8001fde:	1dbb      	adds	r3, r7, #6
 8001fe0:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	1dba      	adds	r2, r7, #6
 8001ff2:	8812      	ldrh	r2, [r2, #0]
 8001ff4:	3207      	adds	r2, #7
 8001ff6:	b291      	uxth	r1, r2
 8001ff8:	f107 0214 	add.w	r2, r7, #20
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 8002006:	e014      	b.n	8002032 <PN532_ReadFrame+0x66>
        offset += 1;
 8002008:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800200c:	3301      	adds	r3, #1
 800200e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 8002012:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 8002016:	1dbb      	adds	r3, r7, #6
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	3308      	adds	r3, #8
 800201c:	429a      	cmp	r2, r3
 800201e:	db08      	blt.n	8002032 <PN532_ReadFrame+0x66>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8002020:	f107 030c 	add.w	r3, r7, #12
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	484e      	ldr	r0, [pc, #312]	; (8002164 <PN532_ReadFrame+0x198>)
 800202a:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
 8002030:	e093      	b.n	800215a <PN532_ReadFrame+0x18e>
    while (buff[offset] == 0x00) {
 8002032:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002036:	f107 0214 	add.w	r2, r7, #20
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0e3      	beq.n	8002008 <PN532_ReadFrame+0x3c>
        }
    }
    if (buff[offset] != 0xFF) {
 8002040:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002044:	f107 0214 	add.w	r2, r7, #20
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	2bff      	cmp	r3, #255	; 0xff
 800204c:	d008      	beq.n	8002060 <PN532_ReadFrame+0x94>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4843      	ldr	r0, [pc, #268]	; (8002164 <PN532_ReadFrame+0x198>)
 8002058:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	e07c      	b.n	800215a <PN532_ReadFrame+0x18e>
    }
    offset += 1;
 8002060:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002064:	3301      	adds	r3, #1
 8002066:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 800206a:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 800206e:	1dbb      	adds	r3, r7, #6
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	3308      	adds	r3, #8
 8002074:	429a      	cmp	r2, r3
 8002076:	db08      	blt.n	800208a <PN532_ReadFrame+0xbe>
        pn532->log("Response contains no data!");
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	4839      	ldr	r0, [pc, #228]	; (8002168 <PN532_ReadFrame+0x19c>)
 8002082:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
 8002088:	e067      	b.n	800215a <PN532_ReadFrame+0x18e>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 800208a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800208e:	f107 0214 	add.w	r2, r7, #20
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8002098:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800209c:	3301      	adds	r3, #1
 800209e:	f107 0214 	add.w	r2, r7, #20
 80020a2:	5cd2      	ldrb	r2, [r2, r3]
 80020a4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80020a8:	4413      	add	r3, r2
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <PN532_ReadFrame+0xf6>
        pn532->log("Response length checksum did not match length!");
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	482c      	ldr	r0, [pc, #176]	; (800216c <PN532_ReadFrame+0x1a0>)
 80020ba:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	e04b      	b.n	800215a <PN532_ReadFrame+0x18e>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80020c8:	e012      	b.n	80020f0 <PN532_ReadFrame+0x124>
        checksum += buff[offset + 2 + i];
 80020ca:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80020ce:	1c9a      	adds	r2, r3, #2
 80020d0:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80020d4:	4413      	add	r3, r2
 80020d6:	f107 0214 	add.w	r2, r7, #20
 80020da:	5cd2      	ldrb	r2, [r2, r3]
 80020dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80020e0:	4413      	add	r3, r2
 80020e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80020e6:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80020ea:	3301      	adds	r3, #1
 80020ec:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80020f0:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80020f4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80020f8:	3301      	adds	r3, #1
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dbe5      	blt.n	80020ca <PN532_ReadFrame+0xfe>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 80020fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <PN532_ReadFrame+0x14c>
        pn532->log("Response checksum did not match expected checksum");
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4818      	ldr	r0, [pc, #96]	; (8002170 <PN532_ReadFrame+0x1a4>)
 8002110:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	e020      	b.n	800215a <PN532_ReadFrame+0x18e>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8002118:	2300      	movs	r3, #0
 800211a:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 800211e:	e014      	b.n	800214a <PN532_ReadFrame+0x17e>
        response[i] = buff[offset + 2 + i];
 8002120:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8002124:	1c9a      	adds	r2, r3, #2
 8002126:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 800212a:	441a      	add	r2, r3
 800212c:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8002130:	f107 0108 	add.w	r1, r7, #8
 8002134:	6809      	ldr	r1, [r1, #0]
 8002136:	440b      	add	r3, r1
 8002138:	f107 0114 	add.w	r1, r7, #20
 800213c:	5c8a      	ldrb	r2, [r1, r2]
 800213e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8002140:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8002144:	3301      	adds	r3, #1
 8002146:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 800214a:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 800214e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8002152:	429a      	cmp	r2, r3
 8002154:	d3e4      	bcc.n	8002120 <PN532_ReadFrame+0x154>
    }
    return frame_len;
 8002156:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 800215a:	4618      	mov	r0, r3
 800215c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	0800c6f8 	.word	0x0800c6f8
 8002168:	0800c72c 	.word	0x0800c72c
 800216c:	0800c748 	.word	0x0800c748
 8002170:	0800c778 	.word	0x0800c778

08002174 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b0c7      	sub	sp, #284	; 0x11c
 8002178:	af00      	add	r7, sp, #0
 800217a:	f107 040c 	add.w	r4, r7, #12
 800217e:	6020      	str	r0, [r4, #0]
 8002180:	4608      	mov	r0, r1
 8002182:	1d39      	adds	r1, r7, #4
 8002184:	600a      	str	r2, [r1, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	f107 030b 	add.w	r3, r7, #11
 800218c:	4602      	mov	r2, r0
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	460a      	mov	r2, r1
 8002196:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	22d4      	movs	r2, #212	; 0xd4
 800219e:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	f107 020b 	add.w	r2, r7, #11
 80021a8:	7812      	ldrb	r2, [r2, #0]
 80021aa:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80021b2:	e010      	b.n	80021d6 <PN532_CallFunction+0x62>
        buff[2 + i] = params[i];
 80021b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80021b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80021bc:	441a      	add	r2, r3
 80021be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80021c2:	3302      	adds	r3, #2
 80021c4:	7811      	ldrb	r1, [r2, #0]
 80021c6:	f107 0210 	add.w	r2, r7, #16
 80021ca:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 80021cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80021d0:	3301      	adds	r3, #1
 80021d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80021d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d8e7      	bhi.n	80021b4 <PN532_CallFunction+0x40>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 80021e4:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80021e8:	3302      	adds	r3, #2
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	f107 0110 	add.w	r1, r7, #16
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	f7ff fe4d 	bl	8001e94 <PN532_WriteFrame>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <PN532_CallFunction+0xa8>
        pn532->wakeup();
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 800220a:	f107 030c 	add.w	r3, r7, #12
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	484d      	ldr	r0, [pc, #308]	; (8002348 <PN532_CallFunction+0x1d4>)
 8002214:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	e08f      	b.n	800233c <PN532_CallFunction+0x1c8>
    }
    if (!pn532->wait_ready(timeout)) {
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002228:	4798      	blx	r3
 800222a:	4603      	mov	r3, r0
 800222c:	f083 0301 	eor.w	r3, r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <PN532_CallFunction+0xc8>
        return PN532_STATUS_ERROR;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e07f      	b.n	800233c <PN532_CallFunction+0x1c8>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f107 0210 	add.w	r2, r7, #16
 8002248:	2106      	movs	r1, #6
 800224a:	4610      	mov	r0, r2
 800224c:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 800224e:	2300      	movs	r3, #0
 8002250:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002254:	e018      	b.n	8002288 <PN532_CallFunction+0x114>
        if (PN532_ACK[i] != buff[i]) {
 8002256:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800225a:	4a3c      	ldr	r2, [pc, #240]	; (800234c <PN532_CallFunction+0x1d8>)
 800225c:	5cd2      	ldrb	r2, [r2, r3]
 800225e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002262:	f107 0110 	add.w	r1, r7, #16
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	429a      	cmp	r2, r3
 800226a:	d008      	beq.n	800227e <PN532_CallFunction+0x10a>
            pn532->log("Did not receive expected ACK from PN532!");
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	4836      	ldr	r0, [pc, #216]	; (8002350 <PN532_CallFunction+0x1dc>)
 8002276:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
 800227c:	e05e      	b.n	800233c <PN532_CallFunction+0x1c8>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 800227e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002282:	3301      	adds	r3, #1
 8002284:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002288:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800228c:	2b05      	cmp	r3, #5
 800228e:	d9e2      	bls.n	8002256 <PN532_CallFunction+0xe2>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800229c:	4798      	blx	r3
 800229e:	4603      	mov	r3, r0
 80022a0:	f083 0301 	eor.w	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <PN532_CallFunction+0x13c>
        return PN532_STATUS_ERROR;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	e045      	b.n	800233c <PN532_CallFunction+0x1c8>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	3302      	adds	r3, #2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	f107 0110 	add.w	r1, r7, #16
 80022be:	f107 030c 	add.w	r3, r7, #12
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	f7ff fe82 	bl	8001fcc <PN532_ReadFrame>
 80022c8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2bd5      	cmp	r3, #213	; 0xd5
 80022d4:	d109      	bne.n	80022ea <PN532_CallFunction+0x176>
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	785b      	ldrb	r3, [r3, #1]
 80022dc:	461a      	mov	r2, r3
 80022de:	f107 030b 	add.w	r3, r7, #11
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d008      	beq.n	80022fc <PN532_CallFunction+0x188>
        pn532->log("Received unexpected command response!");
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	4818      	ldr	r0, [pc, #96]	; (8002354 <PN532_CallFunction+0x1e0>)
 80022f4:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e01f      	b.n	800233c <PN532_CallFunction+0x1c8>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8002302:	e010      	b.n	8002326 <PN532_CallFunction+0x1b2>
        response[i] = buff[i + 2];
 8002304:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002308:	1c9a      	adds	r2, r3, #2
 800230a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800230e:	1d39      	adds	r1, r7, #4
 8002310:	6809      	ldr	r1, [r1, #0]
 8002312:	440b      	add	r3, r1
 8002314:	f107 0110 	add.w	r1, r7, #16
 8002318:	5c8a      	ldrb	r2, [r1, r2]
 800231a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 800231c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002320:	3301      	adds	r3, #1
 8002322:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8002326:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800232a:	b29b      	uxth	r3, r3
 800232c:	f107 0208 	add.w	r2, r7, #8
 8002330:	8812      	ldrh	r2, [r2, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d8e6      	bhi.n	8002304 <PN532_CallFunction+0x190>
    }
    // The the number of bytes read
    return frame_len - 2;
 8002336:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800233a:	3b02      	subs	r3, #2
}
 800233c:	4618      	mov	r0, r3
 800233e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	bf00      	nop
 8002348:	0800c7ac 	.word	0x0800c7ac
 800234c:	0800c8d4 	.word	0x0800c8d4
 8002350:	0800c7c0 	.word	0x0800c7c0
 8002354:	0800c7ec 	.word	0x0800c7ec

08002358 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af04      	add	r7, sp, #16
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8002362:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002366:	9302      	str	r3, [sp, #8]
 8002368:	2300      	movs	r3, #0
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2304      	movs	r3, #4
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	2102      	movs	r1, #2
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fefc 	bl	8002174 <PN532_CallFunction>
 800237c:	4603      	mov	r3, r0
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002382:	d106      	bne.n	8002392 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	4804      	ldr	r0, [pc, #16]	; (800239c <PN532_GetFirmwareVersion+0x44>)
 800238a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	e000      	b.n	8002394 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	0800c814 	.word	0x0800c814

080023a0 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af04      	add	r7, sp, #16
 80023a6:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 80023a8:	4a0d      	ldr	r2, [pc, #52]	; (80023e0 <PN532_SamConfiguration+0x40>)
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	4611      	mov	r1, r2
 80023b2:	8019      	strh	r1, [r3, #0]
 80023b4:	3302      	adds	r3, #2
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 80023ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	2303      	movs	r3, #3
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	2200      	movs	r2, #0
 80023ce:	2114      	movs	r1, #20
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff fecf 	bl	8002174 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	0800c830 	.word	0x0800c830

080023e4 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b090      	sub	sp, #64	; 0x40
 80023e8:	af04      	add	r7, sp, #16
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8002400:	f107 0210 	add.w	r2, r7, #16
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	9302      	str	r3, [sp, #8]
 8002408:	2302      	movs	r3, #2
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2313      	movs	r3, #19
 8002414:	214a      	movs	r1, #74	; 0x4a
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f7ff feac 	bl	8002174 <PN532_CallFunction>
 800241c:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	da02      	bge.n	800242a <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	e02f      	b.n	800248a <PN532_ReadPassiveTarget+0xa6>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 800242a:	7c3b      	ldrb	r3, [r7, #16]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d006      	beq.n	800243e <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	4817      	ldr	r0, [pc, #92]	; (8002494 <PN532_ReadPassiveTarget+0xb0>)
 8002436:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	e025      	b.n	800248a <PN532_ReadPassiveTarget+0xa6>
    }
    if (buff[5] > 7) {
 800243e:	7d7b      	ldrb	r3, [r7, #21]
 8002440:	2b07      	cmp	r3, #7
 8002442:	d906      	bls.n	8002452 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	4813      	ldr	r0, [pc, #76]	; (8002498 <PN532_ReadPassiveTarget+0xb4>)
 800244a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	e01b      	b.n	800248a <PN532_ReadPassiveTarget+0xa6>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8002452:	2300      	movs	r3, #0
 8002454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002458:	e011      	b.n	800247e <PN532_ReadPassiveTarget+0x9a>
        response[i] = buff[6 + i];
 800245a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800245e:	1d9a      	adds	r2, r3, #6
 8002460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	440b      	add	r3, r1
 8002468:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800246c:	440a      	add	r2, r1
 800246e:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8002472:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8002474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002478:	3301      	adds	r3, #1
 800247a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800247e:	7d7b      	ldrb	r3, [r7, #21]
 8002480:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002484:	429a      	cmp	r2, r3
 8002486:	d3e8      	bcc.n	800245a <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8002488:	7d7b      	ldrb	r3, [r7, #21]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3730      	adds	r7, #48	; 0x30
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	0800c834 	.word	0x0800c834
 8002498:	0800c854 	.word	0x0800c854

0800249c <PN532_Reset>:
 **************************************************************************/
extern UART_HandleTypeDef huart1;



int PN532_Reset(void) {
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
    //HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
    HAL_Delay(100);
 80024a0:	2064      	movs	r0, #100	; 0x64
 80024a2:	f000 ff2f 	bl	8003304 <HAL_Delay>
    //HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
    HAL_Delay(500);
 80024a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024aa:	f000 ff2b 	bl	8003304 <HAL_Delay>
    //HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
    HAL_Delay(100);
 80024ae:	2064      	movs	r0, #100	; 0x64
 80024b0:	f000 ff28 	bl	8003304 <HAL_Delay>
    return PN532_STATUS_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	bd80      	pop	{r7, pc}

080024ba <PN532_Log>:

void PN532_Log(const char* log) {
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
	send_uart(log);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fd5a 	bl	8000f7c <send_uart>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <i2c_read>:
 * End: SPI
 **************************************************************************/
/**************************************************************************
 * I2C
 **************************************************************************/
void i2c_read(uint8_t* data, uint16_t count) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 80024dc:	887a      	ldrh	r2, [r7, #2]
 80024de:	230a      	movs	r3, #10
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	4613      	mov	r3, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	2148      	movs	r1, #72	; 0x48
 80024e8:	4803      	ldr	r0, [pc, #12]	; (80024f8 <i2c_read+0x28>)
 80024ea:	f001 fe0d 	bl	8004108 <HAL_I2C_Master_Receive>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20001658 	.word	0x20001658

080024fc <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af02      	add	r7, sp, #8
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8002508:	887a      	ldrh	r2, [r7, #2]
 800250a:	230a      	movs	r3, #10
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	2148      	movs	r1, #72	; 0x48
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <i2c_write+0x28>)
 8002516:	f001 fd03 	bl	8003f20 <HAL_I2C_Master_Transmit>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20001658 	.word	0x20001658

08002528 <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	466b      	mov	r3, sp
 8002536:	461d      	mov	r5, r3
    uint8_t status[] = {0x00};
 8002538:	2300      	movs	r3, #0
 800253a:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	1c58      	adds	r0, r3, #1
 8002540:	1e43      	subs	r3, r0, #1
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	4603      	mov	r3, r0
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	f04f 0400 	mov.w	r4, #0
 8002554:	00d4      	lsls	r4, r2, #3
 8002556:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800255a:	00cb      	lsls	r3, r1, #3
 800255c:	4603      	mov	r3, r0
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	f04f 0400 	mov.w	r4, #0
 800256c:	00d4      	lsls	r4, r2, #3
 800256e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002572:	00cb      	lsls	r3, r1, #3
 8002574:	4603      	mov	r3, r0
 8002576:	3307      	adds	r3, #7
 8002578:	08db      	lsrs	r3, r3, #3
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	ebad 0d03 	sub.w	sp, sp, r3
 8002580:	466b      	mov	r3, sp
 8002582:	3300      	adds	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	2101      	movs	r1, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff9f 	bl	80024d0 <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 8002592:	7a3b      	ldrb	r3, [r7, #8]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d002      	beq.n	800259e <PN532_I2C_ReadData+0x76>
        return PN532_STATUS_ERROR;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	e01b      	b.n	80025d6 <PN532_I2C_ReadData+0xae>
    }
    i2c_read(frame, count + 1);
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f7ff ff91 	bl	80024d0 <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 80025ae:	2300      	movs	r3, #0
 80025b0:	75fb      	strb	r3, [r7, #23]
 80025b2:	e00a      	b.n	80025ca <PN532_I2C_ReadData+0xa2>
        data[i] = frame[i + 1];
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	440b      	add	r3, r1
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	5c8a      	ldrb	r2, [r1, r2]
 80025c2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	3301      	adds	r3, #1
 80025c8:	75fb      	strb	r3, [r7, #23]
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d8ef      	bhi.n	80025b4 <PN532_I2C_ReadData+0x8c>
    }
    return PN532_STATUS_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	46ad      	mov	sp, r5
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bdb0      	pop	{r4, r5, r7, pc}

080025e0 <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 80025ec:	887b      	ldrh	r3, [r7, #2]
 80025ee:	4619      	mov	r1, r3
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ff83 	bl	80024fc <i2c_write>
    return PN532_STATUS_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 8002608:	2300      	movs	r3, #0
 800260a:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 800260c:	f000 fe6e 	bl	80032ec <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8002612:	e00d      	b.n	8002630 <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	2101      	movs	r1, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ff58 	bl	80024d0 <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 8002620:	7a3b      	ldrb	r3, [r7, #8]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <PN532_I2C_WaitReady+0x2a>
            return true;
 8002626:	2301      	movs	r3, #1
 8002628:	e00b      	b.n	8002642 <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 800262a:	2005      	movs	r0, #5
 800262c:	f000 fe6a 	bl	8003304 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8002630:	f000 fe5c 	bl	80032ec <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d8e9      	bhi.n	8002614 <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0
    // TODO
    //HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
    HAL_Delay(100);
 800264e:	2064      	movs	r0, #100	; 0x64
 8002650:	f000 fe58 	bl	8003304 <HAL_Delay>
    //HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_RESET);
    HAL_Delay(100);
 8002654:	2064      	movs	r0, #100	; 0x64
 8002656:	f000 fe55 	bl	8003304 <HAL_Delay>
    //HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
    HAL_Delay(500);
 800265a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800265e:	f000 fe51 	bl	8003304 <HAL_Delay>
    return PN532_STATUS_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}

08002668 <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <PN532_I2C_Init+0x3c>)
 8002674:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <PN532_I2C_Init+0x40>)
 800267a:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <PN532_I2C_Init+0x44>)
 8002680:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <PN532_I2C_Init+0x48>)
 8002686:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <PN532_I2C_Init+0x4c>)
 800268c:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <PN532_I2C_Init+0x50>)
 8002692:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	4798      	blx	r3
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	0800249d 	.word	0x0800249d
 80026a8:	08002529 	.word	0x08002529
 80026ac:	080025e1 	.word	0x080025e1
 80026b0:	08002601 	.word	0x08002601
 80026b4:	0800264b 	.word	0x0800264b
 80026b8:	080024bb 	.word	0x080024bb

080026bc <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	460a      	mov	r2, r1
 80026c6:	71fb      	strb	r3, [r7, #7]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	79ba      	ldrb	r2, [r7, #6]
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	121b      	asrs	r3, r3, #8
 80026d6:	b2db      	uxtb	r3, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4604      	mov	r4, r0
 80026ec:	4608      	mov	r0, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	71fb      	strb	r3, [r7, #7]
 80026f6:	4603      	mov	r3, r0
 80026f8:	71bb      	strb	r3, [r7, #6]
 80026fa:	460b      	mov	r3, r1
 80026fc:	717b      	strb	r3, [r7, #5]
 80026fe:	4613      	mov	r3, r2
 8002700:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8002702:	79fa      	ldrb	r2, [r7, #7]
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	189c      	adds	r4, r3, r2
 800270a:	797b      	ldrb	r3, [r7, #5]
 800270c:	21b0      	movs	r1, #176	; 0xb0
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ffd4 	bl	80026bc <scale8>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <led_set_RGB+0x6c>)
 800271a:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 800271c:	79fa      	ldrb	r2, [r7, #7]
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	3301      	adds	r3, #1
 8002726:	490a      	ldr	r1, [pc, #40]	; (8002750 <led_set_RGB+0x6c>)
 8002728:	79ba      	ldrb	r2, [r7, #6]
 800272a:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 800272c:	79fa      	ldrb	r2, [r7, #7]
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	1c9c      	adds	r4, r3, #2
 8002736:	793b      	ldrb	r3, [r7, #4]
 8002738:	21f0      	movs	r1, #240	; 0xf0
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ffbe 	bl	80026bc <scale8>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	4b02      	ldr	r3, [pc, #8]	; (8002750 <led_set_RGB+0x6c>)
 8002746:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	200001dc 	.word	0x200001dc

08002754 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim2_ch1.State != HAL_DMA_STATE_READY) {
 800275a:	4b4d      	ldr	r3, [pc, #308]	; (8002890 <led_render+0x13c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d105      	bne.n	800276e <led_render+0x1a>
 8002762:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <led_render+0x140>)
 8002764:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d014      	beq.n	8002798 <led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	71fb      	strb	r3, [r7, #7]
 8002772:	e006      	b.n	8002782 <led_render+0x2e>
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	4a48      	ldr	r2, [pc, #288]	; (8002898 <led_render+0x144>)
 8002778:	2100      	movs	r1, #0
 800277a:	54d1      	strb	r1, [r2, r3]
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	3301      	adds	r3, #1
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	2b2f      	cmp	r3, #47	; 0x2f
 8002786:	d9f5      	bls.n	8002774 <led_render+0x20>
    wr_buf_p = 0;
 8002788:	4b41      	ldr	r3, [pc, #260]	; (8002890 <led_render+0x13c>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800278e:	2100      	movs	r1, #0
 8002790:	4842      	ldr	r0, [pc, #264]	; (800289c <led_render+0x148>)
 8002792:	f004 fe0f 	bl	80073b4 <HAL_TIM_PWM_Stop_DMA>
    return;
 8002796:	e078      	b.n	800288a <led_render+0x136>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8002798:	2300      	movs	r3, #0
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	e069      	b.n	8002872 <led_render+0x11e>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 800279e:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <led_render+0x14c>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	dd01      	ble.n	80027b6 <led_render+0x62>
 80027b2:	2138      	movs	r1, #56	; 0x38
 80027b4:	e000      	b.n	80027b8 <led_render+0x64>
 80027b6:	211c      	movs	r1, #28
 80027b8:	4a37      	ldr	r2, [pc, #220]	; (8002898 <led_render+0x144>)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	4413      	add	r3, r2
 80027be:	460a      	mov	r2, r1
 80027c0:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 80027c2:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <led_render+0x14c>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	461a      	mov	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	dd01      	ble.n	80027da <led_render+0x86>
 80027d6:	2138      	movs	r1, #56	; 0x38
 80027d8:	e000      	b.n	80027dc <led_render+0x88>
 80027da:	211c      	movs	r1, #28
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	3308      	adds	r3, #8
 80027e0:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <led_render+0x144>)
 80027e2:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 80027e4:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <led_render+0x14c>)
 80027e6:	789b      	ldrb	r3, [r3, #2]
 80027e8:	461a      	mov	r2, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	dd01      	ble.n	80027fc <led_render+0xa8>
 80027f8:	2138      	movs	r1, #56	; 0x38
 80027fa:	e000      	b.n	80027fe <led_render+0xaa>
 80027fc:	211c      	movs	r1, #28
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3310      	adds	r3, #16
 8002802:	4a25      	ldr	r2, [pc, #148]	; (8002898 <led_render+0x144>)
 8002804:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <led_render+0x14c>)
 8002808:	78db      	ldrb	r3, [r3, #3]
 800280a:	461a      	mov	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002816:	2b00      	cmp	r3, #0
 8002818:	dd01      	ble.n	800281e <led_render+0xca>
 800281a:	2138      	movs	r1, #56	; 0x38
 800281c:	e000      	b.n	8002820 <led_render+0xcc>
 800281e:	211c      	movs	r1, #28
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	3318      	adds	r3, #24
 8002824:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <led_render+0x144>)
 8002826:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <led_render+0x14c>)
 800282a:	791b      	ldrb	r3, [r3, #4]
 800282c:	461a      	mov	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002838:	2b00      	cmp	r3, #0
 800283a:	dd01      	ble.n	8002840 <led_render+0xec>
 800283c:	2138      	movs	r1, #56	; 0x38
 800283e:	e000      	b.n	8002842 <led_render+0xee>
 8002840:	211c      	movs	r1, #28
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	3320      	adds	r3, #32
 8002846:	4a14      	ldr	r2, [pc, #80]	; (8002898 <led_render+0x144>)
 8002848:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <led_render+0x14c>)
 800284c:	795b      	ldrb	r3, [r3, #5]
 800284e:	461a      	mov	r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b00      	cmp	r3, #0
 800285c:	dd01      	ble.n	8002862 <led_render+0x10e>
 800285e:	2138      	movs	r1, #56	; 0x38
 8002860:	e000      	b.n	8002864 <led_render+0x110>
 8002862:	211c      	movs	r1, #28
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	3328      	adds	r3, #40	; 0x28
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <led_render+0x144>)
 800286a:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b07      	cmp	r3, #7
 8002876:	d992      	bls.n	800279e <led_render+0x4a>
  }
#endif // End SK6812 WS2812B case differentiation

  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 8002878:	2330      	movs	r3, #48	; 0x30
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <led_render+0x144>)
 800287c:	2100      	movs	r1, #0
 800287e:	4807      	ldr	r0, [pc, #28]	; (800289c <led_render+0x148>)
 8002880:	f004 fb80 	bl	8006f84 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8002884:	4b02      	ldr	r3, [pc, #8]	; (8002890 <led_render+0x13c>)
 8002886:	2202      	movs	r2, #2
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000398 	.word	0x20000398
 8002894:	200005d8 	.word	0x200005d8
 8002898:	20000368 	.word	0x20000368
 800289c:	20001c4c 	.word	0x20001c4c
 80028a0:	200001dc 	.word	0x200001dc

080028a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80028ac:	4b39      	ldr	r3, [pc, #228]	; (8002994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b83      	cmp	r3, #131	; 0x83
 80028b2:	d853      	bhi.n	800295c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e047      	b.n	800294a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	4a34      	ldr	r2, [pc, #208]	; (8002998 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80028c6:	5cd3      	ldrb	r3, [r2, r3]
 80028c8:	461a      	mov	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	dd01      	ble.n	80028dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 80028d8:	2138      	movs	r1, #56	; 0x38
 80028da:	e000      	b.n	80028de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 80028dc:	211c      	movs	r1, #28
 80028de:	4a2f      	ldr	r2, [pc, #188]	; (800299c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	460a      	mov	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80028e8:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	3301      	adds	r3, #1
 80028f4:	4a28      	ldr	r2, [pc, #160]	; (8002998 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	dd01      	ble.n	800290c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8002908:	2138      	movs	r1, #56	; 0x38
 800290a:	e000      	b.n	800290e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 800290c:	211c      	movs	r1, #28
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3308      	adds	r3, #8
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002914:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002916:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	3302      	adds	r3, #2
 8002922:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	dd01      	ble.n	800293a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8002936:	2138      	movs	r1, #56	; 0x38
 8002938:	e000      	b.n	800293c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800293a:	211c      	movs	r1, #28
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3310      	adds	r3, #16
 8002940:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002942:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3301      	adds	r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b07      	cmp	r3, #7
 800294e:	d9b4      	bls.n	80028ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002958:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 800295a:	e015      	b.n	8002988 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 800295c:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b85      	cmp	r3, #133	; 0x85
 8002962:	d811      	bhi.n	8002988 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	72fb      	strb	r3, [r7, #11]
 8002968:	e006      	b.n	8002978 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>
 800296a:	7afb      	ldrb	r3, [r7, #11]
 800296c:	4a0b      	ldr	r2, [pc, #44]	; (800299c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800296e:	2100      	movs	r1, #0
 8002970:	54d1      	strb	r1, [r2, r3]
 8002972:	7afb      	ldrb	r3, [r7, #11]
 8002974:	3301      	adds	r3, #1
 8002976:	72fb      	strb	r3, [r7, #11]
 8002978:	7afb      	ldrb	r3, [r7, #11]
 800297a:	2b17      	cmp	r3, #23
 800297c:	d9f5      	bls.n	800296a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc6>
    wr_buf_p++;
 800297e:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3301      	adds	r3, #1
 8002984:	4a03      	ldr	r2, [pc, #12]	; (8002994 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	20000398 	.word	0x20000398
 8002998:	200001dc 	.word	0x200001dc
 800299c:	20000368 	.word	0x20000368

080029a0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 80029a8:	4b3c      	ldr	r3, [pc, #240]	; (8002a9c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b83      	cmp	r3, #131	; 0x83
 80029ae:	d852      	bhi.n	8002a56 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e046      	b.n	8002a44 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 80029b6:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	4a37      	ldr	r2, [pc, #220]	; (8002aa0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	dd01      	ble.n	80029d8 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 80029d4:	2138      	movs	r1, #56	; 0x38
 80029d6:	e000      	b.n	80029da <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 80029d8:	211c      	movs	r1, #28
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3318      	adds	r3, #24
 80029de:	4a31      	ldr	r2, [pc, #196]	; (8002aa4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80029e0:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80029e2:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	3301      	adds	r3, #1
 80029ee:	4a2c      	ldr	r2, [pc, #176]	; (8002aa0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	dd01      	ble.n	8002a06 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8002a02:	2138      	movs	r1, #56	; 0x38
 8002a04:	e000      	b.n	8002a08 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8002a06:	211c      	movs	r1, #28
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3320      	adds	r3, #32
 8002a0c:	4a25      	ldr	r2, [pc, #148]	; (8002aa4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002a0e:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	4a20      	ldr	r2, [pc, #128]	; (8002aa0 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002a1e:	5cd3      	ldrb	r3, [r2, r3]
 8002a20:	461a      	mov	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	dd01      	ble.n	8002a34 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8002a30:	2138      	movs	r1, #56	; 0x38
 8002a32:	e000      	b.n	8002a36 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8002a34:	211c      	movs	r1, #28
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3328      	adds	r3, #40	; 0x28
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002a3c:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	3301      	adds	r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b07      	cmp	r3, #7
 8002a48:	d9b5      	bls.n	80029b6 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002a52:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 8002a54:	e01d      	b.n	8002a92 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b85      	cmp	r3, #133	; 0x85
 8002a5c:	d812      	bhi.n	8002a84 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8002a5e:	2318      	movs	r3, #24
 8002a60:	72fb      	strb	r3, [r7, #11]
 8002a62:	e006      	b.n	8002a72 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8002a64:	7afb      	ldrb	r3, [r7, #11]
 8002a66:	4a0f      	ldr	r2, [pc, #60]	; (8002aa4 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002a68:	2100      	movs	r1, #0
 8002a6a:	54d1      	strb	r1, [r2, r3]
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	72fb      	strb	r3, [r7, #11]
 8002a72:	7afb      	ldrb	r3, [r7, #11]
 8002a74:	2b2f      	cmp	r3, #47	; 0x2f
 8002a76:	d9f5      	bls.n	8002a64 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002a80:	6013      	str	r3, [r2, #0]
}
 8002a82:	e006      	b.n	8002a92 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8002a8e:	f004 fc91 	bl	80073b4 <HAL_TIM_PWM_Stop_DMA>
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000398 	.word	0x20000398
 8002aa0:	200001dc 	.word	0x200001dc
 8002aa4:	20000368 	.word	0x20000368
 8002aa8:	20001c4c 	.word	0x20001c4c

08002aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_MspInit+0x44>)
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <HAL_MspInit+0x44>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6613      	str	r3, [r2, #96]	; 0x60
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_MspInit+0x44>)
 8002ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_MspInit+0x44>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_MspInit+0x44>)
 8002ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_MspInit+0x44>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_I2C_MspInit+0x7c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d127      	bne.n	8002b66 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_I2C_MspInit+0x80>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_I2C_MspInit+0x80>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_I2C_MspInit+0x80>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b2e:	23c0      	movs	r3, #192	; 0xc0
 8002b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b32:	2312      	movs	r3, #18
 8002b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4619      	mov	r1, r3
 8002b48:	480b      	ldr	r0, [pc, #44]	; (8002b78 <HAL_I2C_MspInit+0x84>)
 8002b4a:	f000 ff77 	bl	8003a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_I2C_MspInit+0x80>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <HAL_I2C_MspInit+0x80>)
 8002b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b58:	6593      	str	r3, [r2, #88]	; 0x58
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_I2C_MspInit+0x80>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b66:	bf00      	nop
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40005400 	.word	0x40005400
 8002b74:	40021000 	.word	0x40021000
 8002b78:	48000400 	.word	0x48000400

08002b7c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_RNG_MspInit+0x38>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10b      	bne.n	8002ba6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_RNG_MspInit+0x3c>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_RNG_MspInit+0x3c>)
 8002b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_RNG_MspInit+0x3c>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	50060800 	.word	0x50060800
 8002bb8:	40021000 	.word	0x40021000

08002bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <HAL_SPI_MspInit+0x7c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d128      	bne.n	8002c30 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <HAL_SPI_MspInit+0x80>)
 8002be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be2:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <HAL_SPI_MspInit+0x80>)
 8002be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002be8:	6613      	str	r3, [r2, #96]	; 0x60
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_SPI_MspInit+0x80>)
 8002bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_SPI_MspInit+0x80>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_SPI_MspInit+0x80>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_SPI_MspInit+0x80>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c0e:	23e0      	movs	r3, #224	; 0xe0
 8002c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c1e:	2305      	movs	r3, #5
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	4619      	mov	r1, r3
 8002c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2c:	f000 ff06 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c30:	bf00      	nop
 8002c32:	3728      	adds	r7, #40	; 0x28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40013000 	.word	0x40013000
 8002c3c:	40021000 	.word	0x40021000

08002c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d137      	bne.n	8002cc2 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c52:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_TIM_Base_MspInit+0xe0>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	4a32      	ldr	r2, [pc, #200]	; (8002d20 <HAL_TIM_Base_MspInit+0xe0>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_TIM_Base_MspInit+0xe0>)
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002c6a:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002c6c:	4a2e      	ldr	r2, [pc, #184]	; (8002d28 <HAL_TIM_Base_MspInit+0xe8>)
 8002c6e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8002c70:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002c72:	2204      	movs	r2, #4
 8002c74:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c76:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002c78:	2210      	movs	r2, #16
 8002c7a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c82:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c88:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002c98:	2220      	movs	r2, #32
 8002c9a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002ca4:	481f      	ldr	r0, [pc, #124]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002ca6:	f000 fc91 	bl	80035cc <HAL_DMA_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002cb0:	f7ff f8ec 	bl	8001e8c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_TIM_Base_MspInit+0xe4>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002cc0:	e02a      	b.n	8002d18 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM3)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <HAL_TIM_Base_MspInit+0xec>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d114      	bne.n	8002cf6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_TIM_Base_MspInit+0xe0>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <HAL_TIM_Base_MspInit+0xe0>)
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_TIM_Base_MspInit+0xe0>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	201d      	movs	r0, #29
 8002cea:	f000 fc2a 	bl	8003542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cee:	201d      	movs	r0, #29
 8002cf0:	f000 fc43 	bl	800357a <HAL_NVIC_EnableIRQ>
}
 8002cf4:	e010      	b.n	8002d18 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM5)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <HAL_TIM_Base_MspInit+0xf0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10b      	bne.n	8002d18 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_TIM_Base_MspInit+0xe0>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <HAL_TIM_Base_MspInit+0xe0>)
 8002d06:	f043 0308 	orr.w	r3, r3, #8
 8002d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <HAL_TIM_Base_MspInit+0xe0>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	200005d8 	.word	0x200005d8
 8002d28:	40020058 	.word	0x40020058
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40000c00 	.word	0x40000c00

08002d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d54:	d11d      	bne.n	8002d92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_TIM_MspPostInit+0xac>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <HAL_TIM_MspPostInit+0xac>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_TIM_MspPostInit+0xac>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4619      	mov	r1, r3
 8002d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d8c:	f000 fe56 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002d90:	e021      	b.n	8002dd6 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM5)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <HAL_TIM_MspPostInit+0xb0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d11c      	bne.n	8002dd6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9c:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <HAL_TIM_MspPostInit+0xac>)
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da0:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <HAL_TIM_MspPostInit+0xac>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_TIM_MspPostInit+0xac>)
 8002daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002db4:	2302      	movs	r3, #2
 8002db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd2:	f000 fe33 	bl	8003a3c <HAL_GPIO_Init>
}
 8002dd6:	bf00      	nop
 8002dd8:	3728      	adds	r7, #40	; 0x28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40000c00 	.word	0x40000c00

08002de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_UART_MspInit+0x80>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d129      	bne.n	8002e5e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <HAL_UART_MspInit+0x84>)
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0e:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <HAL_UART_MspInit+0x84>)
 8002e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e14:	6613      	str	r3, [r2, #96]	; 0x60
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_UART_MspInit+0x84>)
 8002e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_UART_MspInit+0x84>)
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <HAL_UART_MspInit+0x84>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <HAL_UART_MspInit+0x84>)
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5a:	f000 fdef 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e5e:	bf00      	nop
 8002e60:	3728      	adds	r7, #40	; 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40013800 	.word	0x40013800
 8002e6c:	40021000 	.word	0x40021000

08002e70 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;
int Count = 0;

void SDTimer_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <SDTimer_Handler+0x40>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <SDTimer_Handler+0x1c>
		Timer1--;
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <SDTimer_Handler+0x40>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <SDTimer_Handler+0x40>)
 8002e8a:	701a      	strb	r2, [r3, #0]

	if(Timer2>0)
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <SDTimer_Handler+0x44>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d006      	beq.n	8002ea4 <SDTimer_Handler+0x34>
		Timer2--;
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <SDTimer_Handler+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SDTimer_Handler+0x44>)
 8002ea2:	701a      	strb	r2, [r3, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20002ccd 	.word	0x20002ccd
 8002eb4:	20002ccc 	.word	0x20002ccc

08002eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <NMI_Handler+0x4>

08002ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec2:	e7fe      	b.n	8002ec2 <HardFault_Handler+0x4>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <MemManage_Handler+0x4>

08002eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <BusFault_Handler+0x4>

08002ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <UsageFault_Handler+0x4>

08002ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <SysTick_Handler+0x30>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <SysTick_Handler+0x30>)
 8002f10:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt>=10)
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <SysTick_Handler+0x30>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b09      	cmp	r3, #9
 8002f1a:	d904      	bls.n	8002f26 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <SysTick_Handler+0x30>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002f22:	f7ff ffa5 	bl	8002e70 <SDTimer_Handler>
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f26:	f000 f9cd 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2000039c 	.word	0x2000039c

08002f34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <DMA1_Channel5_IRQHandler+0x10>)
 8002f3a:	f000 fca0 	bl	800387e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200005d8 	.word	0x200005d8

08002f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(time == 0)
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <TIM3_IRQHandler+0xfc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <TIM3_IRQHandler+0x14>
		 HAL_TIM_Base_Stop_IT(&htim3);
 8002f56:	483c      	ldr	r0, [pc, #240]	; (8003048 <TIM3_IRQHandler+0x100>)
 8002f58:	f003 fde8 	bl	8006b2c <HAL_TIM_Base_Stop_IT>
	 time--;
 8002f5c:	4b39      	ldr	r3, [pc, #228]	; (8003044 <TIM3_IRQHandler+0xfc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	4a38      	ldr	r2, [pc, #224]	; (8003044 <TIM3_IRQHandler+0xfc>)
 8002f64:	6013      	str	r3, [r2, #0]
	 Max7219Display(time,5);
 8002f66:	4b37      	ldr	r3, [pc, #220]	; (8003044 <TIM3_IRQHandler+0xfc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2105      	movs	r1, #5
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe ff4b 	bl	8001e08 <Max7219Display>


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f72:	4835      	ldr	r0, [pc, #212]	; (8003048 <TIM3_IRQHandler+0x100>)
 8002f74:	f004 fb0e 	bl	8007594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  int hash_out = my_hash[hash_num];
 8002f78:	4b34      	ldr	r3, [pc, #208]	; (800304c <TIM3_IRQHandler+0x104>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a34      	ldr	r2, [pc, #208]	; (8003050 <TIM3_IRQHandler+0x108>)
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	607b      	str	r3, [r7, #4]
	if(state == 2){
 8002f84:	4b33      	ldr	r3, [pc, #204]	; (8003054 <TIM3_IRQHandler+0x10c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d157      	bne.n	800303c <TIM3_IRQHandler+0xf4>
		for(int i = 1; i <= 6; i ++){
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e036      	b.n	8003000 <TIM3_IRQHandler+0xb8>
			for(int j = 0; j < 22; j++){//change here
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	e02d      	b.n	8002ff4 <TIM3_IRQHandler+0xac>
				if(i == hash_out)
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d113      	bne.n	8002fc8 <TIM3_IRQHandler+0x80>
					led_set_RGB((i-1)*22+j,0,255,0);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	0092      	lsls	r2, r2, #2
 8002faa:	441a      	add	r2, r3
 8002fac:	0052      	lsls	r2, r2, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	b2d8      	uxtb	r0, r3
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	22ff      	movs	r2, #255	; 0xff
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	f7ff fb8f 	bl	80026e4 <led_set_RGB>
 8002fc6:	e012      	b.n	8002fee <TIM3_IRQHandler+0xa6>
				else
					led_set_RGB((i-1)*22+j,0,  0,0);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	441a      	add	r2, r3
 8002fd4:	0052      	lsls	r2, r2, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	b2d8      	uxtb	r0, r3
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	f7ff fb7b 	bl	80026e4 <led_set_RGB>
			for(int j = 0; j < 22; j++){//change here
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b15      	cmp	r3, #21
 8002ff8:	ddce      	ble.n	8002f98 <TIM3_IRQHandler+0x50>
		for(int i = 1; i <= 6; i ++){
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b06      	cmp	r3, #6
 8003004:	ddc5      	ble.n	8002f92 <TIM3_IRQHandler+0x4a>
			}
		}
		if(time % 5 == 0)
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <TIM3_IRQHandler+0xfc>)
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <TIM3_IRQHandler+0x110>)
 800300c:	fb83 2301 	smull	r2, r3, r3, r1
 8003010:	105a      	asrs	r2, r3, #1
 8003012:	17cb      	asrs	r3, r1, #31
 8003014:	1ad2      	subs	r2, r2, r3
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	1aca      	subs	r2, r1, r3
 800301e:	2a00      	cmp	r2, #0
 8003020:	d10a      	bne.n	8003038 <TIM3_IRQHandler+0xf0>
			hash_num = (hash_num >= 99) ? 0 : hash_num + 1;
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <TIM3_IRQHandler+0x104>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b62      	cmp	r3, #98	; 0x62
 8003028:	dc03      	bgt.n	8003032 <TIM3_IRQHandler+0xea>
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <TIM3_IRQHandler+0x104>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	e000      	b.n	8003034 <TIM3_IRQHandler+0xec>
 8003032:	2300      	movs	r3, #0
 8003034:	4a05      	ldr	r2, [pc, #20]	; (800304c <TIM3_IRQHandler+0x104>)
 8003036:	6013      	str	r3, [r2, #0]
		/*char temp[10];
		itoa(hash_out, temp, 10);
		send_uart("\r\nnum is:");
		send_uart(temp);*/
		led_render();
 8003038:	f7ff fb8c 	bl	8002754 <led_render>
	}



  /* USER CODE END TIM3_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20001bc8 	.word	0x20001bc8
 8003048:	200016f4 	.word	0x200016f4
 800304c:	200001d4 	.word	0x200001d4
 8003050:	20000004 	.word	0x20000004
 8003054:	200001d8 	.word	0x200001d8
 8003058:	66666667 	.word	0x66666667

0800305c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_TIM_Base_Stop_IT(&htim3);
 8003062:	4836      	ldr	r0, [pc, #216]	; (800313c <EXTI15_10_IRQHandler+0xe0>)
 8003064:	f003 fd62 	bl	8006b2c <HAL_TIM_Base_Stop_IT>
	int a = GPIOC->IDR, b = GPIOB->IDR;
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <EXTI15_10_IRQHandler+0xe4>)
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	4b35      	ldr	r3, [pc, #212]	; (8003144 <EXTI15_10_IRQHandler+0xe8>)
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	60fb      	str	r3, [r7, #12]
	int tmp = ((a >> 10) & 0B111) | ((b >> 10) & 0B111000);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	129b      	asrs	r3, r3, #10
 8003078:	f003 0207 	and.w	r2, r3, #7
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	129b      	asrs	r3, r3, #10
 8003080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003084:	4313      	orrs	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
	HAL_TIM_Base_Start_IT(&htim3);
 8003088:	482c      	ldr	r0, [pc, #176]	; (800313c <EXTI15_10_IRQHandler+0xe0>)
 800308a:	f003 fcdf 	bl	8006a4c <HAL_TIM_Base_Start_IT>
	int trigger = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
	tmp = ~tmp;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	43db      	mvns	r3, r3
 8003096:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < 6; i++){
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	e00d      	b.n	80030ba <EXTI15_10_IRQHandler+0x5e>
		if(tmp & (1<<i))
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa42 f303 	asr.w	r3, r2, r3
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <EXTI15_10_IRQHandler+0x58>
			trigger = i + 1;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 6; i++){
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	3301      	adds	r3, #1
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b05      	cmp	r3, #5
 80030be:	ddee      	ble.n	800309e <EXTI15_10_IRQHandler+0x42>
	itoa(trigger, temp, 10);
	send_uart("\r\nTRIGER IS is:");
	send_uart(temp);*/


  for(int i=0;i<1000000;i++);
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	e002      	b.n	80030cc <EXTI15_10_IRQHandler+0x70>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3301      	adds	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <EXTI15_10_IRQHandler+0xec>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	ddf8      	ble.n	80030c6 <EXTI15_10_IRQHandler+0x6a>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80030d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030d8:	f000 fe70 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80030dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80030e0:	f000 fe6c 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80030e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030e8:	f000 fe68 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80030ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030f0:	f000 fe64 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80030f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030f8:	f000 fe60 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80030fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003100:	f000 fe5c 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  int hash_out = my_hash[hash_num];
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <EXTI15_10_IRQHandler+0xf0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a11      	ldr	r2, [pc, #68]	; (8003150 <EXTI15_10_IRQHandler+0xf4>)
 800310a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310e:	607b      	str	r3, [r7, #4]
  if(trigger == hash_out){
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d10d      	bne.n	8003134 <EXTI15_10_IRQHandler+0xd8>
    score++;
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <EXTI15_10_IRQHandler+0xf8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <EXTI15_10_IRQHandler+0xf8>)
 8003120:	6013      	str	r3, [r2, #0]
    Max7219Display(score,0);
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <EXTI15_10_IRQHandler+0xf8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fe6d 	bl	8001e08 <Max7219Display>
    send_uart("get 1 point\r\n");
 800312e:	480a      	ldr	r0, [pc, #40]	; (8003158 <EXTI15_10_IRQHandler+0xfc>)
 8003130:	f7fd ff24 	bl	8000f7c <send_uart>
		led_render();
    }
    HAL_TIM_Base_Start_IT(&htim3);*/
  }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200016f4 	.word	0x200016f4
 8003140:	48000800 	.word	0x48000800
 8003144:	48000400 	.word	0x48000400
 8003148:	000f423f 	.word	0x000f423f
 800314c:	200001d4 	.word	0x200001d4
 8003150:	20000004 	.word	0x20000004
 8003154:	20001740 	.word	0x20001740
 8003158:	0800c87c 	.word	0x0800c87c

0800315c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003160:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <SystemInit+0x64>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <SystemInit+0x64>)
 8003168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800316c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <SystemInit+0x68>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <SystemInit+0x68>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <SystemInit+0x68>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <SystemInit+0x68>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a0f      	ldr	r2, [pc, #60]	; (80031c4 <SystemInit+0x68>)
 8003188:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800318c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003190:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <SystemInit+0x68>)
 8003194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003198:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <SystemInit+0x68>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <SystemInit+0x68>)
 80031a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <SystemInit+0x68>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <SystemInit+0x64>)
 80031ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031b2:	609a      	str	r2, [r3, #8]
#endif
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	e000ed00 	.word	0xe000ed00
 80031c4:	40021000 	.word	0x40021000

080031c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003200 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031cc:	f7ff ffc6 	bl	800315c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031d2:	e003      	b.n	80031dc <LoopCopyDataInit>

080031d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031da:	3104      	adds	r1, #4

080031dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031dc:	480a      	ldr	r0, [pc, #40]	; (8003208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <LoopForever+0xe>)
	adds	r2, r0, r1
 80031e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031e4:	d3f6      	bcc.n	80031d4 <CopyDataInit>
	ldr	r2, =_sbss
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031e8:	e002      	b.n	80031f0 <LoopFillZerobss>

080031ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031ec:	f842 3b04 	str.w	r3, [r2], #4

080031f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <LoopForever+0x16>)
	cmp	r2, r3
 80031f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031f4:	d3f9      	bcc.n	80031ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031f6:	f009 f947 	bl	800c488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031fa:	f7fd ff5b 	bl	80010b4 <main>

080031fe <LoopForever>:

LoopForever:
    b LoopForever
 80031fe:	e7fe      	b.n	80031fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003200:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003204:	0800cd9c 	.word	0x0800cd9c
	ldr	r0, =_sdata
 8003208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800320c:	200001b4 	.word	0x200001b4
	ldr	r2, =_sbss
 8003210:	200001b4 	.word	0x200001b4
	ldr	r3, = _ebss
 8003214:	20004d44 	.word	0x20004d44

08003218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003218:	e7fe      	b.n	8003218 <ADC1_2_IRQHandler>

0800321a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003224:	2003      	movs	r0, #3
 8003226:	f000 f981 	bl	800352c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800322a:	2000      	movs	r0, #0
 800322c:	f000 f80e 	bl	800324c <HAL_InitTick>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	71fb      	strb	r3, [r7, #7]
 800323a:	e001      	b.n	8003240 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800323c:	f7ff fc36 	bl	8002aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003240:	79fb      	ldrb	r3, [r7, #7]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_InitTick+0x6c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d023      	beq.n	80032a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_InitTick+0x70>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_InitTick+0x6c>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f99b 	bl	80035b2 <HAL_SYSTICK_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b0f      	cmp	r3, #15
 8003286:	d809      	bhi.n	800329c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003288:	2200      	movs	r2, #0
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f000 f957 	bl	8003542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <HAL_InitTick+0x74>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e007      	b.n	80032ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e004      	b.n	80032ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	e001      	b.n	80032ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	2000019c 	.word	0x2000019c
 80032bc:	20000194 	.word	0x20000194
 80032c0:	20000198 	.word	0x20000198

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	2000019c 	.word	0x2000019c
 80032e8:	20002cd0 	.word	0x20002cd0

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20002cd0 	.word	0x20002cd0

08003304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff ffee 	bl	80032ec <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d005      	beq.n	800332a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_Delay+0x40>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800332a:	bf00      	nop
 800332c:	f7ff ffde 	bl	80032ec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d8f7      	bhi.n	800332c <HAL_Delay+0x28>
  {
  }
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	2000019c 	.word	0x2000019c

08003348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003364:	4013      	ands	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337a:	4a04      	ldr	r2, [pc, #16]	; (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60d3      	str	r3, [r2, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db0b      	blt.n	80033d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	4907      	ldr	r1, [pc, #28]	; (80033e4 <__NVIC_EnableIRQ+0x38>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2001      	movs	r0, #1
 80033ce:	fa00 f202 	lsl.w	r2, r0, r2
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db10      	blt.n	800341c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4909      	ldr	r1, [pc, #36]	; (8003428 <__NVIC_DisableIRQ+0x40>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2001      	movs	r0, #1
 800340a:	fa00 f202 	lsl.w	r2, r0, r2
 800340e:	3320      	adds	r3, #32
 8003410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003418:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000e100 	.word	0xe000e100

0800342c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	2b00      	cmp	r3, #0
 800343e:	db0a      	blt.n	8003456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	490c      	ldr	r1, [pc, #48]	; (8003478 <__NVIC_SetPriority+0x4c>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	440b      	add	r3, r1
 8003450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003454:	e00a      	b.n	800346c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4908      	ldr	r1, [pc, #32]	; (800347c <__NVIC_SetPriority+0x50>)
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	3b04      	subs	r3, #4
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	440b      	add	r3, r1
 800346a:	761a      	strb	r2, [r3, #24]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000e100 	.word	0xe000e100
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f1c3 0307 	rsb	r3, r3, #7
 800349a:	2b04      	cmp	r3, #4
 800349c:	bf28      	it	cs
 800349e:	2304      	movcs	r3, #4
 80034a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d902      	bls.n	80034b0 <NVIC_EncodePriority+0x30>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3b03      	subs	r3, #3
 80034ae:	e000      	b.n	80034b2 <NVIC_EncodePriority+0x32>
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	401a      	ands	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c8:	f04f 31ff 	mov.w	r1, #4294967295
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	4313      	orrs	r3, r2
         );
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	; 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f8:	d301      	bcc.n	80034fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00f      	b.n	800351e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <SysTick_Config+0x40>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003506:	210f      	movs	r1, #15
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	f7ff ff8e 	bl	800342c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <SysTick_Config+0x40>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <SysTick_Config+0x40>)
 8003518:	2207      	movs	r2, #7
 800351a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000e010 	.word	0xe000e010

0800352c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff07 	bl	8003348 <__NVIC_SetPriorityGrouping>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003554:	f7ff ff1c 	bl	8003390 <__NVIC_GetPriorityGrouping>
 8003558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f7ff ff8e 	bl	8003480 <NVIC_EncodePriority>
 8003564:	4602      	mov	r2, r0
 8003566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff5d 	bl	800342c <__NVIC_SetPriority>
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff0f 	bl	80033ac <__NVIC_EnableIRQ>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff1f 	bl	80033e8 <__NVIC_DisableIRQ>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff ff94 	bl	80034e8 <SysTick_Config>
 80035c0:	4603      	mov	r3, r0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e098      	b.n	8003710 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b4d      	ldr	r3, [pc, #308]	; (800371c <HAL_DMA_Init+0x150>)
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d80f      	bhi.n	800360a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_DMA_Init+0x154>)
 80035f2:	4413      	add	r3, r2
 80035f4:	4a4b      	ldr	r2, [pc, #300]	; (8003724 <HAL_DMA_Init+0x158>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	009a      	lsls	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a48      	ldr	r2, [pc, #288]	; (8003728 <HAL_DMA_Init+0x15c>)
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
 8003608:	e00e      	b.n	8003628 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	4b46      	ldr	r3, [pc, #280]	; (800372c <HAL_DMA_Init+0x160>)
 8003612:	4413      	add	r3, r2
 8003614:	4a43      	ldr	r2, [pc, #268]	; (8003724 <HAL_DMA_Init+0x158>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	009a      	lsls	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a42      	ldr	r2, [pc, #264]	; (8003730 <HAL_DMA_Init+0x164>)
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800364c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003682:	d039      	beq.n	80036f8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	4a27      	ldr	r2, [pc, #156]	; (8003728 <HAL_DMA_Init+0x15c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d11a      	bne.n	80036c4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <HAL_DMA_Init+0x168>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f003 031c 	and.w	r3, r3, #28
 800369a:	210f      	movs	r1, #15
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	4924      	ldr	r1, [pc, #144]	; (8003734 <HAL_DMA_Init+0x168>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036a8:	4b22      	ldr	r3, [pc, #136]	; (8003734 <HAL_DMA_Init+0x168>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	f003 031c 	and.w	r3, r3, #28
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	491d      	ldr	r1, [pc, #116]	; (8003734 <HAL_DMA_Init+0x168>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
 80036c2:	e019      	b.n	80036f8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036c4:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <HAL_DMA_Init+0x16c>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f003 031c 	and.w	r3, r3, #28
 80036d0:	210f      	movs	r1, #15
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	4917      	ldr	r1, [pc, #92]	; (8003738 <HAL_DMA_Init+0x16c>)
 80036da:	4013      	ands	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036de:	4b16      	ldr	r3, [pc, #88]	; (8003738 <HAL_DMA_Init+0x16c>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f003 031c 	and.w	r3, r3, #28
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	4911      	ldr	r1, [pc, #68]	; (8003738 <HAL_DMA_Init+0x16c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40020407 	.word	0x40020407
 8003720:	bffdfff8 	.word	0xbffdfff8
 8003724:	cccccccd 	.word	0xcccccccd
 8003728:	40020000 	.word	0x40020000
 800372c:	bffdfbf8 	.word	0xbffdfbf8
 8003730:	40020400 	.word	0x40020400
 8003734:	400200a8 	.word	0x400200a8
 8003738:	400204a8 	.word	0x400204a8

0800373c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_DMA_Start_IT+0x20>
 8003758:	2302      	movs	r3, #2
 800375a:	e04b      	b.n	80037f4 <HAL_DMA_Start_IT+0xb8>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d13a      	bne.n	80037e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f921 	bl	80039dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 020e 	orr.w	r2, r2, #14
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e00f      	b.n	80037d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0204 	bic.w	r2, r2, #4
 80037c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 020a 	orr.w	r2, r2, #10
 80037d2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e005      	b.n	80037f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
 80037f0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d005      	beq.n	8003820 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2204      	movs	r2, #4
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e029      	b.n	8003874 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 020e 	bic.w	r2, r2, #14
 800382e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	f003 021c 	and.w	r2, r3, #28
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f202 	lsl.w	r2, r1, r2
 8003852:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
    }
  }
  return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f003 031c 	and.w	r3, r3, #28
 800389e:	2204      	movs	r2, #4
 80038a0:	409a      	lsls	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d026      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x7a>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d021      	beq.n	80038f8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d107      	bne.n	80038d2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0204 	bic.w	r2, r2, #4
 80038d0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f003 021c 	and.w	r2, r3, #28
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2104      	movs	r1, #4
 80038e0:	fa01 f202 	lsl.w	r2, r1, r2
 80038e4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d071      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038f6:	e06c      	b.n	80039d2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	f003 031c 	and.w	r3, r3, #28
 8003900:	2202      	movs	r2, #2
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02e      	beq.n	800396a <HAL_DMA_IRQHandler+0xec>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d029      	beq.n	800396a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10b      	bne.n	800393c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 020a 	bic.w	r2, r2, #10
 8003932:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	f003 021c 	and.w	r2, r3, #28
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	2102      	movs	r1, #2
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d038      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003968:	e033      	b.n	80039d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f003 031c 	and.w	r3, r3, #28
 8003972:	2208      	movs	r2, #8
 8003974:	409a      	lsls	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d02a      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x156>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d025      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 020e 	bic.w	r2, r2, #14
 8003996:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f003 021c 	and.w	r2, r3, #28
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	2101      	movs	r1, #1
 80039a6:	fa01 f202 	lsl.w	r2, r1, r2
 80039aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
}
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f003 021c 	and.w	r2, r3, #28
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d108      	bne.n	8003a20 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a1e:	e007      	b.n	8003a30 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4a:	e17f      	b.n	8003d4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2101      	movs	r1, #1
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8171 	beq.w	8003d46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d00b      	beq.n	8003a84 <HAL_GPIO_Init+0x48>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d007      	beq.n	8003a84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a78:	2b11      	cmp	r3, #17
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b12      	cmp	r3, #18
 8003a82:	d130      	bne.n	8003ae6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aba:	2201      	movs	r2, #1
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 0201 	and.w	r2, r3, #1
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d118      	bne.n	8003b24 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003af8:	2201      	movs	r2, #1
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	08db      	lsrs	r3, r3, #3
 8003b0e:	f003 0201 	and.w	r2, r3, #1
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x128>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b12      	cmp	r3, #18
 8003b62:	d123      	bne.n	8003bac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	08da      	lsrs	r2, r3, #3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3208      	adds	r2, #8
 8003b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	220f      	movs	r2, #15
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	08da      	lsrs	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3208      	adds	r2, #8
 8003ba6:	6939      	ldr	r1, [r7, #16]
 8003ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0203 	and.w	r2, r3, #3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80ac 	beq.w	8003d46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bee:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <HAL_GPIO_Init+0x32c>)
 8003bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf2:	4a5d      	ldr	r2, [pc, #372]	; (8003d68 <HAL_GPIO_Init+0x32c>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8003bfa:	4b5b      	ldr	r3, [pc, #364]	; (8003d68 <HAL_GPIO_Init+0x32c>)
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c06:	4a59      	ldr	r2, [pc, #356]	; (8003d6c <HAL_GPIO_Init+0x330>)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	220f      	movs	r2, #15
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c30:	d025      	beq.n	8003c7e <HAL_GPIO_Init+0x242>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4e      	ldr	r2, [pc, #312]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01f      	beq.n	8003c7a <HAL_GPIO_Init+0x23e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4d      	ldr	r2, [pc, #308]	; (8003d74 <HAL_GPIO_Init+0x338>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d019      	beq.n	8003c76 <HAL_GPIO_Init+0x23a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_GPIO_Init+0x33c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_GPIO_Init+0x236>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <HAL_GPIO_Init+0x340>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00d      	beq.n	8003c6e <HAL_GPIO_Init+0x232>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a4a      	ldr	r2, [pc, #296]	; (8003d80 <HAL_GPIO_Init+0x344>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <HAL_GPIO_Init+0x22e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a49      	ldr	r2, [pc, #292]	; (8003d84 <HAL_GPIO_Init+0x348>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_GPIO_Init+0x22a>
 8003c62:	2306      	movs	r3, #6
 8003c64:	e00c      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c66:	2307      	movs	r3, #7
 8003c68:	e00a      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c6a:	2305      	movs	r3, #5
 8003c6c:	e008      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c6e:	2304      	movs	r3, #4
 8003c70:	e006      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c72:	2303      	movs	r3, #3
 8003c74:	e004      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e002      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	f002 0203 	and.w	r2, r2, #3
 8003c86:	0092      	lsls	r2, r2, #2
 8003c88:	4093      	lsls	r3, r2
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c90:	4936      	ldr	r1, [pc, #216]	; (8003d6c <HAL_GPIO_Init+0x330>)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	089b      	lsrs	r3, r3, #2
 8003c96:	3302      	adds	r3, #2
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c9e:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4013      	ands	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cc2:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003cc8:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cec:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cf2:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d1c:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d40:	4a11      	ldr	r2, [pc, #68]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa22 f303 	lsr.w	r3, r2, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f47f ae78 	bne.w	8003a4c <HAL_GPIO_Init+0x10>
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	48000400 	.word	0x48000400
 8003d74:	48000800 	.word	0x48000800
 8003d78:	48000c00 	.word	0x48000c00
 8003d7c:	48001000 	.word	0x48001000
 8003d80:	48001400 	.word	0x48001400
 8003d84:	48001800 	.word	0x48001800
 8003d88:	40010400 	.word	0x40010400

08003d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d9c:	787b      	ldrb	r3, [r7, #1]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003da8:	e002      	b.n	8003db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d006      	beq.n	8003de0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dd2:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f806 	bl	8003dec <HAL_GPIO_EXTI_Callback>
  }
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40010400 	.word	0x40010400

08003dec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e081      	b.n	8003f18 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fe fe63 	bl	8002af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2224      	movs	r2, #36	; 0x24
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d107      	bne.n	8003e7c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	e006      	b.n	8003e8a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d104      	bne.n	8003e9c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	ea42 0103 	orr.w	r1, r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	021a      	lsls	r2, r3, #8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69d9      	ldr	r1, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	817b      	strh	r3, [r7, #10]
 8003f30:	4613      	mov	r3, r2
 8003f32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	f040 80da 	bne.w	80040f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2C_Master_Transmit+0x30>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e0d3      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f58:	f7ff f9c8 	bl	80032ec <HAL_GetTick>
 8003f5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	2319      	movs	r3, #25
 8003f64:	2201      	movs	r2, #1
 8003f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f9e6 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e0be      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2221      	movs	r2, #33	; 0x21
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2210      	movs	r2, #16
 8003f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	893a      	ldrh	r2, [r7, #8]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2bff      	cmp	r3, #255	; 0xff
 8003faa:	d90e      	bls.n	8003fca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	8979      	ldrh	r1, [r7, #10]
 8003fba:	4b51      	ldr	r3, [pc, #324]	; (8004100 <HAL_I2C_Master_Transmit+0x1e0>)
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fb48 	bl	8004658 <I2C_TransferConfig>
 8003fc8:	e06c      	b.n	80040a4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	8979      	ldrh	r1, [r7, #10]
 8003fdc:	4b48      	ldr	r3, [pc, #288]	; (8004100 <HAL_I2C_Master_Transmit+0x1e0>)
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fb37 	bl	8004658 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003fea:	e05b      	b.n	80040a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	6a39      	ldr	r1, [r7, #32]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f9e3 	bl	80043bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e07b      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	781a      	ldrb	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d034      	beq.n	80040a4 <HAL_I2C_Master_Transmit+0x184>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	2b00      	cmp	r3, #0
 8004040:	d130      	bne.n	80040a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f975 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e04d      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2bff      	cmp	r3, #255	; 0xff
 8004064:	d90e      	bls.n	8004084 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004070:	b2da      	uxtb	r2, r3
 8004072:	8979      	ldrh	r1, [r7, #10]
 8004074:	2300      	movs	r3, #0
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 faeb 	bl	8004658 <I2C_TransferConfig>
 8004082:	e00f      	b.n	80040a4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	b2da      	uxtb	r2, r3
 8004094:	8979      	ldrh	r1, [r7, #10]
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fada 	bl	8004658 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d19e      	bne.n	8003fec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f9c2 	bl	800443c <I2C_WaitOnSTOPFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e01a      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2220      	movs	r2, #32
 80040c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_I2C_Master_Transmit+0x1e4>)
 80040d6:	400b      	ands	r3, r1
 80040d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
  }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	80002000 	.word	0x80002000
 8004104:	fe00e800 	.word	0xfe00e800

08004108 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	460b      	mov	r3, r1
 8004116:	817b      	strh	r3, [r7, #10]
 8004118:	4613      	mov	r3, r2
 800411a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b20      	cmp	r3, #32
 8004126:	f040 80db 	bne.w	80042e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_I2C_Master_Receive+0x30>
 8004134:	2302      	movs	r3, #2
 8004136:	e0d4      	b.n	80042e2 <HAL_I2C_Master_Receive+0x1da>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004140:	f7ff f8d4 	bl	80032ec <HAL_GetTick>
 8004144:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2319      	movs	r3, #25
 800414c:	2201      	movs	r2, #1
 800414e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f8f2 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e0bf      	b.n	80042e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2222      	movs	r2, #34	; 0x22
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2210      	movs	r2, #16
 800416e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	893a      	ldrh	r2, [r7, #8]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2bff      	cmp	r3, #255	; 0xff
 8004192:	d90e      	bls.n	80041b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	22ff      	movs	r2, #255	; 0xff
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	8979      	ldrh	r1, [r7, #10]
 80041a2:	4b52      	ldr	r3, [pc, #328]	; (80042ec <HAL_I2C_Master_Receive+0x1e4>)
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fa54 	bl	8004658 <I2C_TransferConfig>
 80041b0:	e06d      	b.n	800428e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	8979      	ldrh	r1, [r7, #10]
 80041c4:	4b49      	ldr	r3, [pc, #292]	; (80042ec <HAL_I2C_Master_Receive+0x1e4>)
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fa43 	bl	8004658 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80041d2:	e05c      	b.n	800428e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	6a39      	ldr	r1, [r7, #32]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f96b 	bl	80044b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e07c      	b.n	80042e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d034      	beq.n	800428e <HAL_I2C_Master_Receive+0x186>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004228:	2b00      	cmp	r3, #0
 800422a:	d130      	bne.n	800428e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	2200      	movs	r2, #0
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f880 	bl	800433c <I2C_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e04d      	b.n	80042e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	2bff      	cmp	r3, #255	; 0xff
 800424e:	d90e      	bls.n	800426e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	22ff      	movs	r2, #255	; 0xff
 8004254:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425a:	b2da      	uxtb	r2, r3
 800425c:	8979      	ldrh	r1, [r7, #10]
 800425e:	2300      	movs	r3, #0
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f9f6 	bl	8004658 <I2C_TransferConfig>
 800426c:	e00f      	b.n	800428e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	b2da      	uxtb	r2, r3
 800427e:	8979      	ldrh	r1, [r7, #10]
 8004280:	2300      	movs	r3, #0
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f9e5 	bl	8004658 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d19d      	bne.n	80041d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	6a39      	ldr	r1, [r7, #32]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f8cd 	bl	800443c <I2C_WaitOnSTOPFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e01a      	b.n	80042e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2220      	movs	r2, #32
 80042b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6859      	ldr	r1, [r3, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <HAL_I2C_Master_Receive+0x1e8>)
 80042c0:	400b      	ands	r3, r1
 80042c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	80002400 	.word	0x80002400
 80042f0:	fe00e800 	.word	0xfe00e800

080042f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d103      	bne.n	8004312 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d007      	beq.n	8004330 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	619a      	str	r2, [r3, #24]
  }
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800434c:	e022      	b.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d01e      	beq.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004356:	f7fe ffc9 	bl	80032ec <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d113      	bne.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e00f      	b.n	80043b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d0cd      	beq.n	800434e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043c8:	e02c      	b.n	8004424 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f8dc 	bl	800458c <I2C_IsAcknowledgeFailed>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e02a      	b.n	8004434 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d01e      	beq.n	8004424 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e6:	f7fe ff81 	bl	80032ec <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d113      	bne.n	8004424 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e007      	b.n	8004434 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d1cb      	bne.n	80043ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004448:	e028      	b.n	800449c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f89c 	bl	800458c <I2C_IsAcknowledgeFailed>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e026      	b.n	80044ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fe ff45 	bl	80032ec <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d113      	bne.n	800449c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e007      	b.n	80044ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d1cf      	bne.n	800444a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044c0:	e055      	b.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f860 	bl	800458c <I2C_IsAcknowledgeFailed>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e053      	b.n	800457e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d129      	bne.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d105      	bne.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e03f      	b.n	800457e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2220      	movs	r2, #32
 8004504:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004512:	400b      	ands	r3, r1
 8004514:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e022      	b.n	800457e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004538:	f7fe fed8 	bl	80032ec <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	d302      	bcc.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10f      	bne.n	800456e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e007      	b.n	800457e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b04      	cmp	r3, #4
 800457a:	d1a2      	bne.n	80044c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	fe00e800 	.word	0xfe00e800

0800458c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d151      	bne.n	800464a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045a6:	e022      	b.n	80045ee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d01e      	beq.n	80045ee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b0:	f7fe fe9c 	bl	80032ec <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d302      	bcc.n	80045c6 <I2C_IsAcknowledgeFailed+0x3a>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d113      	bne.n	80045ee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e02e      	b.n	800464c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d1d5      	bne.n	80045a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2210      	movs	r2, #16
 8004602:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2220      	movs	r2, #32
 800460a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7ff fe71 	bl	80042f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <I2C_IsAcknowledgeFailed+0xc8>)
 800461e:	400b      	ands	r3, r1
 8004620:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	f043 0204 	orr.w	r2, r3, #4
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	fe00e800 	.word	0xfe00e800

08004658 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	817b      	strh	r3, [r7, #10]
 8004666:	4613      	mov	r3, r2
 8004668:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	0d5b      	lsrs	r3, r3, #21
 8004674:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004678:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <I2C_TransferConfig+0x58>)
 800467a:	430b      	orrs	r3, r1
 800467c:	43db      	mvns	r3, r3
 800467e:	ea02 0103 	and.w	r1, r2, r3
 8004682:	897b      	ldrh	r3, [r7, #10]
 8004684:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004688:	7a7b      	ldrb	r3, [r7, #9]
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	431a      	orrs	r2, r3
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	431a      	orrs	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	03ff63ff 	.word	0x03ff63ff

080046b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d138      	bne.n	800473c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e032      	b.n	800473e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2224      	movs	r2, #36	; 0x24
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004706:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6819      	ldr	r1, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b20      	cmp	r3, #32
 800475e:	d139      	bne.n	80047d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800476a:	2302      	movs	r3, #2
 800476c:	e033      	b.n	80047d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2224      	movs	r2, #36	; 0x24
 800477a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800479c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e000      	b.n	80047d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047d4:	2302      	movs	r3, #2
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047e8:	4b04      	ldr	r3, [pc, #16]	; (80047fc <HAL_PWREx_GetVoltageRange+0x18>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40007000 	.word	0x40007000

08004800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800480e:	d130      	bne.n	8004872 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004810:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800481c:	d038      	beq.n	8004890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800481e:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004826:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800482c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800482e:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2232      	movs	r2, #50	; 0x32
 8004834:	fb02 f303 	mul.w	r3, r2, r3
 8004838:	4a1b      	ldr	r2, [pc, #108]	; (80048a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	0c9b      	lsrs	r3, r3, #18
 8004840:	3301      	adds	r3, #1
 8004842:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004844:	e002      	b.n	800484c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3b01      	subs	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004858:	d102      	bne.n	8004860 <HAL_PWREx_ControlVoltageScaling+0x60>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f2      	bne.n	8004846 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486c:	d110      	bne.n	8004890 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e00f      	b.n	8004892 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	d007      	beq.n	8004890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004888:	4a05      	ldr	r2, [pc, #20]	; (80048a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800488a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800488e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40007000 	.word	0x40007000
 80048a4:	20000194 	.word	0x20000194
 80048a8:	431bde83 	.word	0x431bde83

080048ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e3d4      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048be:	4ba1      	ldr	r3, [pc, #644]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048c8:	4b9e      	ldr	r3, [pc, #632]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80e4 	beq.w	8004aa8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <HAL_RCC_OscConfig+0x4a>
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	f040 808b 	bne.w	8004a04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	f040 8087 	bne.w	8004a04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048f6:	4b93      	ldr	r3, [pc, #588]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_RCC_OscConfig+0x62>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e3ac      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1a      	ldr	r2, [r3, #32]
 8004912:	4b8c      	ldr	r3, [pc, #560]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <HAL_RCC_OscConfig+0x7c>
 800491e:	4b89      	ldr	r3, [pc, #548]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004926:	e005      	b.n	8004934 <HAL_RCC_OscConfig+0x88>
 8004928:	4b86      	ldr	r3, [pc, #536]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 800492a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800492e:	091b      	lsrs	r3, r3, #4
 8004930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004934:	4293      	cmp	r3, r2
 8004936:	d223      	bcs.n	8004980 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fd3f 	bl	80053c0 <RCC_SetFlashLatencyFromMSIRange>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e38d      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800494c:	4b7d      	ldr	r3, [pc, #500]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a7c      	ldr	r2, [pc, #496]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004952:	f043 0308 	orr.w	r3, r3, #8
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b7a      	ldr	r3, [pc, #488]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	4977      	ldr	r1, [pc, #476]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800496a:	4b76      	ldr	r3, [pc, #472]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	4972      	ldr	r1, [pc, #456]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 800497a:	4313      	orrs	r3, r2
 800497c:	604b      	str	r3, [r1, #4]
 800497e:	e025      	b.n	80049cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004980:	4b70      	ldr	r3, [pc, #448]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a6f      	ldr	r2, [pc, #444]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004986:	f043 0308 	orr.w	r3, r3, #8
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	4b6d      	ldr	r3, [pc, #436]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	496a      	ldr	r1, [pc, #424]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800499e:	4b69      	ldr	r3, [pc, #420]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	4965      	ldr	r1, [pc, #404]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fcff 	bl	80053c0 <RCC_SetFlashLatencyFromMSIRange>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e34d      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049cc:	f000 fc36 	bl	800523c <HAL_RCC_GetSysClockFreq>
 80049d0:	4601      	mov	r1, r0
 80049d2:	4b5c      	ldr	r3, [pc, #368]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	4a5a      	ldr	r2, [pc, #360]	; (8004b48 <HAL_RCC_OscConfig+0x29c>)
 80049de:	5cd3      	ldrb	r3, [r2, r3]
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	fa21 f303 	lsr.w	r3, r1, r3
 80049e8:	4a58      	ldr	r2, [pc, #352]	; (8004b4c <HAL_RCC_OscConfig+0x2a0>)
 80049ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049ec:	4b58      	ldr	r3, [pc, #352]	; (8004b50 <HAL_RCC_OscConfig+0x2a4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fc2b 	bl	800324c <HAL_InitTick>
 80049f6:	4603      	mov	r3, r0
 80049f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d052      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	e331      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d032      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a0c:	4b4d      	ldr	r3, [pc, #308]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a4c      	ldr	r2, [pc, #304]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a18:	f7fe fc68 	bl	80032ec <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a20:	f7fe fc64 	bl	80032ec <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e31a      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a32:	4b44      	ldr	r3, [pc, #272]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a3e:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a40      	ldr	r2, [pc, #256]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a44:	f043 0308 	orr.w	r3, r3, #8
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	493b      	ldr	r1, [pc, #236]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a5c:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	4936      	ldr	r1, [pc, #216]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	604b      	str	r3, [r1, #4]
 8004a70:	e01a      	b.n	8004aa8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a72:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a33      	ldr	r2, [pc, #204]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a7e:	f7fe fc35 	bl	80032ec <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a86:	f7fe fc31 	bl	80032ec <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e2e7      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a98:	4b2a      	ldr	r3, [pc, #168]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f0      	bne.n	8004a86 <HAL_RCC_OscConfig+0x1da>
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aa6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d074      	beq.n	8004b9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d005      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x21a>
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d10e      	bne.n	8004ade <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d10b      	bne.n	8004ade <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac6:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d064      	beq.n	8004b9c <HAL_RCC_OscConfig+0x2f0>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d160      	bne.n	8004b9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e2c4      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCC_OscConfig+0x24a>
 8004ae8:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	e01d      	b.n	8004b32 <HAL_RCC_OscConfig+0x286>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004afe:	d10c      	bne.n	8004b1a <HAL_RCC_OscConfig+0x26e>
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a0f      	ldr	r2, [pc, #60]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a0c      	ldr	r2, [pc, #48]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e00b      	b.n	8004b32 <HAL_RCC_OscConfig+0x286>
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a06      	ldr	r2, [pc, #24]	; (8004b44 <HAL_RCC_OscConfig+0x298>)
 8004b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01c      	beq.n	8004b74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3a:	f7fe fbd7 	bl	80032ec <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b40:	e011      	b.n	8004b66 <HAL_RCC_OscConfig+0x2ba>
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	0800c8dc 	.word	0x0800c8dc
 8004b4c:	20000194 	.word	0x20000194
 8004b50:	20000198 	.word	0x20000198
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b54:	f7fe fbca 	bl	80032ec <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	; 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e280      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b66:	4baf      	ldr	r3, [pc, #700]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x2a8>
 8004b72:	e014      	b.n	8004b9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7fe fbba 	bl	80032ec <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fe fbb6 	bl	80032ec <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	; 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e26c      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b8e:	4ba5      	ldr	r3, [pc, #660]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f0      	bne.n	8004b7c <HAL_RCC_OscConfig+0x2d0>
 8004b9a:	e000      	b.n	8004b9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d060      	beq.n	8004c6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_OscConfig+0x310>
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d119      	bne.n	8004bea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d116      	bne.n	8004bea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bbc:	4b99      	ldr	r3, [pc, #612]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x328>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e249      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd4:	4b93      	ldr	r3, [pc, #588]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	061b      	lsls	r3, r3, #24
 8004be2:	4990      	ldr	r1, [pc, #576]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be8:	e040      	b.n	8004c6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d023      	beq.n	8004c3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf2:	4b8c      	ldr	r3, [pc, #560]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a8b      	ldr	r2, [pc, #556]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfe:	f7fe fb75 	bl	80032ec <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c06:	f7fe fb71 	bl	80032ec <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e227      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c18:	4b82      	ldr	r3, [pc, #520]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c24:	4b7f      	ldr	r3, [pc, #508]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	061b      	lsls	r3, r3, #24
 8004c32:	497c      	ldr	r1, [pc, #496]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	604b      	str	r3, [r1, #4]
 8004c38:	e018      	b.n	8004c6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c3a:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a79      	ldr	r2, [pc, #484]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fe fb51 	bl	80032ec <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4e:	f7fe fb4d 	bl	80032ec <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e203      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c60:	4b70      	ldr	r3, [pc, #448]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d03c      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01c      	beq.n	8004cba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c80:	4b68      	ldr	r3, [pc, #416]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c86:	4a67      	ldr	r2, [pc, #412]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c90:	f7fe fb2c 	bl	80032ec <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c98:	f7fe fb28 	bl	80032ec <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e1de      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004caa:	4b5e      	ldr	r3, [pc, #376]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ef      	beq.n	8004c98 <HAL_RCC_OscConfig+0x3ec>
 8004cb8:	e01b      	b.n	8004cf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cba:	4b5a      	ldr	r3, [pc, #360]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc0:	4a58      	ldr	r2, [pc, #352]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cca:	f7fe fb0f 	bl	80032ec <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd2:	f7fe fb0b 	bl	80032ec <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e1c1      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ce4:	4b4f      	ldr	r3, [pc, #316]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ef      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 80a6 	beq.w	8004e4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d00:	2300      	movs	r3, #0
 8004d02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d04:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10d      	bne.n	8004d2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d10:	4b44      	ldr	r3, [pc, #272]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	4a43      	ldr	r2, [pc, #268]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d1c:	4b41      	ldr	r3, [pc, #260]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d2c:	4b3e      	ldr	r3, [pc, #248]	; (8004e28 <HAL_RCC_OscConfig+0x57c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d118      	bne.n	8004d6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d38:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <HAL_RCC_OscConfig+0x57c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a3a      	ldr	r2, [pc, #232]	; (8004e28 <HAL_RCC_OscConfig+0x57c>)
 8004d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d44:	f7fe fad2 	bl	80032ec <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4c:	f7fe face 	bl	80032ec <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e184      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d5e:	4b32      	ldr	r3, [pc, #200]	; (8004e28 <HAL_RCC_OscConfig+0x57c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d108      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4d8>
 8004d72:	4b2c      	ldr	r3, [pc, #176]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	4a2a      	ldr	r2, [pc, #168]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d82:	e024      	b.n	8004dce <HAL_RCC_OscConfig+0x522>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b05      	cmp	r3, #5
 8004d8a:	d110      	bne.n	8004dae <HAL_RCC_OscConfig+0x502>
 8004d8c:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	4a24      	ldr	r2, [pc, #144]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004d94:	f043 0304 	orr.w	r3, r3, #4
 8004d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d9c:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	4a20      	ldr	r2, [pc, #128]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dac:	e00f      	b.n	8004dce <HAL_RCC_OscConfig+0x522>
 8004dae:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004dc6:	f023 0304 	bic.w	r3, r3, #4
 8004dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fe fa89 	bl	80032ec <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fe fa85 	bl	80032ec <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e139      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_OscConfig+0x578>)
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0ed      	beq.n	8004dde <HAL_RCC_OscConfig+0x532>
 8004e02:	e01a      	b.n	8004e3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e04:	f7fe fa72 	bl	80032ec <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e0a:	e00f      	b.n	8004e2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0c:	f7fe fa6e 	bl	80032ec <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d906      	bls.n	8004e2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e122      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
 8004e28:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e2c:	4b90      	ldr	r3, [pc, #576]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e8      	bne.n	8004e0c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e3a:	7ffb      	ldrb	r3, [r7, #31]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e40:	4b8b      	ldr	r3, [pc, #556]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e44:	4a8a      	ldr	r2, [pc, #552]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8108 	beq.w	8005066 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	f040 80d0 	bne.w	8005000 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e60:	4b83      	ldr	r3, [pc, #524]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0203 	and.w	r2, r3, #3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d130      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d127      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d11f      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ea0:	2a07      	cmp	r2, #7
 8004ea2:	bf14      	ite	ne
 8004ea4:	2201      	movne	r2, #1
 8004ea6:	2200      	moveq	r2, #0
 8004ea8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d113      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d109      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d06e      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	d069      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004edc:	4b64      	ldr	r3, [pc, #400]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ee8:	4b61      	ldr	r3, [pc, #388]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0b7      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ef8:	4b5d      	ldr	r3, [pc, #372]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5c      	ldr	r2, [pc, #368]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f04:	f7fe f9f2 	bl	80032ec <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fe f9ee 	bl	80032ec <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e0a4      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1e:	4b54      	ldr	r3, [pc, #336]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f2a:	4b51      	ldr	r3, [pc, #324]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	4b51      	ldr	r3, [pc, #324]	; (8005074 <HAL_RCC_OscConfig+0x7c8>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f3a:	3a01      	subs	r2, #1
 8004f3c:	0112      	lsls	r2, r2, #4
 8004f3e:	4311      	orrs	r1, r2
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f44:	0212      	lsls	r2, r2, #8
 8004f46:	4311      	orrs	r1, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f4c:	0852      	lsrs	r2, r2, #1
 8004f4e:	3a01      	subs	r2, #1
 8004f50:	0552      	lsls	r2, r2, #21
 8004f52:	4311      	orrs	r1, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f58:	0852      	lsrs	r2, r2, #1
 8004f5a:	3a01      	subs	r2, #1
 8004f5c:	0652      	lsls	r2, r2, #25
 8004f5e:	4311      	orrs	r1, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f64:	0912      	lsrs	r2, r2, #4
 8004f66:	0452      	lsls	r2, r2, #17
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	4941      	ldr	r1, [pc, #260]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f70:	4b3f      	ldr	r3, [pc, #252]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a3e      	ldr	r2, [pc, #248]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f7c:	4b3c      	ldr	r3, [pc, #240]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a3b      	ldr	r2, [pc, #236]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f88:	f7fe f9b0 	bl	80032ec <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f90:	f7fe f9ac 	bl	80032ec <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e062      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa2:	4b33      	ldr	r3, [pc, #204]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fae:	e05a      	b.n	8005066 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e059      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb4:	4b2e      	ldr	r3, [pc, #184]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d152      	bne.n	8005066 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fc0:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fcc:	4b28      	ldr	r3, [pc, #160]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a27      	ldr	r2, [pc, #156]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fd8:	f7fe f988 	bl	80032ec <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fe f984 	bl	80032ec <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e03a      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff2:	4b1f      	ldr	r3, [pc, #124]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x734>
 8004ffe:	e032      	b.n	8005066 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b0c      	cmp	r3, #12
 8005004:	d02d      	beq.n	8005062 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005006:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a19      	ldr	r2, [pc, #100]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 800500c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005010:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005012:	4b17      	ldr	r3, [pc, #92]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d105      	bne.n	800502a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800501e:	4b14      	ldr	r3, [pc, #80]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4a13      	ldr	r2, [pc, #76]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8005024:	f023 0303 	bic.w	r3, r3, #3
 8005028:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	4a10      	ldr	r2, [pc, #64]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8005030:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005038:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fe f957 	bl	80032ec <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005042:	f7fe f953 	bl	80032ec <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e009      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_RCC_OscConfig+0x7c4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f0      	bne.n	8005042 <HAL_RCC_OscConfig+0x796>
 8005060:	e001      	b.n	8005066 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3720      	adds	r7, #32
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40021000 	.word	0x40021000
 8005074:	f99d808c 	.word	0xf99d808c

08005078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0c8      	b.n	800521e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800508c:	4b66      	ldr	r3, [pc, #408]	; (8005228 <HAL_RCC_ClockConfig+0x1b0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d910      	bls.n	80050bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509a:	4b63      	ldr	r3, [pc, #396]	; (8005228 <HAL_RCC_ClockConfig+0x1b0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f023 0207 	bic.w	r2, r3, #7
 80050a2:	4961      	ldr	r1, [pc, #388]	; (8005228 <HAL_RCC_ClockConfig+0x1b0>)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050aa:	4b5f      	ldr	r3, [pc, #380]	; (8005228 <HAL_RCC_ClockConfig+0x1b0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d001      	beq.n	80050bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0b0      	b.n	800521e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d04c      	beq.n	8005162 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d0:	4b56      	ldr	r3, [pc, #344]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d121      	bne.n	8005120 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e09e      	b.n	800521e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d107      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e8:	4b50      	ldr	r3, [pc, #320]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d115      	bne.n	8005120 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e092      	b.n	800521e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d107      	bne.n	8005110 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005100:	4b4a      	ldr	r3, [pc, #296]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d109      	bne.n	8005120 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e086      	b.n	800521e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005110:	4b46      	ldr	r3, [pc, #280]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e07e      	b.n	800521e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005120:	4b42      	ldr	r3, [pc, #264]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f023 0203 	bic.w	r2, r3, #3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	493f      	ldr	r1, [pc, #252]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 800512e:	4313      	orrs	r3, r2
 8005130:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005132:	f7fe f8db 	bl	80032ec <HAL_GetTick>
 8005136:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005138:	e00a      	b.n	8005150 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800513a:	f7fe f8d7 	bl	80032ec <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f241 3288 	movw	r2, #5000	; 0x1388
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e066      	b.n	800521e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005150:	4b36      	ldr	r3, [pc, #216]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 020c 	and.w	r2, r3, #12
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	429a      	cmp	r2, r3
 8005160:	d1eb      	bne.n	800513a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516e:	4b2f      	ldr	r3, [pc, #188]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	492c      	ldr	r1, [pc, #176]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 800517c:	4313      	orrs	r3, r2
 800517e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005180:	4b29      	ldr	r3, [pc, #164]	; (8005228 <HAL_RCC_ClockConfig+0x1b0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d210      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518e:	4b26      	ldr	r3, [pc, #152]	; (8005228 <HAL_RCC_ClockConfig+0x1b0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 0207 	bic.w	r2, r3, #7
 8005196:	4924      	ldr	r1, [pc, #144]	; (8005228 <HAL_RCC_ClockConfig+0x1b0>)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519e:	4b22      	ldr	r3, [pc, #136]	; (8005228 <HAL_RCC_ClockConfig+0x1b0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d001      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e036      	b.n	800521e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051bc:	4b1b      	ldr	r3, [pc, #108]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	4918      	ldr	r1, [pc, #96]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d009      	beq.n	80051ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4910      	ldr	r1, [pc, #64]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051ee:	f000 f825 	bl	800523c <HAL_RCC_GetSysClockFreq>
 80051f2:	4601      	mov	r1, r0
 80051f4:	4b0d      	ldr	r3, [pc, #52]	; (800522c <HAL_RCC_ClockConfig+0x1b4>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 8005200:	5cd3      	ldrb	r3, [r2, r3]
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	fa21 f303 	lsr.w	r3, r1, r3
 800520a:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <HAL_RCC_ClockConfig+0x1c0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe f81a 	bl	800324c <HAL_InitTick>
 8005218:	4603      	mov	r3, r0
 800521a:	72fb      	strb	r3, [r7, #11]

  return status;
 800521c:	7afb      	ldrb	r3, [r7, #11]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40022000 	.word	0x40022000
 800522c:	40021000 	.word	0x40021000
 8005230:	0800c8dc 	.word	0x0800c8dc
 8005234:	20000194 	.word	0x20000194
 8005238:	20000198 	.word	0x20000198

0800523c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800523c:	b480      	push	{r7}
 800523e:	b089      	sub	sp, #36	; 0x24
 8005240:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	2300      	movs	r3, #0
 8005248:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800524a:	4b3d      	ldr	r3, [pc, #244]	; (8005340 <HAL_RCC_GetSysClockFreq+0x104>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005254:	4b3a      	ldr	r3, [pc, #232]	; (8005340 <HAL_RCC_GetSysClockFreq+0x104>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0x34>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b0c      	cmp	r3, #12
 8005268:	d121      	bne.n	80052ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d11e      	bne.n	80052ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005270:	4b33      	ldr	r3, [pc, #204]	; (8005340 <HAL_RCC_GetSysClockFreq+0x104>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800527c:	4b30      	ldr	r3, [pc, #192]	; (8005340 <HAL_RCC_GetSysClockFreq+0x104>)
 800527e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	e005      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800528c:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <HAL_RCC_GetSysClockFreq+0x104>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005298:	4a2a      	ldr	r2, [pc, #168]	; (8005344 <HAL_RCC_GetSysClockFreq+0x108>)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10d      	bne.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ac:	e00a      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052b4:	4b24      	ldr	r3, [pc, #144]	; (8005348 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	e004      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d101      	bne.n	80052c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052c0:	4b22      	ldr	r3, [pc, #136]	; (800534c <HAL_RCC_GetSysClockFreq+0x110>)
 80052c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	d133      	bne.n	8005332 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ca:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_RCC_GetSysClockFreq+0x104>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d002      	beq.n	80052e0 <HAL_RCC_GetSysClockFreq+0xa4>
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d003      	beq.n	80052e6 <HAL_RCC_GetSysClockFreq+0xaa>
 80052de:	e005      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052e2:	617b      	str	r3, [r7, #20]
      break;
 80052e4:	e005      	b.n	80052f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052e6:	4b19      	ldr	r3, [pc, #100]	; (800534c <HAL_RCC_GetSysClockFreq+0x110>)
 80052e8:	617b      	str	r3, [r7, #20]
      break;
 80052ea:	e002      	b.n	80052f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	617b      	str	r3, [r7, #20]
      break;
 80052f0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052f2:	4b13      	ldr	r3, [pc, #76]	; (8005340 <HAL_RCC_GetSysClockFreq+0x104>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	3301      	adds	r3, #1
 80052fe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005300:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <HAL_RCC_GetSysClockFreq+0x104>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	fb02 f203 	mul.w	r2, r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCC_GetSysClockFreq+0x104>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	0e5b      	lsrs	r3, r3, #25
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	3301      	adds	r3, #1
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005332:	69bb      	ldr	r3, [r7, #24]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3724      	adds	r7, #36	; 0x24
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40021000 	.word	0x40021000
 8005344:	0800c8f4 	.word	0x0800c8f4
 8005348:	00f42400 	.word	0x00f42400
 800534c:	007a1200 	.word	0x007a1200

08005350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005354:	4b03      	ldr	r3, [pc, #12]	; (8005364 <HAL_RCC_GetHCLKFreq+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000194 	.word	0x20000194

08005368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800536c:	f7ff fff0 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005370:	4601      	mov	r1, r0
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800537e:	5cd3      	ldrb	r3, [r2, r3]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40021000 	.word	0x40021000
 8005390:	0800c8ec 	.word	0x0800c8ec

08005394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005398:	f7ff ffda 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 800539c:	4601      	mov	r1, r0
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0adb      	lsrs	r3, r3, #11
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4a04      	ldr	r2, [pc, #16]	; (80053bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80053aa:	5cd3      	ldrb	r3, [r2, r3]
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40021000 	.word	0x40021000
 80053bc:	0800c8ec 	.word	0x0800c8ec

080053c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053cc:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053d8:	f7ff fa04 	bl	80047e4 <HAL_PWREx_GetVoltageRange>
 80053dc:	6178      	str	r0, [r7, #20]
 80053de:	e014      	b.n	800540a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e0:	4b25      	ldr	r3, [pc, #148]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e4:	4a24      	ldr	r2, [pc, #144]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ea:	6593      	str	r3, [r2, #88]	; 0x58
 80053ec:	4b22      	ldr	r3, [pc, #136]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053f8:	f7ff f9f4 	bl	80047e4 <HAL_PWREx_GetVoltageRange>
 80053fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053fe:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	4a1d      	ldr	r2, [pc, #116]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005408:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005410:	d10b      	bne.n	800542a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d919      	bls.n	800544c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2ba0      	cmp	r3, #160	; 0xa0
 800541c:	d902      	bls.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800541e:	2302      	movs	r3, #2
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e013      	b.n	800544c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005424:	2301      	movs	r3, #1
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e010      	b.n	800544c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b80      	cmp	r3, #128	; 0x80
 800542e:	d902      	bls.n	8005436 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005430:	2303      	movs	r3, #3
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	e00a      	b.n	800544c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b80      	cmp	r3, #128	; 0x80
 800543a:	d102      	bne.n	8005442 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800543c:	2302      	movs	r3, #2
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	e004      	b.n	800544c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b70      	cmp	r3, #112	; 0x70
 8005446:	d101      	bne.n	800544c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005448:	2301      	movs	r3, #1
 800544a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f023 0207 	bic.w	r2, r3, #7
 8005454:	4909      	ldr	r1, [pc, #36]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800545c:	4b07      	ldr	r3, [pc, #28]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	429a      	cmp	r2, r3
 8005468:	d001      	beq.n	800546e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40021000 	.word	0x40021000
 800547c:	40022000 	.word	0x40022000

08005480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005488:	2300      	movs	r3, #0
 800548a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800548c:	2300      	movs	r3, #0
 800548e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005498:	2b00      	cmp	r3, #0
 800549a:	d03f      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a4:	d01c      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80054a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054aa:	d802      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00e      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80054b0:	e01f      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80054b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054b6:	d003      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80054b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054bc:	d01c      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80054be:	e018      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054c0:	4b85      	ldr	r3, [pc, #532]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a84      	ldr	r2, [pc, #528]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054cc:	e015      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fab9 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054de:	e00c      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3320      	adds	r3, #32
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fba0 	bl	8005c2c <RCCEx_PLLSAI2_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054f0:	e003      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	74fb      	strb	r3, [r7, #19]
      break;
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80054f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fa:	7cfb      	ldrb	r3, [r7, #19]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005500:	4b75      	ldr	r3, [pc, #468]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800550e:	4972      	ldr	r1, [pc, #456]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005516:	e001      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d03f      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800552c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005530:	d01c      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005536:	d802      	bhi.n	800553e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00e      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800553c:	e01f      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800553e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005542:	d003      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005544:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005548:	d01c      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800554a:	e018      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800554c:	4b62      	ldr	r3, [pc, #392]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a61      	ldr	r2, [pc, #388]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005556:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005558:	e015      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fa73 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800556a:	e00c      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3320      	adds	r3, #32
 8005570:	2100      	movs	r1, #0
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fb5a 	bl	8005c2c <RCCEx_PLLSAI2_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800557c:	e003      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	74fb      	strb	r3, [r7, #19]
      break;
 8005582:	e000      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005586:	7cfb      	ldrb	r3, [r7, #19]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10b      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800558c:	4b52      	ldr	r3, [pc, #328]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800559a:	494f      	ldr	r1, [pc, #316]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055a2:	e001      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a4:	7cfb      	ldrb	r3, [r7, #19]
 80055a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80a0 	beq.w	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b6:	2300      	movs	r3, #0
 80055b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055ba:	4b47      	ldr	r3, [pc, #284]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80055ca:	2300      	movs	r3, #0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00d      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d0:	4b41      	ldr	r3, [pc, #260]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	4a40      	ldr	r2, [pc, #256]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055da:	6593      	str	r3, [r2, #88]	; 0x58
 80055dc:	4b3e      	ldr	r3, [pc, #248]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e8:	2301      	movs	r3, #1
 80055ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055ec:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a3a      	ldr	r2, [pc, #232]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80055f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f8:	f7fd fe78 	bl	80032ec <HAL_GetTick>
 80055fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055fe:	e009      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005600:	f7fd fe74 	bl	80032ec <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d902      	bls.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	74fb      	strb	r3, [r7, #19]
        break;
 8005612:	e005      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005614:	4b31      	ldr	r3, [pc, #196]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0ef      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d15c      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005626:	4b2c      	ldr	r3, [pc, #176]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005630:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01f      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	429a      	cmp	r2, r3
 8005642:	d019      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005644:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005650:	4b21      	ldr	r3, [pc, #132]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	4a20      	ldr	r2, [pc, #128]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005660:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005666:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005670:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d016      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005682:	f7fd fe33 	bl	80032ec <HAL_GetTick>
 8005686:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005688:	e00b      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568a:	f7fd fe2f 	bl	80032ec <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	f241 3288 	movw	r2, #5000	; 0x1388
 8005698:	4293      	cmp	r3, r2
 800569a:	d902      	bls.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	74fb      	strb	r3, [r7, #19]
            break;
 80056a0:	e006      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0ec      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80056b0:	7cfb      	ldrb	r3, [r7, #19]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b6:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c6:	4904      	ldr	r1, [pc, #16]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056ce:	e009      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056d0:	7cfb      	ldrb	r3, [r7, #19]
 80056d2:	74bb      	strb	r3, [r7, #18]
 80056d4:	e006      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80056d6:	bf00      	nop
 80056d8:	40021000 	.word	0x40021000
 80056dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056e4:	7c7b      	ldrb	r3, [r7, #17]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ea:	4b9e      	ldr	r3, [pc, #632]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ee:	4a9d      	ldr	r2, [pc, #628]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005702:	4b98      	ldr	r3, [pc, #608]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f023 0203 	bic.w	r2, r3, #3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	4994      	ldr	r1, [pc, #592]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005724:	4b8f      	ldr	r3, [pc, #572]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	f023 020c 	bic.w	r2, r3, #12
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	498c      	ldr	r1, [pc, #560]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005746:	4b87      	ldr	r3, [pc, #540]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	4983      	ldr	r1, [pc, #524]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005768:	4b7e      	ldr	r3, [pc, #504]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	497b      	ldr	r1, [pc, #492]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0310 	and.w	r3, r3, #16
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800578a:	4b76      	ldr	r3, [pc, #472]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005798:	4972      	ldr	r1, [pc, #456]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057ac:	4b6d      	ldr	r3, [pc, #436]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ba:	496a      	ldr	r1, [pc, #424]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ce:	4b65      	ldr	r3, [pc, #404]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057dc:	4961      	ldr	r1, [pc, #388]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057f0:	4b5c      	ldr	r3, [pc, #368]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fe:	4959      	ldr	r1, [pc, #356]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005812:	4b54      	ldr	r3, [pc, #336]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005818:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005820:	4950      	ldr	r1, [pc, #320]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005834:	4b4b      	ldr	r3, [pc, #300]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005842:	4948      	ldr	r1, [pc, #288]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005856:	4b43      	ldr	r3, [pc, #268]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005864:	493f      	ldr	r1, [pc, #252]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d028      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005878:	4b3a      	ldr	r3, [pc, #232]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005886:	4937      	ldr	r1, [pc, #220]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005896:	d106      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005898:	4b32      	ldr	r3, [pc, #200]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4a31      	ldr	r2, [pc, #196]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800589e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a2:	60d3      	str	r3, [r2, #12]
 80058a4:	e011      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ae:	d10c      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	2101      	movs	r1, #1
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 f8c8 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058c0:	7cfb      	ldrb	r3, [r7, #19]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80058c6:	7cfb      	ldrb	r3, [r7, #19]
 80058c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d028      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058d6:	4b23      	ldr	r3, [pc, #140]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	491f      	ldr	r1, [pc, #124]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058f4:	d106      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f6:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	4a1a      	ldr	r2, [pc, #104]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005900:	60d3      	str	r3, [r2, #12]
 8005902:	e011      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800590c:	d10c      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3304      	adds	r3, #4
 8005912:	2101      	movs	r1, #1
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f899 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800591e:	7cfb      	ldrb	r3, [r7, #19]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d02b      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005942:	4908      	ldr	r1, [pc, #32]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005952:	d109      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005954:	4b03      	ldr	r3, [pc, #12]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4a02      	ldr	r2, [pc, #8]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800595a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800595e:	60d3      	str	r3, [r2, #12]
 8005960:	e014      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005970:	d10c      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	2101      	movs	r1, #1
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f867 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005988:	7cfb      	ldrb	r3, [r7, #19]
 800598a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d02f      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005998:	4b2b      	ldr	r3, [pc, #172]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a6:	4928      	ldr	r1, [pc, #160]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059b6:	d10d      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3304      	adds	r3, #4
 80059bc:	2102      	movs	r1, #2
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 f844 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059c8:	7cfb      	ldrb	r3, [r7, #19]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d014      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80059ce:	7cfb      	ldrb	r3, [r7, #19]
 80059d0:	74bb      	strb	r3, [r7, #18]
 80059d2:	e011      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3320      	adds	r3, #32
 80059e2:	2102      	movs	r1, #2
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 f921 	bl	8005c2c <RCCEx_PLLSAI2_Config>
 80059ea:	4603      	mov	r3, r0
 80059ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059ee:	7cfb      	ldrb	r3, [r7, #19]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80059f4:	7cfb      	ldrb	r3, [r7, #19]
 80059f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a04:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a12:	490d      	ldr	r1, [pc, #52]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a26:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a36:	4904      	ldr	r1, [pc, #16]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40021000 	.word	0x40021000

08005a4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a5a:	4b73      	ldr	r3, [pc, #460]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d018      	beq.n	8005a98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a66:	4b70      	ldr	r3, [pc, #448]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0203 	and.w	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d10d      	bne.n	8005a92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
       ||
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a7e:	4b6a      	ldr	r3, [pc, #424]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
       ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d044      	beq.n	8005b1c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	73fb      	strb	r3, [r7, #15]
 8005a96:	e041      	b.n	8005b1c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d00c      	beq.n	8005aba <RCCEx_PLLSAI1_Config+0x6e>
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d013      	beq.n	8005acc <RCCEx_PLLSAI1_Config+0x80>
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d120      	bne.n	8005aea <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005aa8:	4b5f      	ldr	r3, [pc, #380]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11d      	bne.n	8005af0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab8:	e01a      	b.n	8005af0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005aba:	4b5b      	ldr	r3, [pc, #364]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d116      	bne.n	8005af4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aca:	e013      	b.n	8005af4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005acc:	4b56      	ldr	r3, [pc, #344]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10f      	bne.n	8005af8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ad8:	4b53      	ldr	r3, [pc, #332]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d109      	bne.n	8005af8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ae8:	e006      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
      break;
 8005aee:	e004      	b.n	8005afa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005af0:	bf00      	nop
 8005af2:	e002      	b.n	8005afa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005af4:	bf00      	nop
 8005af6:	e000      	b.n	8005afa <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005af8:	bf00      	nop
    }

    if(status == HAL_OK)
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10d      	bne.n	8005b1c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b00:	4b49      	ldr	r3, [pc, #292]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6819      	ldr	r1, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	430b      	orrs	r3, r1
 8005b16:	4944      	ldr	r1, [pc, #272]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d17d      	bne.n	8005c1e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b22:	4b41      	ldr	r3, [pc, #260]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a40      	ldr	r2, [pc, #256]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b2e:	f7fd fbdd 	bl	80032ec <HAL_GetTick>
 8005b32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b34:	e009      	b.n	8005b4a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b36:	f7fd fbd9 	bl	80032ec <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d902      	bls.n	8005b4a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	73fb      	strb	r3, [r7, #15]
        break;
 8005b48:	e005      	b.n	8005b56 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b4a:	4b37      	ldr	r3, [pc, #220]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1ef      	bne.n	8005b36 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d160      	bne.n	8005c1e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d111      	bne.n	8005b86 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b62:	4b31      	ldr	r3, [pc, #196]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6892      	ldr	r2, [r2, #8]
 8005b72:	0211      	lsls	r1, r2, #8
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68d2      	ldr	r2, [r2, #12]
 8005b78:	0912      	lsrs	r2, r2, #4
 8005b7a:	0452      	lsls	r2, r2, #17
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	492a      	ldr	r1, [pc, #168]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	610b      	str	r3, [r1, #16]
 8005b84:	e027      	b.n	8005bd6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d112      	bne.n	8005bb2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b8c:	4b26      	ldr	r3, [pc, #152]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6892      	ldr	r2, [r2, #8]
 8005b9c:	0211      	lsls	r1, r2, #8
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6912      	ldr	r2, [r2, #16]
 8005ba2:	0852      	lsrs	r2, r2, #1
 8005ba4:	3a01      	subs	r2, #1
 8005ba6:	0552      	lsls	r2, r2, #21
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	491f      	ldr	r1, [pc, #124]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	610b      	str	r3, [r1, #16]
 8005bb0:	e011      	b.n	8005bd6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bb2:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6892      	ldr	r2, [r2, #8]
 8005bc2:	0211      	lsls	r1, r2, #8
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6952      	ldr	r2, [r2, #20]
 8005bc8:	0852      	lsrs	r2, r2, #1
 8005bca:	3a01      	subs	r2, #1
 8005bcc:	0652      	lsls	r2, r2, #25
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	4915      	ldr	r1, [pc, #84]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bd6:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005be0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be2:	f7fd fb83 	bl	80032ec <HAL_GetTick>
 8005be6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005be8:	e009      	b.n	8005bfe <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bea:	f7fd fb7f 	bl	80032ec <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d902      	bls.n	8005bfe <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	73fb      	strb	r3, [r7, #15]
          break;
 8005bfc:	e005      	b.n	8005c0a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0ef      	beq.n	8005bea <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d106      	bne.n	8005c1e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	4903      	ldr	r1, [pc, #12]	; (8005c28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40021000 	.word	0x40021000

08005c2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c3a:	4b68      	ldr	r3, [pc, #416]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d018      	beq.n	8005c78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c46:	4b65      	ldr	r3, [pc, #404]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0203 	and.w	r2, r3, #3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d10d      	bne.n	8005c72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
       ||
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c5e:	4b5f      	ldr	r3, [pc, #380]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
       ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d044      	beq.n	8005cfc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
 8005c76:	e041      	b.n	8005cfc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d00c      	beq.n	8005c9a <RCCEx_PLLSAI2_Config+0x6e>
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d013      	beq.n	8005cac <RCCEx_PLLSAI2_Config+0x80>
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d120      	bne.n	8005cca <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c88:	4b54      	ldr	r3, [pc, #336]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d11d      	bne.n	8005cd0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c98:	e01a      	b.n	8005cd0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c9a:	4b50      	ldr	r3, [pc, #320]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d116      	bne.n	8005cd4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005caa:	e013      	b.n	8005cd4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cac:	4b4b      	ldr	r3, [pc, #300]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10f      	bne.n	8005cd8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cb8:	4b48      	ldr	r3, [pc, #288]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d109      	bne.n	8005cd8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cc8:	e006      	b.n	8005cd8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cce:	e004      	b.n	8005cda <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005cd0:	bf00      	nop
 8005cd2:	e002      	b.n	8005cda <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005cd4:	bf00      	nop
 8005cd6:	e000      	b.n	8005cda <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005cd8:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10d      	bne.n	8005cfc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ce0:	4b3e      	ldr	r3, [pc, #248]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6819      	ldr	r1, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	4939      	ldr	r1, [pc, #228]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d167      	bne.n	8005dd2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d02:	4b36      	ldr	r3, [pc, #216]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a35      	ldr	r2, [pc, #212]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0e:	f7fd faed 	bl	80032ec <HAL_GetTick>
 8005d12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d14:	e009      	b.n	8005d2a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d16:	f7fd fae9 	bl	80032ec <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d902      	bls.n	8005d2a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	73fb      	strb	r3, [r7, #15]
        break;
 8005d28:	e005      	b.n	8005d36 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d2a:	4b2c      	ldr	r3, [pc, #176]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1ef      	bne.n	8005d16 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d14a      	bne.n	8005dd2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d111      	bne.n	8005d66 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d42:	4b26      	ldr	r3, [pc, #152]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6892      	ldr	r2, [r2, #8]
 8005d52:	0211      	lsls	r1, r2, #8
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68d2      	ldr	r2, [r2, #12]
 8005d58:	0912      	lsrs	r2, r2, #4
 8005d5a:	0452      	lsls	r2, r2, #17
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	491f      	ldr	r1, [pc, #124]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	614b      	str	r3, [r1, #20]
 8005d64:	e011      	b.n	8005d8a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d66:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6892      	ldr	r2, [r2, #8]
 8005d76:	0211      	lsls	r1, r2, #8
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6912      	ldr	r2, [r2, #16]
 8005d7c:	0852      	lsrs	r2, r2, #1
 8005d7e:	3a01      	subs	r2, #1
 8005d80:	0652      	lsls	r2, r2, #25
 8005d82:	430a      	orrs	r2, r1
 8005d84:	4915      	ldr	r1, [pc, #84]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d8a:	4b14      	ldr	r3, [pc, #80]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d96:	f7fd faa9 	bl	80032ec <HAL_GetTick>
 8005d9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d9c:	e009      	b.n	8005db2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d9e:	f7fd faa5 	bl	80032ec <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d902      	bls.n	8005db2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	73fb      	strb	r3, [r7, #15]
          break;
 8005db0:	e005      	b.n	8005dbe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005db2:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0ef      	beq.n	8005d9e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	4903      	ldr	r1, [pc, #12]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40021000 	.word	0x40021000

08005de0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e042      	b.n	8005e78 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	795b      	ldrb	r3, [r3, #5]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d105      	bne.n	8005e08 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fc feba 	bl	8002b7c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0204 	orr.w	r2, r2, #4
 8005e1c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	d104      	bne.n	8005e36 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e020      	b.n	8005e78 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005e36:	f7fd fa59 	bl	80032ec <HAL_GetTick>
 8005e3a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005e3c:	e00e      	b.n	8005e5c <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005e3e:	f7fd fa55 	bl	80032ec <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d907      	bls.n	8005e5c <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2204      	movs	r2, #4
 8005e50:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2202      	movs	r2, #2
 8005e56:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e00d      	b.n	8005e78 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d0e9      	beq.n	8005e3e <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e095      	b.n	8005fbe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d108      	bne.n	8005eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea2:	d009      	beq.n	8005eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	61da      	str	r2, [r3, #28]
 8005eaa:	e005      	b.n	8005eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fc fe72 	bl	8002bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ef8:	d902      	bls.n	8005f00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e002      	b.n	8005f06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f0e:	d007      	beq.n	8005f20 <HAL_SPI_Init+0xa0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f18:	d002      	beq.n	8005f20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f30:	431a      	orrs	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	ea42 0103 	orr.w	r1, r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	0c1b      	lsrs	r3, r3, #16
 8005f7c:	f003 0204 	and.w	r2, r3, #4
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f9c:	ea42 0103 	orr.w	r1, r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b088      	sub	sp, #32
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	603b      	str	r3, [r7, #0]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_SPI_Transmit+0x22>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e158      	b.n	800629a <HAL_SPI_Transmit+0x2d4>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ff0:	f7fd f97c 	bl	80032ec <HAL_GetTick>
 8005ff4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d002      	beq.n	800600c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006006:	2302      	movs	r3, #2
 8006008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800600a:	e13d      	b.n	8006288 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_SPI_Transmit+0x52>
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800601c:	e134      	b.n	8006288 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2203      	movs	r2, #3
 8006022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	88fa      	ldrh	r2, [r7, #6]
 8006036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006068:	d10f      	bne.n	800608a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006078:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006088:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b40      	cmp	r3, #64	; 0x40
 8006096:	d007      	beq.n	80060a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060b0:	d94b      	bls.n	800614a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Transmit+0xfa>
 80060ba:	8afb      	ldrh	r3, [r7, #22]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d13e      	bne.n	800613e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	881a      	ldrh	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060e4:	e02b      	b.n	800613e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d112      	bne.n	800611a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	881a      	ldrh	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006118:	e011      	b.n	800613e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800611a:	f7fd f8e7 	bl	80032ec <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d803      	bhi.n	8006132 <HAL_SPI_Transmit+0x16c>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d102      	bne.n	8006138 <HAL_SPI_Transmit+0x172>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800613c:	e0a4      	b.n	8006288 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1ce      	bne.n	80060e6 <HAL_SPI_Transmit+0x120>
 8006148:	e07c      	b.n	8006244 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_SPI_Transmit+0x192>
 8006152:	8afb      	ldrh	r3, [r7, #22]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d170      	bne.n	800623a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d912      	bls.n	8006188 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	881a      	ldrh	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	1c9a      	adds	r2, r3, #2
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b02      	subs	r3, #2
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006186:	e058      	b.n	800623a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	7812      	ldrb	r2, [r2, #0]
 8006194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80061ae:	e044      	b.n	800623a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d12b      	bne.n	8006216 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d912      	bls.n	80061ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	881a      	ldrh	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	1c9a      	adds	r2, r3, #2
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b02      	subs	r3, #2
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061ec:	e025      	b.n	800623a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	330c      	adds	r3, #12
 80061f8:	7812      	ldrb	r2, [r2, #0]
 80061fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006214:	e011      	b.n	800623a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006216:	f7fd f869 	bl	80032ec <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d803      	bhi.n	800622e <HAL_SPI_Transmit+0x268>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d102      	bne.n	8006234 <HAL_SPI_Transmit+0x26e>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006238:	e026      	b.n	8006288 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1b5      	bne.n	80061b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fb61 	bl	8006910 <SPI_EndRxTxTransaction>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006262:	2300      	movs	r3, #0
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e000      	b.n	8006288 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006298:	7ffb      	ldrb	r3, [r7, #31]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b08a      	sub	sp, #40	; 0x28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062b0:	2301      	movs	r3, #1
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_SPI_TransmitReceive+0x26>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e1fb      	b.n	80066c0 <HAL_SPI_TransmitReceive+0x41e>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062d0:	f7fd f80c 	bl	80032ec <HAL_GetTick>
 80062d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80062e4:	887b      	ldrh	r3, [r7, #2]
 80062e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80062e8:	887b      	ldrh	r3, [r7, #2]
 80062ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062ec:	7efb      	ldrb	r3, [r7, #27]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d00e      	beq.n	8006310 <HAL_SPI_TransmitReceive+0x6e>
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f8:	d106      	bne.n	8006308 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d102      	bne.n	8006308 <HAL_SPI_TransmitReceive+0x66>
 8006302:	7efb      	ldrb	r3, [r7, #27]
 8006304:	2b04      	cmp	r3, #4
 8006306:	d003      	beq.n	8006310 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006308:	2302      	movs	r3, #2
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800630e:	e1cd      	b.n	80066ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <HAL_SPI_TransmitReceive+0x80>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_SPI_TransmitReceive+0x80>
 800631c:	887b      	ldrh	r3, [r7, #2]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d103      	bne.n	800632a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006328:	e1c0      	b.n	80066ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b04      	cmp	r3, #4
 8006334:	d003      	beq.n	800633e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2205      	movs	r2, #5
 800633a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	887a      	ldrh	r2, [r7, #2]
 800634e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	887a      	ldrh	r2, [r7, #2]
 8006356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	887a      	ldrh	r2, [r7, #2]
 8006364:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	887a      	ldrh	r2, [r7, #2]
 800636a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006380:	d802      	bhi.n	8006388 <HAL_SPI_TransmitReceive+0xe6>
 8006382:	8a3b      	ldrh	r3, [r7, #16]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d908      	bls.n	800639a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006396:	605a      	str	r2, [r3, #4]
 8006398:	e007      	b.n	80063aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d007      	beq.n	80063c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063d0:	d97c      	bls.n	80064cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_SPI_TransmitReceive+0x13e>
 80063da:	8a7b      	ldrh	r3, [r7, #18]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d169      	bne.n	80064b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	881a      	ldrh	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	1c9a      	adds	r2, r3, #2
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006404:	e056      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b02      	cmp	r3, #2
 8006412:	d11b      	bne.n	800644c <HAL_SPI_TransmitReceive+0x1aa>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d016      	beq.n	800644c <HAL_SPI_TransmitReceive+0x1aa>
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	2b01      	cmp	r3, #1
 8006422:	d113      	bne.n	800644c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006428:	881a      	ldrh	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	1c9a      	adds	r2, r3, #2
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b01      	cmp	r3, #1
 8006458:	d11c      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x1f2>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d016      	beq.n	8006494 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	b292      	uxth	r2, r2
 8006472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	1c9a      	adds	r2, r3, #2
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006490:	2301      	movs	r3, #1
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006494:	f7fc ff2a 	bl	80032ec <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d807      	bhi.n	80064b4 <HAL_SPI_TransmitReceive+0x212>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064aa:	d003      	beq.n	80064b4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80064b2:	e0fb      	b.n	80066ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1a3      	bne.n	8006406 <HAL_SPI_TransmitReceive+0x164>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d19d      	bne.n	8006406 <HAL_SPI_TransmitReceive+0x164>
 80064ca:	e0df      	b.n	800668c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_SPI_TransmitReceive+0x23a>
 80064d4:	8a7b      	ldrh	r3, [r7, #18]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	f040 80cb 	bne.w	8006672 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d912      	bls.n	800650c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	881a      	ldrh	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	1c9a      	adds	r2, r3, #2
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b02      	subs	r3, #2
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	87da      	strh	r2, [r3, #62]	; 0x3e
 800650a:	e0b2      	b.n	8006672 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	7812      	ldrb	r2, [r2, #0]
 8006518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006532:	e09e      	b.n	8006672 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b02      	cmp	r3, #2
 8006540:	d134      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x30a>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006546:	b29b      	uxth	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d02f      	beq.n	80065ac <HAL_SPI_TransmitReceive+0x30a>
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	2b01      	cmp	r3, #1
 8006550:	d12c      	bne.n	80065ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d912      	bls.n	8006582 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	881a      	ldrh	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	1c9a      	adds	r2, r3, #2
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b02      	subs	r3, #2
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006580:	e012      	b.n	80065a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330c      	adds	r3, #12
 800658c:	7812      	ldrb	r2, [r2, #0]
 800658e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d148      	bne.n	800664c <HAL_SPI_TransmitReceive+0x3aa>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d042      	beq.n	800664c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d923      	bls.n	800661a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	b292      	uxth	r2, r2
 80065de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	1c9a      	adds	r2, r3, #2
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b02      	subs	r3, #2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006602:	b29b      	uxth	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	d81f      	bhi.n	8006648 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006616:	605a      	str	r2, [r3, #4]
 8006618:	e016      	b.n	8006648 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f103 020c 	add.w	r2, r3, #12
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	7812      	ldrb	r2, [r2, #0]
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006648:	2301      	movs	r3, #1
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800664c:	f7fc fe4e 	bl	80032ec <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006658:	429a      	cmp	r2, r3
 800665a:	d803      	bhi.n	8006664 <HAL_SPI_TransmitReceive+0x3c2>
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006662:	d102      	bne.n	800666a <HAL_SPI_TransmitReceive+0x3c8>
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	2b00      	cmp	r3, #0
 8006668:	d103      	bne.n	8006672 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006670:	e01c      	b.n	80066ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	f47f af5b 	bne.w	8006534 <HAL_SPI_TransmitReceive+0x292>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	f47f af54 	bne.w	8006534 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 f93d 	bl	8006910 <SPI_EndRxTxTransaction>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d006      	beq.n	80066aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	661a      	str	r2, [r3, #96]	; 0x60
 80066a8:	e000      	b.n	80066ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80066aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3728      	adds	r7, #40	; 0x28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066d6:	b2db      	uxtb	r3, r3
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066f4:	f7fc fdfa 	bl	80032ec <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	1a9b      	subs	r3, r3, r2
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	4413      	add	r3, r2
 8006702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006704:	f7fc fdf2 	bl	80032ec <HAL_GetTick>
 8006708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800670a:	4b39      	ldr	r3, [pc, #228]	; (80067f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	015b      	lsls	r3, r3, #5
 8006710:	0d1b      	lsrs	r3, r3, #20
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	fb02 f303 	mul.w	r3, r2, r3
 8006718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800671a:	e054      	b.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006722:	d050      	beq.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006724:	f7fc fde2 	bl	80032ec <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	429a      	cmp	r2, r3
 8006732:	d902      	bls.n	800673a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d13d      	bne.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006752:	d111      	bne.n	8006778 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800675c:	d004      	beq.n	8006768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006766:	d107      	bne.n	8006778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006780:	d10f      	bne.n	80067a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e017      	b.n	80067e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4013      	ands	r3, r2
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	bf0c      	ite	eq
 80067d6:	2301      	moveq	r3, #1
 80067d8:	2300      	movne	r3, #0
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d19b      	bne.n	800671c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3720      	adds	r7, #32
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000194 	.word	0x20000194

080067f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006802:	f7fc fd73 	bl	80032ec <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	1a9b      	subs	r3, r3, r2
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	4413      	add	r3, r2
 8006810:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006812:	f7fc fd6b 	bl	80032ec <HAL_GetTick>
 8006816:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006818:	4b3c      	ldr	r3, [pc, #240]	; (800690c <SPI_WaitFifoStateUntilTimeout+0x118>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	00da      	lsls	r2, r3, #3
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	0d1b      	lsrs	r3, r3, #20
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006830:	e05f      	b.n	80068f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006838:	d106      	bne.n	8006848 <SPI_WaitFifoStateUntilTimeout+0x54>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	330c      	adds	r3, #12
 8006846:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	d050      	beq.n	80068f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006850:	f7fc fd4c 	bl	80032ec <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	429a      	cmp	r2, r3
 800685e:	d902      	bls.n	8006866 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d13d      	bne.n	80068e2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006874:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800687e:	d111      	bne.n	80068a4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006888:	d004      	beq.n	8006894 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006892:	d107      	bne.n	80068a4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ac:	d10f      	bne.n	80068ce <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e010      	b.n	8006904 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4013      	ands	r3, r2
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d197      	bne.n	8006832 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000194 	.word	0x20000194

08006910 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7ff ff63 	bl	80067f4 <SPI_WaitFifoStateUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e027      	b.n	8006994 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2200      	movs	r2, #0
 800694c:	2180      	movs	r1, #128	; 0x80
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff fec8 	bl	80066e4 <SPI_WaitFlagStateUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695e:	f043 0220 	orr.w	r2, r3, #32
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e014      	b.n	8006994 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2200      	movs	r2, #0
 8006972:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff ff3c 	bl	80067f4 <SPI_WaitFifoStateUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006986:	f043 0220 	orr.w	r2, r3, #32
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e000      	b.n	8006994 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e049      	b.n	8006a42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d106      	bne.n	80069c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fc f93c 	bl	8002c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f001 f9c6 	bl	8007d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d001      	beq.n	8006a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e04f      	b.n	8006b04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a23      	ldr	r2, [pc, #140]	; (8006b10 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d01d      	beq.n	8006ac2 <HAL_TIM_Base_Start_IT+0x76>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8e:	d018      	beq.n	8006ac2 <HAL_TIM_Base_Start_IT+0x76>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1f      	ldr	r2, [pc, #124]	; (8006b14 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <HAL_TIM_Base_Start_IT+0x76>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <HAL_TIM_Base_Start_IT+0xcc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00e      	beq.n	8006ac2 <HAL_TIM_Base_Start_IT+0x76>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a1c      	ldr	r2, [pc, #112]	; (8006b1c <HAL_TIM_Base_Start_IT+0xd0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d009      	beq.n	8006ac2 <HAL_TIM_Base_Start_IT+0x76>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d004      	beq.n	8006ac2 <HAL_TIM_Base_Start_IT+0x76>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a19      	ldr	r2, [pc, #100]	; (8006b24 <HAL_TIM_Base_Start_IT+0xd8>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d115      	bne.n	8006aee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	4b17      	ldr	r3, [pc, #92]	; (8006b28 <HAL_TIM_Base_Start_IT+0xdc>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b06      	cmp	r3, #6
 8006ad2:	d015      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0xb4>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ada:	d011      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aec:	e008      	b.n	8006b00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	e000      	b.n	8006b02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40000c00 	.word	0x40000c00
 8006b20:	40013400 	.word	0x40013400
 8006b24:	40014000 	.word	0x40014000
 8006b28:	00010007 	.word	0x00010007

08006b2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a1a      	ldr	r2, [r3, #32]
 8006b4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10f      	bne.n	8006b74 <HAL_TIM_Base_Stop_IT+0x48>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6a1a      	ldr	r2, [r3, #32]
 8006b5a:	f240 4344 	movw	r3, #1092	; 0x444
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d107      	bne.n	8006b74 <HAL_TIM_Base_Stop_IT+0x48>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0201 	bic.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e049      	b.n	8006c30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f841 	bl	8006c38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f001 f8cf 	bl	8007d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d109      	bne.n	8006c70 <HAL_TIM_PWM_Start+0x24>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	bf14      	ite	ne
 8006c68:	2301      	movne	r3, #1
 8006c6a:	2300      	moveq	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	e03c      	b.n	8006cea <HAL_TIM_PWM_Start+0x9e>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d109      	bne.n	8006c8a <HAL_TIM_PWM_Start+0x3e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	bf14      	ite	ne
 8006c82:	2301      	movne	r3, #1
 8006c84:	2300      	moveq	r3, #0
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	e02f      	b.n	8006cea <HAL_TIM_PWM_Start+0x9e>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d109      	bne.n	8006ca4 <HAL_TIM_PWM_Start+0x58>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	bf14      	ite	ne
 8006c9c:	2301      	movne	r3, #1
 8006c9e:	2300      	moveq	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	e022      	b.n	8006cea <HAL_TIM_PWM_Start+0x9e>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b0c      	cmp	r3, #12
 8006ca8:	d109      	bne.n	8006cbe <HAL_TIM_PWM_Start+0x72>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	bf14      	ite	ne
 8006cb6:	2301      	movne	r3, #1
 8006cb8:	2300      	moveq	r3, #0
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	e015      	b.n	8006cea <HAL_TIM_PWM_Start+0x9e>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d109      	bne.n	8006cd8 <HAL_TIM_PWM_Start+0x8c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	bf14      	ite	ne
 8006cd0:	2301      	movne	r3, #1
 8006cd2:	2300      	moveq	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	e008      	b.n	8006cea <HAL_TIM_PWM_Start+0x9e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	bf14      	ite	ne
 8006ce4:	2301      	movne	r3, #1
 8006ce6:	2300      	moveq	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e09c      	b.n	8006e2c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d104      	bne.n	8006d02 <HAL_TIM_PWM_Start+0xb6>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d00:	e023      	b.n	8006d4a <HAL_TIM_PWM_Start+0xfe>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d104      	bne.n	8006d12 <HAL_TIM_PWM_Start+0xc6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d10:	e01b      	b.n	8006d4a <HAL_TIM_PWM_Start+0xfe>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d104      	bne.n	8006d22 <HAL_TIM_PWM_Start+0xd6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d20:	e013      	b.n	8006d4a <HAL_TIM_PWM_Start+0xfe>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b0c      	cmp	r3, #12
 8006d26:	d104      	bne.n	8006d32 <HAL_TIM_PWM_Start+0xe6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d30:	e00b      	b.n	8006d4a <HAL_TIM_PWM_Start+0xfe>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	d104      	bne.n	8006d42 <HAL_TIM_PWM_Start+0xf6>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d40:	e003      	b.n	8006d4a <HAL_TIM_PWM_Start+0xfe>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 fc14 	bl	8008580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a35      	ldr	r2, [pc, #212]	; (8006e34 <HAL_TIM_PWM_Start+0x1e8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d013      	beq.n	8006d8a <HAL_TIM_PWM_Start+0x13e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a34      	ldr	r2, [pc, #208]	; (8006e38 <HAL_TIM_PWM_Start+0x1ec>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00e      	beq.n	8006d8a <HAL_TIM_PWM_Start+0x13e>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a32      	ldr	r2, [pc, #200]	; (8006e3c <HAL_TIM_PWM_Start+0x1f0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d009      	beq.n	8006d8a <HAL_TIM_PWM_Start+0x13e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a31      	ldr	r2, [pc, #196]	; (8006e40 <HAL_TIM_PWM_Start+0x1f4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d004      	beq.n	8006d8a <HAL_TIM_PWM_Start+0x13e>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a2f      	ldr	r2, [pc, #188]	; (8006e44 <HAL_TIM_PWM_Start+0x1f8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d101      	bne.n	8006d8e <HAL_TIM_PWM_Start+0x142>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <HAL_TIM_PWM_Start+0x144>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006da2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a22      	ldr	r2, [pc, #136]	; (8006e34 <HAL_TIM_PWM_Start+0x1e8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d01d      	beq.n	8006dea <HAL_TIM_PWM_Start+0x19e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db6:	d018      	beq.n	8006dea <HAL_TIM_PWM_Start+0x19e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a22      	ldr	r2, [pc, #136]	; (8006e48 <HAL_TIM_PWM_Start+0x1fc>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <HAL_TIM_PWM_Start+0x19e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a21      	ldr	r2, [pc, #132]	; (8006e4c <HAL_TIM_PWM_Start+0x200>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00e      	beq.n	8006dea <HAL_TIM_PWM_Start+0x19e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <HAL_TIM_PWM_Start+0x204>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d009      	beq.n	8006dea <HAL_TIM_PWM_Start+0x19e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a17      	ldr	r2, [pc, #92]	; (8006e38 <HAL_TIM_PWM_Start+0x1ec>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d004      	beq.n	8006dea <HAL_TIM_PWM_Start+0x19e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a15      	ldr	r2, [pc, #84]	; (8006e3c <HAL_TIM_PWM_Start+0x1f0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d115      	bne.n	8006e16 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	4b18      	ldr	r3, [pc, #96]	; (8006e54 <HAL_TIM_PWM_Start+0x208>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b06      	cmp	r3, #6
 8006dfa:	d015      	beq.n	8006e28 <HAL_TIM_PWM_Start+0x1dc>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e02:	d011      	beq.n	8006e28 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0201 	orr.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e14:	e008      	b.n	8006e28 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0201 	orr.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e000      	b.n	8006e2a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40013400 	.word	0x40013400
 8006e3c:	40014000 	.word	0x40014000
 8006e40:	40014400 	.word	0x40014400
 8006e44:	40014800 	.word	0x40014800
 8006e48:	40000400 	.word	0x40000400
 8006e4c:	40000800 	.word	0x40000800
 8006e50:	40000c00 	.word	0x40000c00
 8006e54:	00010007 	.word	0x00010007

08006e58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2200      	movs	r2, #0
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f001 fb88 	bl	8008580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a3e      	ldr	r2, [pc, #248]	; (8006f70 <HAL_TIM_PWM_Stop+0x118>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d013      	beq.n	8006ea2 <HAL_TIM_PWM_Stop+0x4a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a3d      	ldr	r2, [pc, #244]	; (8006f74 <HAL_TIM_PWM_Stop+0x11c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00e      	beq.n	8006ea2 <HAL_TIM_PWM_Stop+0x4a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a3b      	ldr	r2, [pc, #236]	; (8006f78 <HAL_TIM_PWM_Stop+0x120>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d009      	beq.n	8006ea2 <HAL_TIM_PWM_Stop+0x4a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a3a      	ldr	r2, [pc, #232]	; (8006f7c <HAL_TIM_PWM_Stop+0x124>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d004      	beq.n	8006ea2 <HAL_TIM_PWM_Stop+0x4a>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a38      	ldr	r2, [pc, #224]	; (8006f80 <HAL_TIM_PWM_Stop+0x128>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d101      	bne.n	8006ea6 <HAL_TIM_PWM_Stop+0x4e>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <HAL_TIM_PWM_Stop+0x50>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d017      	beq.n	8006edc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6a1a      	ldr	r2, [r3, #32]
 8006eb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10f      	bne.n	8006edc <HAL_TIM_PWM_Stop+0x84>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a1a      	ldr	r2, [r3, #32]
 8006ec2:	f240 4344 	movw	r3, #1092	; 0x444
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d107      	bne.n	8006edc <HAL_TIM_PWM_Stop+0x84>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006eda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6a1a      	ldr	r2, [r3, #32]
 8006ee2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10f      	bne.n	8006f0c <HAL_TIM_PWM_Stop+0xb4>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6a1a      	ldr	r2, [r3, #32]
 8006ef2:	f240 4344 	movw	r3, #1092	; 0x444
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d107      	bne.n	8006f0c <HAL_TIM_PWM_Stop+0xb4>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0201 	bic.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d104      	bne.n	8006f1c <HAL_TIM_PWM_Stop+0xc4>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f1a:	e023      	b.n	8006f64 <HAL_TIM_PWM_Stop+0x10c>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d104      	bne.n	8006f2c <HAL_TIM_PWM_Stop+0xd4>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f2a:	e01b      	b.n	8006f64 <HAL_TIM_PWM_Stop+0x10c>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	d104      	bne.n	8006f3c <HAL_TIM_PWM_Stop+0xe4>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f3a:	e013      	b.n	8006f64 <HAL_TIM_PWM_Stop+0x10c>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b0c      	cmp	r3, #12
 8006f40:	d104      	bne.n	8006f4c <HAL_TIM_PWM_Stop+0xf4>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f4a:	e00b      	b.n	8006f64 <HAL_TIM_PWM_Stop+0x10c>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b10      	cmp	r3, #16
 8006f50:	d104      	bne.n	8006f5c <HAL_TIM_PWM_Stop+0x104>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f5a:	e003      	b.n	8006f64 <HAL_TIM_PWM_Stop+0x10c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40012c00 	.word	0x40012c00
 8006f74:	40013400 	.word	0x40013400
 8006f78:	40014000 	.word	0x40014000
 8006f7c:	40014400 	.word	0x40014400
 8006f80:	40014800 	.word	0x40014800

08006f84 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_TIM_PWM_Start_DMA+0x28>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	bf0c      	ite	eq
 8006fa4:	2301      	moveq	r3, #1
 8006fa6:	2300      	movne	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	e03c      	b.n	8007026 <HAL_TIM_PWM_Start_DMA+0xa2>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d109      	bne.n	8006fc6 <HAL_TIM_PWM_Start_DMA+0x42>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	e02f      	b.n	8007026 <HAL_TIM_PWM_Start_DMA+0xa2>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d109      	bne.n	8006fe0 <HAL_TIM_PWM_Start_DMA+0x5c>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2301      	moveq	r3, #1
 8006fda:	2300      	movne	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	e022      	b.n	8007026 <HAL_TIM_PWM_Start_DMA+0xa2>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b0c      	cmp	r3, #12
 8006fe4:	d109      	bne.n	8006ffa <HAL_TIM_PWM_Start_DMA+0x76>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	bf0c      	ite	eq
 8006ff2:	2301      	moveq	r3, #1
 8006ff4:	2300      	movne	r3, #0
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	e015      	b.n	8007026 <HAL_TIM_PWM_Start_DMA+0xa2>
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d109      	bne.n	8007014 <HAL_TIM_PWM_Start_DMA+0x90>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	bf0c      	ite	eq
 800700c:	2301      	moveq	r3, #1
 800700e:	2300      	movne	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	e008      	b.n	8007026 <HAL_TIM_PWM_Start_DMA+0xa2>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	bf0c      	ite	eq
 8007020:	2301      	moveq	r3, #1
 8007022:	2300      	movne	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800702a:	2302      	movs	r3, #2
 800702c:	e1a6      	b.n	800737c <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d109      	bne.n	8007048 <HAL_TIM_PWM_Start_DMA+0xc4>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	bf0c      	ite	eq
 8007040:	2301      	moveq	r3, #1
 8007042:	2300      	movne	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	e03c      	b.n	80070c2 <HAL_TIM_PWM_Start_DMA+0x13e>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b04      	cmp	r3, #4
 800704c:	d109      	bne.n	8007062 <HAL_TIM_PWM_Start_DMA+0xde>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b01      	cmp	r3, #1
 8007058:	bf0c      	ite	eq
 800705a:	2301      	moveq	r3, #1
 800705c:	2300      	movne	r3, #0
 800705e:	b2db      	uxtb	r3, r3
 8007060:	e02f      	b.n	80070c2 <HAL_TIM_PWM_Start_DMA+0x13e>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b08      	cmp	r3, #8
 8007066:	d109      	bne.n	800707c <HAL_TIM_PWM_Start_DMA+0xf8>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	bf0c      	ite	eq
 8007074:	2301      	moveq	r3, #1
 8007076:	2300      	movne	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	e022      	b.n	80070c2 <HAL_TIM_PWM_Start_DMA+0x13e>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b0c      	cmp	r3, #12
 8007080:	d109      	bne.n	8007096 <HAL_TIM_PWM_Start_DMA+0x112>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b01      	cmp	r3, #1
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	e015      	b.n	80070c2 <HAL_TIM_PWM_Start_DMA+0x13e>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b10      	cmp	r3, #16
 800709a:	d109      	bne.n	80070b0 <HAL_TIM_PWM_Start_DMA+0x12c>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	bf0c      	ite	eq
 80070a8:	2301      	moveq	r3, #1
 80070aa:	2300      	movne	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	e008      	b.n	80070c2 <HAL_TIM_PWM_Start_DMA+0x13e>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	bf0c      	ite	eq
 80070bc:	2301      	moveq	r3, #1
 80070be:	2300      	movne	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d034      	beq.n	8007130 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <HAL_TIM_PWM_Start_DMA+0x152>
 80070cc:	887b      	ldrh	r3, [r7, #2]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e152      	b.n	800737c <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <HAL_TIM_PWM_Start_DMA+0x162>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070e4:	e026      	b.n	8007134 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d104      	bne.n	80070f6 <HAL_TIM_PWM_Start_DMA+0x172>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f4:	e01e      	b.n	8007134 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d104      	bne.n	8007106 <HAL_TIM_PWM_Start_DMA+0x182>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007104:	e016      	b.n	8007134 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d104      	bne.n	8007116 <HAL_TIM_PWM_Start_DMA+0x192>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007114:	e00e      	b.n	8007134 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b10      	cmp	r3, #16
 800711a:	d104      	bne.n	8007126 <HAL_TIM_PWM_Start_DMA+0x1a2>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007124:	e006      	b.n	8007134 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2202      	movs	r2, #2
 800712a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800712e:	e001      	b.n	8007134 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e123      	b.n	800737c <HAL_TIM_PWM_Start_DMA+0x3f8>
  }

  switch (Channel)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b0c      	cmp	r3, #12
 8007138:	f200 80ae 	bhi.w	8007298 <HAL_TIM_PWM_Start_DMA+0x314>
 800713c:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 800713e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007142:	bf00      	nop
 8007144:	08007179 	.word	0x08007179
 8007148:	08007299 	.word	0x08007299
 800714c:	08007299 	.word	0x08007299
 8007150:	08007299 	.word	0x08007299
 8007154:	080071c1 	.word	0x080071c1
 8007158:	08007299 	.word	0x08007299
 800715c:	08007299 	.word	0x08007299
 8007160:	08007299 	.word	0x08007299
 8007164:	08007209 	.word	0x08007209
 8007168:	08007299 	.word	0x08007299
 800716c:	08007299 	.word	0x08007299
 8007170:	08007299 	.word	0x08007299
 8007174:	08007251 	.word	0x08007251
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	4a81      	ldr	r2, [pc, #516]	; (8007384 <HAL_TIM_PWM_Start_DMA+0x400>)
 800717e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	4a80      	ldr	r2, [pc, #512]	; (8007388 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007186:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	4a7f      	ldr	r2, [pc, #508]	; (800738c <HAL_TIM_PWM_Start_DMA+0x408>)
 800718e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3334      	adds	r3, #52	; 0x34
 800719c:	461a      	mov	r2, r3
 800719e:	887b      	ldrh	r3, [r7, #2]
 80071a0:	f7fc facc 	bl	800373c <HAL_DMA_Start_IT>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e0e6      	b.n	800737c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071bc:	60da      	str	r2, [r3, #12]
      break;
 80071be:	e06c      	b.n	800729a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	4a6f      	ldr	r2, [pc, #444]	; (8007384 <HAL_TIM_PWM_Start_DMA+0x400>)
 80071c6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	4a6e      	ldr	r2, [pc, #440]	; (8007388 <HAL_TIM_PWM_Start_DMA+0x404>)
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	4a6d      	ldr	r2, [pc, #436]	; (800738c <HAL_TIM_PWM_Start_DMA+0x408>)
 80071d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3338      	adds	r3, #56	; 0x38
 80071e4:	461a      	mov	r2, r3
 80071e6:	887b      	ldrh	r3, [r7, #2]
 80071e8:	f7fc faa8 	bl	800373c <HAL_DMA_Start_IT>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e0c2      	b.n	800737c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007204:	60da      	str	r2, [r3, #12]
      break;
 8007206:	e048      	b.n	800729a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	4a5d      	ldr	r2, [pc, #372]	; (8007384 <HAL_TIM_PWM_Start_DMA+0x400>)
 800720e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	4a5c      	ldr	r2, [pc, #368]	; (8007388 <HAL_TIM_PWM_Start_DMA+0x404>)
 8007216:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	4a5b      	ldr	r2, [pc, #364]	; (800738c <HAL_TIM_PWM_Start_DMA+0x408>)
 800721e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	333c      	adds	r3, #60	; 0x3c
 800722c:	461a      	mov	r2, r3
 800722e:	887b      	ldrh	r3, [r7, #2]
 8007230:	f7fc fa84 	bl	800373c <HAL_DMA_Start_IT>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e09e      	b.n	800737c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800724c:	60da      	str	r2, [r3, #12]
      break;
 800724e:	e024      	b.n	800729a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	4a4b      	ldr	r2, [pc, #300]	; (8007384 <HAL_TIM_PWM_Start_DMA+0x400>)
 8007256:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725c:	4a4a      	ldr	r2, [pc, #296]	; (8007388 <HAL_TIM_PWM_Start_DMA+0x404>)
 800725e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	4a49      	ldr	r2, [pc, #292]	; (800738c <HAL_TIM_PWM_Start_DMA+0x408>)
 8007266:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3340      	adds	r3, #64	; 0x40
 8007274:	461a      	mov	r2, r3
 8007276:	887b      	ldrh	r3, [r7, #2]
 8007278:	f7fc fa60 	bl	800373c <HAL_DMA_Start_IT>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e07a      	b.n	800737c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007294:	60da      	str	r2, [r3, #12]
      break;
 8007296:	e000      	b.n	800729a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8007298:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2201      	movs	r2, #1
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 f96c 	bl	8008580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a38      	ldr	r2, [pc, #224]	; (8007390 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d013      	beq.n	80072da <HAL_TIM_PWM_Start_DMA+0x356>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a37      	ldr	r2, [pc, #220]	; (8007394 <HAL_TIM_PWM_Start_DMA+0x410>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00e      	beq.n	80072da <HAL_TIM_PWM_Start_DMA+0x356>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a35      	ldr	r2, [pc, #212]	; (8007398 <HAL_TIM_PWM_Start_DMA+0x414>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d009      	beq.n	80072da <HAL_TIM_PWM_Start_DMA+0x356>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a34      	ldr	r2, [pc, #208]	; (800739c <HAL_TIM_PWM_Start_DMA+0x418>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d004      	beq.n	80072da <HAL_TIM_PWM_Start_DMA+0x356>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a32      	ldr	r2, [pc, #200]	; (80073a0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d101      	bne.n	80072de <HAL_TIM_PWM_Start_DMA+0x35a>
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <HAL_TIM_PWM_Start_DMA+0x35c>
 80072de:	2300      	movs	r3, #0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d007      	beq.n	80072f4 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a25      	ldr	r2, [pc, #148]	; (8007390 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d01d      	beq.n	800733a <HAL_TIM_PWM_Start_DMA+0x3b6>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007306:	d018      	beq.n	800733a <HAL_TIM_PWM_Start_DMA+0x3b6>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a25      	ldr	r2, [pc, #148]	; (80073a4 <HAL_TIM_PWM_Start_DMA+0x420>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <HAL_TIM_PWM_Start_DMA+0x3b6>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a24      	ldr	r2, [pc, #144]	; (80073a8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <HAL_TIM_PWM_Start_DMA+0x3b6>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a22      	ldr	r2, [pc, #136]	; (80073ac <HAL_TIM_PWM_Start_DMA+0x428>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d009      	beq.n	800733a <HAL_TIM_PWM_Start_DMA+0x3b6>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1a      	ldr	r2, [pc, #104]	; (8007394 <HAL_TIM_PWM_Start_DMA+0x410>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_TIM_PWM_Start_DMA+0x3b6>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a18      	ldr	r2, [pc, #96]	; (8007398 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d115      	bne.n	8007366 <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	4b1b      	ldr	r3, [pc, #108]	; (80073b0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007342:	4013      	ands	r3, r2
 8007344:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b06      	cmp	r3, #6
 800734a:	d015      	beq.n	8007378 <HAL_TIM_PWM_Start_DMA+0x3f4>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007352:	d011      	beq.n	8007378 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007364:	e008      	b.n	8007378 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0201 	orr.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e000      	b.n	800737a <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007378:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	08007c5d 	.word	0x08007c5d
 8007388:	08007d05 	.word	0x08007d05
 800738c:	08007bcb 	.word	0x08007bcb
 8007390:	40012c00 	.word	0x40012c00
 8007394:	40013400 	.word	0x40013400
 8007398:	40014000 	.word	0x40014000
 800739c:	40014400 	.word	0x40014400
 80073a0:	40014800 	.word	0x40014800
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800
 80073ac:	40000c00 	.word	0x40000c00
 80073b0:	00010007 	.word	0x00010007

080073b4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b0c      	cmp	r3, #12
 80073c2:	d855      	bhi.n	8007470 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80073c4:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <HAL_TIM_PWM_Stop_DMA+0x18>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	08007401 	.word	0x08007401
 80073d0:	08007471 	.word	0x08007471
 80073d4:	08007471 	.word	0x08007471
 80073d8:	08007471 	.word	0x08007471
 80073dc:	0800741d 	.word	0x0800741d
 80073e0:	08007471 	.word	0x08007471
 80073e4:	08007471 	.word	0x08007471
 80073e8:	08007471 	.word	0x08007471
 80073ec:	08007439 	.word	0x08007439
 80073f0:	08007471 	.word	0x08007471
 80073f4:	08007471 	.word	0x08007471
 80073f8:	08007471 	.word	0x08007471
 80073fc:	08007455 	.word	0x08007455
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800740e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	4618      	mov	r0, r3
 8007416:	f7fc f9f1 	bl	80037fc <HAL_DMA_Abort_IT>
      break;
 800741a:	e02a      	b.n	8007472 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800742a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007430:	4618      	mov	r0, r3
 8007432:	f7fc f9e3 	bl	80037fc <HAL_DMA_Abort_IT>
      break;
 8007436:	e01c      	b.n	8007472 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007446:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4618      	mov	r0, r3
 800744e:	f7fc f9d5 	bl	80037fc <HAL_DMA_Abort_IT>
      break;
 8007452:	e00e      	b.n	8007472 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007462:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	4618      	mov	r0, r3
 800746a:	f7fc f9c7 	bl	80037fc <HAL_DMA_Abort_IT>
      break;
 800746e:	e000      	b.n	8007472 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8007470:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2200      	movs	r2, #0
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f001 f880 	bl	8008580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a3e      	ldr	r2, [pc, #248]	; (8007580 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d013      	beq.n	80074b2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a3d      	ldr	r2, [pc, #244]	; (8007584 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00e      	beq.n	80074b2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a3b      	ldr	r2, [pc, #236]	; (8007588 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d009      	beq.n	80074b2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a3a      	ldr	r2, [pc, #232]	; (800758c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d004      	beq.n	80074b2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a38      	ldr	r2, [pc, #224]	; (8007590 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d101      	bne.n	80074b6 <HAL_TIM_PWM_Stop_DMA+0x102>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <HAL_TIM_PWM_Stop_DMA+0x104>
 80074b6:	2300      	movs	r3, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d017      	beq.n	80074ec <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6a1a      	ldr	r2, [r3, #32]
 80074c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80074c6:	4013      	ands	r3, r2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10f      	bne.n	80074ec <HAL_TIM_PWM_Stop_DMA+0x138>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6a1a      	ldr	r2, [r3, #32]
 80074d2:	f240 4344 	movw	r3, #1092	; 0x444
 80074d6:	4013      	ands	r3, r2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d107      	bne.n	80074ec <HAL_TIM_PWM_Stop_DMA+0x138>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80074f6:	4013      	ands	r3, r2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10f      	bne.n	800751c <HAL_TIM_PWM_Stop_DMA+0x168>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6a1a      	ldr	r2, [r3, #32]
 8007502:	f240 4344 	movw	r3, #1092	; 0x444
 8007506:	4013      	ands	r3, r2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d107      	bne.n	800751c <HAL_TIM_PWM_Stop_DMA+0x168>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0201 	bic.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d104      	bne.n	800752c <HAL_TIM_PWM_Stop_DMA+0x178>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800752a:	e023      	b.n	8007574 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b04      	cmp	r3, #4
 8007530:	d104      	bne.n	800753c <HAL_TIM_PWM_Stop_DMA+0x188>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800753a:	e01b      	b.n	8007574 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2b08      	cmp	r3, #8
 8007540:	d104      	bne.n	800754c <HAL_TIM_PWM_Stop_DMA+0x198>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800754a:	e013      	b.n	8007574 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b0c      	cmp	r3, #12
 8007550:	d104      	bne.n	800755c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800755a:	e00b      	b.n	8007574 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b10      	cmp	r3, #16
 8007560:	d104      	bne.n	800756c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800756a:	e003      	b.n	8007574 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40012c00 	.word	0x40012c00
 8007584:	40013400 	.word	0x40013400
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800

08007594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d122      	bne.n	80075f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d11b      	bne.n	80075f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f06f 0202 	mvn.w	r2, #2
 80075c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fad9 	bl	8007b8e <HAL_TIM_IC_CaptureCallback>
 80075dc:	e005      	b.n	80075ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 facb 	bl	8007b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7fb f9db 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f003 0304 	and.w	r3, r3, #4
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d122      	bne.n	8007644 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b04      	cmp	r3, #4
 800760a:	d11b      	bne.n	8007644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f06f 0204 	mvn.w	r2, #4
 8007614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2202      	movs	r2, #2
 800761a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 faaf 	bl	8007b8e <HAL_TIM_IC_CaptureCallback>
 8007630:	e005      	b.n	800763e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 faa1 	bl	8007b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7fb f9b1 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b08      	cmp	r3, #8
 8007650:	d122      	bne.n	8007698 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b08      	cmp	r3, #8
 800765e:	d11b      	bne.n	8007698 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0208 	mvn.w	r2, #8
 8007668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2204      	movs	r2, #4
 800766e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa85 	bl	8007b8e <HAL_TIM_IC_CaptureCallback>
 8007684:	e005      	b.n	8007692 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa77 	bl	8007b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7fb f987 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b10      	cmp	r3, #16
 80076a4:	d122      	bne.n	80076ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f003 0310 	and.w	r3, r3, #16
 80076b0:	2b10      	cmp	r3, #16
 80076b2:	d11b      	bne.n	80076ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f06f 0210 	mvn.w	r2, #16
 80076bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2208      	movs	r2, #8
 80076c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa5b 	bl	8007b8e <HAL_TIM_IC_CaptureCallback>
 80076d8:	e005      	b.n	80076e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa4d 	bl	8007b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7fb f95d 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d10e      	bne.n	8007718 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b01      	cmp	r3, #1
 8007706:	d107      	bne.n	8007718 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0201 	mvn.w	r2, #1
 8007710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa27 	bl	8007b66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007722:	2b80      	cmp	r3, #128	; 0x80
 8007724:	d10e      	bne.n	8007744 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007730:	2b80      	cmp	r3, #128	; 0x80
 8007732:	d107      	bne.n	8007744 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800773c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 ffd6 	bl	80086f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007752:	d10e      	bne.n	8007772 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775e:	2b80      	cmp	r3, #128	; 0x80
 8007760:	d107      	bne.n	8007772 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800776a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 ffc9 	bl	8008704 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d10e      	bne.n	800779e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d107      	bne.n	800779e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fa02 	bl	8007ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d10e      	bne.n	80077ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d107      	bne.n	80077ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f06f 0220 	mvn.w	r2, #32
 80077c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 ff89 	bl	80086dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80077ea:	2302      	movs	r3, #2
 80077ec:	e0fd      	b.n	80079ea <HAL_TIM_PWM_ConfigChannel+0x216>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b14      	cmp	r3, #20
 80077fa:	f200 80f0 	bhi.w	80079de <HAL_TIM_PWM_ConfigChannel+0x20a>
 80077fe:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007804:	08007859 	.word	0x08007859
 8007808:	080079df 	.word	0x080079df
 800780c:	080079df 	.word	0x080079df
 8007810:	080079df 	.word	0x080079df
 8007814:	08007899 	.word	0x08007899
 8007818:	080079df 	.word	0x080079df
 800781c:	080079df 	.word	0x080079df
 8007820:	080079df 	.word	0x080079df
 8007824:	080078db 	.word	0x080078db
 8007828:	080079df 	.word	0x080079df
 800782c:	080079df 	.word	0x080079df
 8007830:	080079df 	.word	0x080079df
 8007834:	0800791b 	.word	0x0800791b
 8007838:	080079df 	.word	0x080079df
 800783c:	080079df 	.word	0x080079df
 8007840:	080079df 	.word	0x080079df
 8007844:	0800795d 	.word	0x0800795d
 8007848:	080079df 	.word	0x080079df
 800784c:	080079df 	.word	0x080079df
 8007850:	080079df 	.word	0x080079df
 8007854:	0800799d 	.word	0x0800799d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68b9      	ldr	r1, [r7, #8]
 800785e:	4618      	mov	r0, r3
 8007860:	f000 fb1e 	bl	8007ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699a      	ldr	r2, [r3, #24]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0208 	orr.w	r2, r2, #8
 8007872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	699a      	ldr	r2, [r3, #24]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0204 	bic.w	r2, r2, #4
 8007882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6999      	ldr	r1, [r3, #24]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	691a      	ldr	r2, [r3, #16]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	619a      	str	r2, [r3, #24]
      break;
 8007896:	e0a3      	b.n	80079e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fb8e 	bl	8007fc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699a      	ldr	r2, [r3, #24]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6999      	ldr	r1, [r3, #24]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	021a      	lsls	r2, r3, #8
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	619a      	str	r2, [r3, #24]
      break;
 80078d8:	e082      	b.n	80079e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 fbf7 	bl	80080d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	69da      	ldr	r2, [r3, #28]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0208 	orr.w	r2, r2, #8
 80078f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69da      	ldr	r2, [r3, #28]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0204 	bic.w	r2, r2, #4
 8007904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69d9      	ldr	r1, [r3, #28]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	61da      	str	r2, [r3, #28]
      break;
 8007918:	e062      	b.n	80079e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68b9      	ldr	r1, [r7, #8]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fc5f 	bl	80081e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69da      	ldr	r2, [r3, #28]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	69d9      	ldr	r1, [r3, #28]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	021a      	lsls	r2, r3, #8
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	61da      	str	r2, [r3, #28]
      break;
 800795a:	e041      	b.n	80079e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fca8 	bl	80082b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0208 	orr.w	r2, r2, #8
 8007976:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0204 	bic.w	r2, r2, #4
 8007986:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	691a      	ldr	r2, [r3, #16]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800799a:	e021      	b.n	80079e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68b9      	ldr	r1, [r7, #8]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fcec 	bl	8008380 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	021a      	lsls	r2, r3, #8
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80079dc:	e000      	b.n	80079e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80079de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop

080079f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_TIM_ConfigClockSource+0x18>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e0a8      	b.n	8007b5e <HAL_TIM_ConfigClockSource+0x16a>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d067      	beq.n	8007b18 <HAL_TIM_ConfigClockSource+0x124>
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	d80b      	bhi.n	8007a64 <HAL_TIM_ConfigClockSource+0x70>
 8007a4c:	2b10      	cmp	r3, #16
 8007a4e:	d073      	beq.n	8007b38 <HAL_TIM_ConfigClockSource+0x144>
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d802      	bhi.n	8007a5a <HAL_TIM_ConfigClockSource+0x66>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d06f      	beq.n	8007b38 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007a58:	e078      	b.n	8007b4c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	d06c      	beq.n	8007b38 <HAL_TIM_ConfigClockSource+0x144>
 8007a5e:	2b30      	cmp	r3, #48	; 0x30
 8007a60:	d06a      	beq.n	8007b38 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007a62:	e073      	b.n	8007b4c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007a64:	2b70      	cmp	r3, #112	; 0x70
 8007a66:	d00d      	beq.n	8007a84 <HAL_TIM_ConfigClockSource+0x90>
 8007a68:	2b70      	cmp	r3, #112	; 0x70
 8007a6a:	d804      	bhi.n	8007a76 <HAL_TIM_ConfigClockSource+0x82>
 8007a6c:	2b50      	cmp	r3, #80	; 0x50
 8007a6e:	d033      	beq.n	8007ad8 <HAL_TIM_ConfigClockSource+0xe4>
 8007a70:	2b60      	cmp	r3, #96	; 0x60
 8007a72:	d041      	beq.n	8007af8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007a74:	e06a      	b.n	8007b4c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7a:	d066      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x156>
 8007a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a80:	d017      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007a82:	e063      	b.n	8007b4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	6899      	ldr	r1, [r3, #8]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f000 fd54 	bl	8008540 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007aa6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	609a      	str	r2, [r3, #8]
      break;
 8007ab0:	e04c      	b.n	8007b4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	6899      	ldr	r1, [r3, #8]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f000 fd3d 	bl	8008540 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ad4:	609a      	str	r2, [r3, #8]
      break;
 8007ad6:	e039      	b.n	8007b4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6818      	ldr	r0, [r3, #0]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	6859      	ldr	r1, [r3, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	f000 fcb1 	bl	800844c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2150      	movs	r1, #80	; 0x50
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fd0a 	bl	800850a <TIM_ITRx_SetConfig>
      break;
 8007af6:	e029      	b.n	8007b4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	6859      	ldr	r1, [r3, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	461a      	mov	r2, r3
 8007b06:	f000 fcd0 	bl	80084aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2160      	movs	r1, #96	; 0x60
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fcfa 	bl	800850a <TIM_ITRx_SetConfig>
      break;
 8007b16:	e019      	b.n	8007b4c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	6859      	ldr	r1, [r3, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	461a      	mov	r2, r3
 8007b26:	f000 fc91 	bl	800844c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2140      	movs	r1, #64	; 0x40
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fcea 	bl	800850a <TIM_ITRx_SetConfig>
      break;
 8007b36:	e009      	b.n	8007b4c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4619      	mov	r1, r3
 8007b42:	4610      	mov	r0, r2
 8007b44:	f000 fce1 	bl	800850a <TIM_ITRx_SetConfig>
        break;
 8007b48:	e000      	b.n	8007b4c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d107      	bne.n	8007bf2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bf0:	e02a      	b.n	8007c48 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d107      	bne.n	8007c0c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c0a:	e01d      	b.n	8007c48 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d107      	bne.n	8007c26 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2204      	movs	r2, #4
 8007c1a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c24:	e010      	b.n	8007c48 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d107      	bne.n	8007c40 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2208      	movs	r2, #8
 8007c34:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c3e:	e003      	b.n	8007c48 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff ffb4 	bl	8007bb6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	771a      	strb	r2, [r3, #28]
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d10b      	bne.n	8007c8c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d136      	bne.n	8007cf0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c8a:	e031      	b.n	8007cf0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d10b      	bne.n	8007cae <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d125      	bne.n	8007cf0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cac:	e020      	b.n	8007cf0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d10b      	bne.n	8007cd0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d114      	bne.n	8007cf0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cce:	e00f      	b.n	8007cf0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d10a      	bne.n	8007cf0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2208      	movs	r2, #8
 8007cde:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d103      	bne.n	8007cf0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f7fa fe55 	bl	80029a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	771a      	strb	r2, [r3, #28]
}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d103      	bne.n	8007d24 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	771a      	strb	r2, [r3, #28]
 8007d22:	e019      	b.n	8007d58 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d103      	bne.n	8007d36 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2202      	movs	r2, #2
 8007d32:	771a      	strb	r2, [r3, #28]
 8007d34:	e010      	b.n	8007d58 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d103      	bne.n	8007d48 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2204      	movs	r2, #4
 8007d44:	771a      	strb	r2, [r3, #28]
 8007d46:	e007      	b.n	8007d58 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d102      	bne.n	8007d58 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2208      	movs	r2, #8
 8007d56:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7fa fda3 	bl	80028a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	771a      	strb	r2, [r3, #28]
}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a40      	ldr	r2, [pc, #256]	; (8007e80 <TIM_Base_SetConfig+0x114>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d013      	beq.n	8007dac <TIM_Base_SetConfig+0x40>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8a:	d00f      	beq.n	8007dac <TIM_Base_SetConfig+0x40>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a3d      	ldr	r2, [pc, #244]	; (8007e84 <TIM_Base_SetConfig+0x118>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00b      	beq.n	8007dac <TIM_Base_SetConfig+0x40>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a3c      	ldr	r2, [pc, #240]	; (8007e88 <TIM_Base_SetConfig+0x11c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d007      	beq.n	8007dac <TIM_Base_SetConfig+0x40>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a3b      	ldr	r2, [pc, #236]	; (8007e8c <TIM_Base_SetConfig+0x120>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d003      	beq.n	8007dac <TIM_Base_SetConfig+0x40>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a3a      	ldr	r2, [pc, #232]	; (8007e90 <TIM_Base_SetConfig+0x124>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d108      	bne.n	8007dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a2f      	ldr	r2, [pc, #188]	; (8007e80 <TIM_Base_SetConfig+0x114>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d01f      	beq.n	8007e06 <TIM_Base_SetConfig+0x9a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dcc:	d01b      	beq.n	8007e06 <TIM_Base_SetConfig+0x9a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a2c      	ldr	r2, [pc, #176]	; (8007e84 <TIM_Base_SetConfig+0x118>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d017      	beq.n	8007e06 <TIM_Base_SetConfig+0x9a>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a2b      	ldr	r2, [pc, #172]	; (8007e88 <TIM_Base_SetConfig+0x11c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d013      	beq.n	8007e06 <TIM_Base_SetConfig+0x9a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a2a      	ldr	r2, [pc, #168]	; (8007e8c <TIM_Base_SetConfig+0x120>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d00f      	beq.n	8007e06 <TIM_Base_SetConfig+0x9a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a29      	ldr	r2, [pc, #164]	; (8007e90 <TIM_Base_SetConfig+0x124>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d00b      	beq.n	8007e06 <TIM_Base_SetConfig+0x9a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a28      	ldr	r2, [pc, #160]	; (8007e94 <TIM_Base_SetConfig+0x128>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d007      	beq.n	8007e06 <TIM_Base_SetConfig+0x9a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a27      	ldr	r2, [pc, #156]	; (8007e98 <TIM_Base_SetConfig+0x12c>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d003      	beq.n	8007e06 <TIM_Base_SetConfig+0x9a>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a26      	ldr	r2, [pc, #152]	; (8007e9c <TIM_Base_SetConfig+0x130>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d108      	bne.n	8007e18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a10      	ldr	r2, [pc, #64]	; (8007e80 <TIM_Base_SetConfig+0x114>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d00f      	beq.n	8007e64 <TIM_Base_SetConfig+0xf8>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a12      	ldr	r2, [pc, #72]	; (8007e90 <TIM_Base_SetConfig+0x124>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00b      	beq.n	8007e64 <TIM_Base_SetConfig+0xf8>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a11      	ldr	r2, [pc, #68]	; (8007e94 <TIM_Base_SetConfig+0x128>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d007      	beq.n	8007e64 <TIM_Base_SetConfig+0xf8>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a10      	ldr	r2, [pc, #64]	; (8007e98 <TIM_Base_SetConfig+0x12c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d003      	beq.n	8007e64 <TIM_Base_SetConfig+0xf8>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a0f      	ldr	r2, [pc, #60]	; (8007e9c <TIM_Base_SetConfig+0x130>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d103      	bne.n	8007e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	615a      	str	r2, [r3, #20]
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40000400 	.word	0x40000400
 8007e88:	40000800 	.word	0x40000800
 8007e8c:	40000c00 	.word	0x40000c00
 8007e90:	40013400 	.word	0x40013400
 8007e94:	40014000 	.word	0x40014000
 8007e98:	40014400 	.word	0x40014400
 8007e9c:	40014800 	.word	0x40014800

08007ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f023 0201 	bic.w	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f023 0302 	bic.w	r3, r3, #2
 8007eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a2c      	ldr	r2, [pc, #176]	; (8007fac <TIM_OC1_SetConfig+0x10c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00f      	beq.n	8007f20 <TIM_OC1_SetConfig+0x80>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a2b      	ldr	r2, [pc, #172]	; (8007fb0 <TIM_OC1_SetConfig+0x110>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <TIM_OC1_SetConfig+0x80>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a2a      	ldr	r2, [pc, #168]	; (8007fb4 <TIM_OC1_SetConfig+0x114>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <TIM_OC1_SetConfig+0x80>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a29      	ldr	r2, [pc, #164]	; (8007fb8 <TIM_OC1_SetConfig+0x118>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_OC1_SetConfig+0x80>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a28      	ldr	r2, [pc, #160]	; (8007fbc <TIM_OC1_SetConfig+0x11c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d10c      	bne.n	8007f3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f023 0308 	bic.w	r3, r3, #8
 8007f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f023 0304 	bic.w	r3, r3, #4
 8007f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a1b      	ldr	r2, [pc, #108]	; (8007fac <TIM_OC1_SetConfig+0x10c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00f      	beq.n	8007f62 <TIM_OC1_SetConfig+0xc2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a1a      	ldr	r2, [pc, #104]	; (8007fb0 <TIM_OC1_SetConfig+0x110>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00b      	beq.n	8007f62 <TIM_OC1_SetConfig+0xc2>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a19      	ldr	r2, [pc, #100]	; (8007fb4 <TIM_OC1_SetConfig+0x114>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d007      	beq.n	8007f62 <TIM_OC1_SetConfig+0xc2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a18      	ldr	r2, [pc, #96]	; (8007fb8 <TIM_OC1_SetConfig+0x118>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d003      	beq.n	8007f62 <TIM_OC1_SetConfig+0xc2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a17      	ldr	r2, [pc, #92]	; (8007fbc <TIM_OC1_SetConfig+0x11c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d111      	bne.n	8007f86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	621a      	str	r2, [r3, #32]
}
 8007fa0:	bf00      	nop
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	40012c00 	.word	0x40012c00
 8007fb0:	40013400 	.word	0x40013400
 8007fb4:	40014000 	.word	0x40014000
 8007fb8:	40014400 	.word	0x40014400
 8007fbc:	40014800 	.word	0x40014800

08007fc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	f023 0210 	bic.w	r2, r3, #16
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f023 0320 	bic.w	r3, r3, #32
 800800e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a28      	ldr	r2, [pc, #160]	; (80080c0 <TIM_OC2_SetConfig+0x100>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d003      	beq.n	800802c <TIM_OC2_SetConfig+0x6c>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a27      	ldr	r2, [pc, #156]	; (80080c4 <TIM_OC2_SetConfig+0x104>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d10d      	bne.n	8008048 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <TIM_OC2_SetConfig+0x100>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00f      	beq.n	8008070 <TIM_OC2_SetConfig+0xb0>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1c      	ldr	r2, [pc, #112]	; (80080c4 <TIM_OC2_SetConfig+0x104>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00b      	beq.n	8008070 <TIM_OC2_SetConfig+0xb0>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a1b      	ldr	r2, [pc, #108]	; (80080c8 <TIM_OC2_SetConfig+0x108>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d007      	beq.n	8008070 <TIM_OC2_SetConfig+0xb0>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a1a      	ldr	r2, [pc, #104]	; (80080cc <TIM_OC2_SetConfig+0x10c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <TIM_OC2_SetConfig+0xb0>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a19      	ldr	r2, [pc, #100]	; (80080d0 <TIM_OC2_SetConfig+0x110>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d113      	bne.n	8008098 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800807e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4313      	orrs	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	621a      	str	r2, [r3, #32]
}
 80080b2:	bf00      	nop
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40012c00 	.word	0x40012c00
 80080c4:	40013400 	.word	0x40013400
 80080c8:	40014000 	.word	0x40014000
 80080cc:	40014400 	.word	0x40014400
 80080d0:	40014800 	.word	0x40014800

080080d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0303 	bic.w	r3, r3, #3
 800810e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	021b      	lsls	r3, r3, #8
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	4313      	orrs	r3, r2
 800812c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a27      	ldr	r2, [pc, #156]	; (80081d0 <TIM_OC3_SetConfig+0xfc>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d003      	beq.n	800813e <TIM_OC3_SetConfig+0x6a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a26      	ldr	r2, [pc, #152]	; (80081d4 <TIM_OC3_SetConfig+0x100>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d10d      	bne.n	800815a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008144:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a1c      	ldr	r2, [pc, #112]	; (80081d0 <TIM_OC3_SetConfig+0xfc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00f      	beq.n	8008182 <TIM_OC3_SetConfig+0xae>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a1b      	ldr	r2, [pc, #108]	; (80081d4 <TIM_OC3_SetConfig+0x100>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00b      	beq.n	8008182 <TIM_OC3_SetConfig+0xae>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a1a      	ldr	r2, [pc, #104]	; (80081d8 <TIM_OC3_SetConfig+0x104>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d007      	beq.n	8008182 <TIM_OC3_SetConfig+0xae>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a19      	ldr	r2, [pc, #100]	; (80081dc <TIM_OC3_SetConfig+0x108>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d003      	beq.n	8008182 <TIM_OC3_SetConfig+0xae>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a18      	ldr	r2, [pc, #96]	; (80081e0 <TIM_OC3_SetConfig+0x10c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d113      	bne.n	80081aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4313      	orrs	r3, r2
 800819c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	011b      	lsls	r3, r3, #4
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	621a      	str	r2, [r3, #32]
}
 80081c4:	bf00      	nop
 80081c6:	371c      	adds	r7, #28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	40012c00 	.word	0x40012c00
 80081d4:	40013400 	.word	0x40013400
 80081d8:	40014000 	.word	0x40014000
 80081dc:	40014400 	.word	0x40014400
 80081e0:	40014800 	.word	0x40014800

080081e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800821e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	031b      	lsls	r3, r3, #12
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a18      	ldr	r2, [pc, #96]	; (80082a4 <TIM_OC4_SetConfig+0xc0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d00f      	beq.n	8008268 <TIM_OC4_SetConfig+0x84>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a17      	ldr	r2, [pc, #92]	; (80082a8 <TIM_OC4_SetConfig+0xc4>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00b      	beq.n	8008268 <TIM_OC4_SetConfig+0x84>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a16      	ldr	r2, [pc, #88]	; (80082ac <TIM_OC4_SetConfig+0xc8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d007      	beq.n	8008268 <TIM_OC4_SetConfig+0x84>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a15      	ldr	r2, [pc, #84]	; (80082b0 <TIM_OC4_SetConfig+0xcc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d003      	beq.n	8008268 <TIM_OC4_SetConfig+0x84>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a14      	ldr	r2, [pc, #80]	; (80082b4 <TIM_OC4_SetConfig+0xd0>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d109      	bne.n	800827c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800826e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	019b      	lsls	r3, r3, #6
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	4313      	orrs	r3, r2
 800827a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	621a      	str	r2, [r3, #32]
}
 8008296:	bf00      	nop
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	40012c00 	.word	0x40012c00
 80082a8:	40013400 	.word	0x40013400
 80082ac:	40014000 	.word	0x40014000
 80082b0:	40014400 	.word	0x40014400
 80082b4:	40014800 	.word	0x40014800

080082b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	041b      	lsls	r3, r3, #16
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a17      	ldr	r2, [pc, #92]	; (800836c <TIM_OC5_SetConfig+0xb4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00f      	beq.n	8008332 <TIM_OC5_SetConfig+0x7a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a16      	ldr	r2, [pc, #88]	; (8008370 <TIM_OC5_SetConfig+0xb8>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00b      	beq.n	8008332 <TIM_OC5_SetConfig+0x7a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a15      	ldr	r2, [pc, #84]	; (8008374 <TIM_OC5_SetConfig+0xbc>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d007      	beq.n	8008332 <TIM_OC5_SetConfig+0x7a>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a14      	ldr	r2, [pc, #80]	; (8008378 <TIM_OC5_SetConfig+0xc0>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d003      	beq.n	8008332 <TIM_OC5_SetConfig+0x7a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a13      	ldr	r2, [pc, #76]	; (800837c <TIM_OC5_SetConfig+0xc4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d109      	bne.n	8008346 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008338:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	4313      	orrs	r3, r2
 8008344:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	621a      	str	r2, [r3, #32]
}
 8008360:	bf00      	nop
 8008362:	371c      	adds	r7, #28
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	40012c00 	.word	0x40012c00
 8008370:	40013400 	.word	0x40013400
 8008374:	40014000 	.word	0x40014000
 8008378:	40014400 	.word	0x40014400
 800837c:	40014800 	.word	0x40014800

08008380 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	051b      	lsls	r3, r3, #20
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a18      	ldr	r2, [pc, #96]	; (8008438 <TIM_OC6_SetConfig+0xb8>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00f      	beq.n	80083fc <TIM_OC6_SetConfig+0x7c>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a17      	ldr	r2, [pc, #92]	; (800843c <TIM_OC6_SetConfig+0xbc>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00b      	beq.n	80083fc <TIM_OC6_SetConfig+0x7c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a16      	ldr	r2, [pc, #88]	; (8008440 <TIM_OC6_SetConfig+0xc0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d007      	beq.n	80083fc <TIM_OC6_SetConfig+0x7c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a15      	ldr	r2, [pc, #84]	; (8008444 <TIM_OC6_SetConfig+0xc4>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_OC6_SetConfig+0x7c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a14      	ldr	r2, [pc, #80]	; (8008448 <TIM_OC6_SetConfig+0xc8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d109      	bne.n	8008410 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008402:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	029b      	lsls	r3, r3, #10
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	621a      	str	r2, [r3, #32]
}
 800842a:	bf00      	nop
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	40012c00 	.word	0x40012c00
 800843c:	40013400 	.word	0x40013400
 8008440:	40014000 	.word	0x40014000
 8008444:	40014400 	.word	0x40014400
 8008448:	40014800 	.word	0x40014800

0800844c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	f023 0201 	bic.w	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f023 030a 	bic.w	r3, r3, #10
 8008488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	621a      	str	r2, [r3, #32]
}
 800849e:	bf00      	nop
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b087      	sub	sp, #28
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	f023 0210 	bic.w	r2, r3, #16
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	031b      	lsls	r3, r3, #12
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	621a      	str	r2, [r3, #32]
}
 80084fe:	bf00      	nop
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800850a:	b480      	push	{r7}
 800850c:	b085      	sub	sp, #20
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4313      	orrs	r3, r2
 8008528:	f043 0307 	orr.w	r3, r3, #7
 800852c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	609a      	str	r2, [r3, #8]
}
 8008534:	bf00      	nop
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800855a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	021a      	lsls	r2, r3, #8
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	431a      	orrs	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4313      	orrs	r3, r2
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	609a      	str	r2, [r3, #8]
}
 8008574:	bf00      	nop
 8008576:	371c      	adds	r7, #28
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f003 031f 	and.w	r3, r3, #31
 8008592:	2201      	movs	r2, #1
 8008594:	fa02 f303 	lsl.w	r3, r2, r3
 8008598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a1a      	ldr	r2, [r3, #32]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	43db      	mvns	r3, r3
 80085a2:	401a      	ands	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6a1a      	ldr	r2, [r3, #32]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f003 031f 	and.w	r3, r3, #31
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	fa01 f303 	lsl.w	r3, r1, r3
 80085b8:	431a      	orrs	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	621a      	str	r2, [r3, #32]
}
 80085be:	bf00      	nop
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
	...

080085cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d101      	bne.n	80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085e0:	2302      	movs	r3, #2
 80085e2:	e068      	b.n	80086b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a2e      	ldr	r2, [pc, #184]	; (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d004      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a2d      	ldr	r2, [pc, #180]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d108      	bne.n	800862a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800861e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	4313      	orrs	r3, r2
 8008628:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	4313      	orrs	r3, r2
 800863a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1e      	ldr	r2, [pc, #120]	; (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d01d      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008656:	d018      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a1b      	ldr	r2, [pc, #108]	; (80086cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d013      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a1a      	ldr	r2, [pc, #104]	; (80086d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00e      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a18      	ldr	r2, [pc, #96]	; (80086d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d009      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a13      	ldr	r2, [pc, #76]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d004      	beq.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a14      	ldr	r2, [pc, #80]	; (80086d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d10c      	bne.n	80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	4313      	orrs	r3, r2
 800869a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	40012c00 	.word	0x40012c00
 80086c8:	40013400 	.word	0x40013400
 80086cc:	40000400 	.word	0x40000400
 80086d0:	40000800 	.word	0x40000800
 80086d4:	40000c00 	.word	0x40000c00
 80086d8:	40014000 	.word	0x40014000

080086dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e040      	b.n	80087ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7fa fb54 	bl	8002de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2224      	movs	r2, #36	; 0x24
 8008744:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0201 	bic.w	r2, r2, #1
 8008754:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f8c0 	bl	80088dc <UART_SetConfig>
 800875c:	4603      	mov	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d101      	bne.n	8008766 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e022      	b.n	80087ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fb3e 	bl	8008df0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0201 	orr.w	r2, r2, #1
 80087a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fbc5 	bl	8008f34 <UART_CheckIdleState>
 80087aa:	4603      	mov	r3, r0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	; 0x28
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	4613      	mov	r3, r2
 80087c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	f040 8081 	bne.w	80088d0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <HAL_UART_Transmit+0x26>
 80087d4:	88fb      	ldrh	r3, [r7, #6]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e079      	b.n	80088d2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d101      	bne.n	80087ec <HAL_UART_Transmit+0x38>
 80087e8:	2302      	movs	r3, #2
 80087ea:	e072      	b.n	80088d2 <HAL_UART_Transmit+0x11e>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2221      	movs	r2, #33	; 0x21
 80087fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008800:	f7fa fd74 	bl	80032ec <HAL_GetTick>
 8008804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	88fa      	ldrh	r2, [r7, #6]
 800880a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	88fa      	ldrh	r2, [r7, #6]
 8008812:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800881e:	d108      	bne.n	8008832 <HAL_UART_Transmit+0x7e>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d104      	bne.n	8008832 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008828:	2300      	movs	r3, #0
 800882a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	61bb      	str	r3, [r7, #24]
 8008830:	e003      	b.n	800883a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008842:	e02d      	b.n	80088a0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2200      	movs	r2, #0
 800884c:	2180      	movs	r1, #128	; 0x80
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 fbb5 	bl	8008fbe <UART_WaitOnFlagUntilTimeout>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e039      	b.n	80088d2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10b      	bne.n	800887c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	881a      	ldrh	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008870:	b292      	uxth	r2, r2
 8008872:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	3302      	adds	r3, #2
 8008878:	61bb      	str	r3, [r7, #24]
 800887a:	e008      	b.n	800888e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	781a      	ldrb	r2, [r3, #0]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	b292      	uxth	r2, r2
 8008886:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	3301      	adds	r3, #1
 800888c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008894:	b29b      	uxth	r3, r3
 8008896:	3b01      	subs	r3, #1
 8008898:	b29a      	uxth	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1cb      	bne.n	8008844 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2200      	movs	r2, #0
 80088b4:	2140      	movs	r1, #64	; 0x40
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 fb81 	bl	8008fbe <UART_WaitOnFlagUntilTimeout>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e005      	b.n	80088d2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2220      	movs	r2, #32
 80088ca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	e000      	b.n	80088d2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80088d0:	2302      	movs	r3, #2
  }
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088dc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80088e0:	b088      	sub	sp, #32
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	431a      	orrs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	4313      	orrs	r3, r2
 8008900:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	4bac      	ldr	r3, [pc, #688]	; (8008bbc <UART_SetConfig+0x2e0>)
 800890a:	4013      	ands	r3, r2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6812      	ldr	r2, [r2, #0]
 8008910:	69f9      	ldr	r1, [r7, #28]
 8008912:	430b      	orrs	r3, r1
 8008914:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68da      	ldr	r2, [r3, #12]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4aa2      	ldr	r2, [pc, #648]	; (8008bc0 <UART_SetConfig+0x2e4>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d004      	beq.n	8008946 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a1b      	ldr	r3, [r3, #32]
 8008940:	69fa      	ldr	r2, [r7, #28]
 8008942:	4313      	orrs	r3, r2
 8008944:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	69fa      	ldr	r2, [r7, #28]
 8008956:	430a      	orrs	r2, r1
 8008958:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a99      	ldr	r2, [pc, #612]	; (8008bc4 <UART_SetConfig+0x2e8>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d121      	bne.n	80089a8 <UART_SetConfig+0xcc>
 8008964:	4b98      	ldr	r3, [pc, #608]	; (8008bc8 <UART_SetConfig+0x2ec>)
 8008966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	2b03      	cmp	r3, #3
 8008970:	d816      	bhi.n	80089a0 <UART_SetConfig+0xc4>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <UART_SetConfig+0x9c>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	08008989 	.word	0x08008989
 800897c:	08008995 	.word	0x08008995
 8008980:	0800898f 	.word	0x0800898f
 8008984:	0800899b 	.word	0x0800899b
 8008988:	2301      	movs	r3, #1
 800898a:	76fb      	strb	r3, [r7, #27]
 800898c:	e0e8      	b.n	8008b60 <UART_SetConfig+0x284>
 800898e:	2302      	movs	r3, #2
 8008990:	76fb      	strb	r3, [r7, #27]
 8008992:	e0e5      	b.n	8008b60 <UART_SetConfig+0x284>
 8008994:	2304      	movs	r3, #4
 8008996:	76fb      	strb	r3, [r7, #27]
 8008998:	e0e2      	b.n	8008b60 <UART_SetConfig+0x284>
 800899a:	2308      	movs	r3, #8
 800899c:	76fb      	strb	r3, [r7, #27]
 800899e:	e0df      	b.n	8008b60 <UART_SetConfig+0x284>
 80089a0:	2310      	movs	r3, #16
 80089a2:	76fb      	strb	r3, [r7, #27]
 80089a4:	bf00      	nop
 80089a6:	e0db      	b.n	8008b60 <UART_SetConfig+0x284>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a87      	ldr	r2, [pc, #540]	; (8008bcc <UART_SetConfig+0x2f0>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d134      	bne.n	8008a1c <UART_SetConfig+0x140>
 80089b2:	4b85      	ldr	r3, [pc, #532]	; (8008bc8 <UART_SetConfig+0x2ec>)
 80089b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b8:	f003 030c 	and.w	r3, r3, #12
 80089bc:	2b0c      	cmp	r3, #12
 80089be:	d829      	bhi.n	8008a14 <UART_SetConfig+0x138>
 80089c0:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <UART_SetConfig+0xec>)
 80089c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c6:	bf00      	nop
 80089c8:	080089fd 	.word	0x080089fd
 80089cc:	08008a15 	.word	0x08008a15
 80089d0:	08008a15 	.word	0x08008a15
 80089d4:	08008a15 	.word	0x08008a15
 80089d8:	08008a09 	.word	0x08008a09
 80089dc:	08008a15 	.word	0x08008a15
 80089e0:	08008a15 	.word	0x08008a15
 80089e4:	08008a15 	.word	0x08008a15
 80089e8:	08008a03 	.word	0x08008a03
 80089ec:	08008a15 	.word	0x08008a15
 80089f0:	08008a15 	.word	0x08008a15
 80089f4:	08008a15 	.word	0x08008a15
 80089f8:	08008a0f 	.word	0x08008a0f
 80089fc:	2300      	movs	r3, #0
 80089fe:	76fb      	strb	r3, [r7, #27]
 8008a00:	e0ae      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a02:	2302      	movs	r3, #2
 8008a04:	76fb      	strb	r3, [r7, #27]
 8008a06:	e0ab      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a08:	2304      	movs	r3, #4
 8008a0a:	76fb      	strb	r3, [r7, #27]
 8008a0c:	e0a8      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a0e:	2308      	movs	r3, #8
 8008a10:	76fb      	strb	r3, [r7, #27]
 8008a12:	e0a5      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a14:	2310      	movs	r3, #16
 8008a16:	76fb      	strb	r3, [r7, #27]
 8008a18:	bf00      	nop
 8008a1a:	e0a1      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a6b      	ldr	r2, [pc, #428]	; (8008bd0 <UART_SetConfig+0x2f4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d120      	bne.n	8008a68 <UART_SetConfig+0x18c>
 8008a26:	4b68      	ldr	r3, [pc, #416]	; (8008bc8 <UART_SetConfig+0x2ec>)
 8008a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008a30:	2b10      	cmp	r3, #16
 8008a32:	d00f      	beq.n	8008a54 <UART_SetConfig+0x178>
 8008a34:	2b10      	cmp	r3, #16
 8008a36:	d802      	bhi.n	8008a3e <UART_SetConfig+0x162>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <UART_SetConfig+0x16c>
 8008a3c:	e010      	b.n	8008a60 <UART_SetConfig+0x184>
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	d005      	beq.n	8008a4e <UART_SetConfig+0x172>
 8008a42:	2b30      	cmp	r3, #48	; 0x30
 8008a44:	d009      	beq.n	8008a5a <UART_SetConfig+0x17e>
 8008a46:	e00b      	b.n	8008a60 <UART_SetConfig+0x184>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	76fb      	strb	r3, [r7, #27]
 8008a4c:	e088      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a4e:	2302      	movs	r3, #2
 8008a50:	76fb      	strb	r3, [r7, #27]
 8008a52:	e085      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a54:	2304      	movs	r3, #4
 8008a56:	76fb      	strb	r3, [r7, #27]
 8008a58:	e082      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a5a:	2308      	movs	r3, #8
 8008a5c:	76fb      	strb	r3, [r7, #27]
 8008a5e:	e07f      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a60:	2310      	movs	r3, #16
 8008a62:	76fb      	strb	r3, [r7, #27]
 8008a64:	bf00      	nop
 8008a66:	e07b      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a59      	ldr	r2, [pc, #356]	; (8008bd4 <UART_SetConfig+0x2f8>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d120      	bne.n	8008ab4 <UART_SetConfig+0x1d8>
 8008a72:	4b55      	ldr	r3, [pc, #340]	; (8008bc8 <UART_SetConfig+0x2ec>)
 8008a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008a7c:	2b40      	cmp	r3, #64	; 0x40
 8008a7e:	d00f      	beq.n	8008aa0 <UART_SetConfig+0x1c4>
 8008a80:	2b40      	cmp	r3, #64	; 0x40
 8008a82:	d802      	bhi.n	8008a8a <UART_SetConfig+0x1ae>
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <UART_SetConfig+0x1b8>
 8008a88:	e010      	b.n	8008aac <UART_SetConfig+0x1d0>
 8008a8a:	2b80      	cmp	r3, #128	; 0x80
 8008a8c:	d005      	beq.n	8008a9a <UART_SetConfig+0x1be>
 8008a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8008a90:	d009      	beq.n	8008aa6 <UART_SetConfig+0x1ca>
 8008a92:	e00b      	b.n	8008aac <UART_SetConfig+0x1d0>
 8008a94:	2300      	movs	r3, #0
 8008a96:	76fb      	strb	r3, [r7, #27]
 8008a98:	e062      	b.n	8008b60 <UART_SetConfig+0x284>
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	76fb      	strb	r3, [r7, #27]
 8008a9e:	e05f      	b.n	8008b60 <UART_SetConfig+0x284>
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	76fb      	strb	r3, [r7, #27]
 8008aa4:	e05c      	b.n	8008b60 <UART_SetConfig+0x284>
 8008aa6:	2308      	movs	r3, #8
 8008aa8:	76fb      	strb	r3, [r7, #27]
 8008aaa:	e059      	b.n	8008b60 <UART_SetConfig+0x284>
 8008aac:	2310      	movs	r3, #16
 8008aae:	76fb      	strb	r3, [r7, #27]
 8008ab0:	bf00      	nop
 8008ab2:	e055      	b.n	8008b60 <UART_SetConfig+0x284>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a47      	ldr	r2, [pc, #284]	; (8008bd8 <UART_SetConfig+0x2fc>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d124      	bne.n	8008b08 <UART_SetConfig+0x22c>
 8008abe:	4b42      	ldr	r3, [pc, #264]	; (8008bc8 <UART_SetConfig+0x2ec>)
 8008ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008acc:	d012      	beq.n	8008af4 <UART_SetConfig+0x218>
 8008ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad2:	d802      	bhi.n	8008ada <UART_SetConfig+0x1fe>
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <UART_SetConfig+0x20c>
 8008ad8:	e012      	b.n	8008b00 <UART_SetConfig+0x224>
 8008ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ade:	d006      	beq.n	8008aee <UART_SetConfig+0x212>
 8008ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ae4:	d009      	beq.n	8008afa <UART_SetConfig+0x21e>
 8008ae6:	e00b      	b.n	8008b00 <UART_SetConfig+0x224>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	76fb      	strb	r3, [r7, #27]
 8008aec:	e038      	b.n	8008b60 <UART_SetConfig+0x284>
 8008aee:	2302      	movs	r3, #2
 8008af0:	76fb      	strb	r3, [r7, #27]
 8008af2:	e035      	b.n	8008b60 <UART_SetConfig+0x284>
 8008af4:	2304      	movs	r3, #4
 8008af6:	76fb      	strb	r3, [r7, #27]
 8008af8:	e032      	b.n	8008b60 <UART_SetConfig+0x284>
 8008afa:	2308      	movs	r3, #8
 8008afc:	76fb      	strb	r3, [r7, #27]
 8008afe:	e02f      	b.n	8008b60 <UART_SetConfig+0x284>
 8008b00:	2310      	movs	r3, #16
 8008b02:	76fb      	strb	r3, [r7, #27]
 8008b04:	bf00      	nop
 8008b06:	e02b      	b.n	8008b60 <UART_SetConfig+0x284>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a2c      	ldr	r2, [pc, #176]	; (8008bc0 <UART_SetConfig+0x2e4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d124      	bne.n	8008b5c <UART_SetConfig+0x280>
 8008b12:	4b2d      	ldr	r3, [pc, #180]	; (8008bc8 <UART_SetConfig+0x2ec>)
 8008b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b20:	d012      	beq.n	8008b48 <UART_SetConfig+0x26c>
 8008b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b26:	d802      	bhi.n	8008b2e <UART_SetConfig+0x252>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d007      	beq.n	8008b3c <UART_SetConfig+0x260>
 8008b2c:	e012      	b.n	8008b54 <UART_SetConfig+0x278>
 8008b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b32:	d006      	beq.n	8008b42 <UART_SetConfig+0x266>
 8008b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b38:	d009      	beq.n	8008b4e <UART_SetConfig+0x272>
 8008b3a:	e00b      	b.n	8008b54 <UART_SetConfig+0x278>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	76fb      	strb	r3, [r7, #27]
 8008b40:	e00e      	b.n	8008b60 <UART_SetConfig+0x284>
 8008b42:	2302      	movs	r3, #2
 8008b44:	76fb      	strb	r3, [r7, #27]
 8008b46:	e00b      	b.n	8008b60 <UART_SetConfig+0x284>
 8008b48:	2304      	movs	r3, #4
 8008b4a:	76fb      	strb	r3, [r7, #27]
 8008b4c:	e008      	b.n	8008b60 <UART_SetConfig+0x284>
 8008b4e:	2308      	movs	r3, #8
 8008b50:	76fb      	strb	r3, [r7, #27]
 8008b52:	e005      	b.n	8008b60 <UART_SetConfig+0x284>
 8008b54:	2310      	movs	r3, #16
 8008b56:	76fb      	strb	r3, [r7, #27]
 8008b58:	bf00      	nop
 8008b5a:	e001      	b.n	8008b60 <UART_SetConfig+0x284>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a16      	ldr	r2, [pc, #88]	; (8008bc0 <UART_SetConfig+0x2e4>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	f040 8087 	bne.w	8008c7a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b6c:	7efb      	ldrb	r3, [r7, #27]
 8008b6e:	2b08      	cmp	r3, #8
 8008b70:	d836      	bhi.n	8008be0 <UART_SetConfig+0x304>
 8008b72:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <UART_SetConfig+0x29c>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008b9d 	.word	0x08008b9d
 8008b7c:	08008be1 	.word	0x08008be1
 8008b80:	08008ba5 	.word	0x08008ba5
 8008b84:	08008be1 	.word	0x08008be1
 8008b88:	08008bab 	.word	0x08008bab
 8008b8c:	08008be1 	.word	0x08008be1
 8008b90:	08008be1 	.word	0x08008be1
 8008b94:	08008be1 	.word	0x08008be1
 8008b98:	08008bb3 	.word	0x08008bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b9c:	f7fc fbe4 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 8008ba0:	6178      	str	r0, [r7, #20]
        break;
 8008ba2:	e022      	b.n	8008bea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ba4:	4b0d      	ldr	r3, [pc, #52]	; (8008bdc <UART_SetConfig+0x300>)
 8008ba6:	617b      	str	r3, [r7, #20]
        break;
 8008ba8:	e01f      	b.n	8008bea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008baa:	f7fc fb47 	bl	800523c <HAL_RCC_GetSysClockFreq>
 8008bae:	6178      	str	r0, [r7, #20]
        break;
 8008bb0:	e01b      	b.n	8008bea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bb6:	617b      	str	r3, [r7, #20]
        break;
 8008bb8:	e017      	b.n	8008bea <UART_SetConfig+0x30e>
 8008bba:	bf00      	nop
 8008bbc:	efff69f3 	.word	0xefff69f3
 8008bc0:	40008000 	.word	0x40008000
 8008bc4:	40013800 	.word	0x40013800
 8008bc8:	40021000 	.word	0x40021000
 8008bcc:	40004400 	.word	0x40004400
 8008bd0:	40004800 	.word	0x40004800
 8008bd4:	40004c00 	.word	0x40004c00
 8008bd8:	40005000 	.word	0x40005000
 8008bdc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	76bb      	strb	r3, [r7, #26]
        break;
 8008be8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 80f1 	beq.w	8008dd4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	4413      	add	r3, r2
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d305      	bcc.n	8008c0e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d902      	bls.n	8008c14 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	76bb      	strb	r3, [r7, #26]
 8008c12:	e0df      	b.n	8008dd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	4619      	mov	r1, r3
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	f04f 0300 	mov.w	r3, #0
 8008c20:	f04f 0400 	mov.w	r4, #0
 8008c24:	0214      	lsls	r4, r2, #8
 8008c26:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008c2a:	020b      	lsls	r3, r1, #8
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6852      	ldr	r2, [r2, #4]
 8008c30:	0852      	lsrs	r2, r2, #1
 8008c32:	4611      	mov	r1, r2
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	eb13 0b01 	adds.w	fp, r3, r1
 8008c3c:	eb44 0c02 	adc.w	ip, r4, r2
 8008c40:	4658      	mov	r0, fp
 8008c42:	4661      	mov	r1, ip
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f04f 0400 	mov.w	r4, #0
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4623      	mov	r3, r4
 8008c50:	f7f7 fb3e 	bl	80002d0 <__aeabi_uldivmod>
 8008c54:	4603      	mov	r3, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c60:	d308      	bcc.n	8008c74 <UART_SetConfig+0x398>
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c68:	d204      	bcs.n	8008c74 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	60da      	str	r2, [r3, #12]
 8008c72:	e0af      	b.n	8008dd4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	76bb      	strb	r3, [r7, #26]
 8008c78:	e0ac      	b.n	8008dd4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c82:	d15b      	bne.n	8008d3c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8008c84:	7efb      	ldrb	r3, [r7, #27]
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	d827      	bhi.n	8008cda <UART_SetConfig+0x3fe>
 8008c8a:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0x3b4>)
 8008c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c90:	08008cb5 	.word	0x08008cb5
 8008c94:	08008cbd 	.word	0x08008cbd
 8008c98:	08008cc5 	.word	0x08008cc5
 8008c9c:	08008cdb 	.word	0x08008cdb
 8008ca0:	08008ccb 	.word	0x08008ccb
 8008ca4:	08008cdb 	.word	0x08008cdb
 8008ca8:	08008cdb 	.word	0x08008cdb
 8008cac:	08008cdb 	.word	0x08008cdb
 8008cb0:	08008cd3 	.word	0x08008cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cb4:	f7fc fb58 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 8008cb8:	6178      	str	r0, [r7, #20]
        break;
 8008cba:	e013      	b.n	8008ce4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cbc:	f7fc fb6a 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 8008cc0:	6178      	str	r0, [r7, #20]
        break;
 8008cc2:	e00f      	b.n	8008ce4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cc4:	4b49      	ldr	r3, [pc, #292]	; (8008dec <UART_SetConfig+0x510>)
 8008cc6:	617b      	str	r3, [r7, #20]
        break;
 8008cc8:	e00c      	b.n	8008ce4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cca:	f7fc fab7 	bl	800523c <HAL_RCC_GetSysClockFreq>
 8008cce:	6178      	str	r0, [r7, #20]
        break;
 8008cd0:	e008      	b.n	8008ce4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cd6:	617b      	str	r3, [r7, #20]
        break;
 8008cd8:	e004      	b.n	8008ce4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	76bb      	strb	r3, [r7, #26]
        break;
 8008ce2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d074      	beq.n	8008dd4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	005a      	lsls	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	085b      	lsrs	r3, r3, #1
 8008cf4:	441a      	add	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	2b0f      	cmp	r3, #15
 8008d06:	d916      	bls.n	8008d36 <UART_SetConfig+0x45a>
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d0e:	d212      	bcs.n	8008d36 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	f023 030f 	bic.w	r3, r3, #15
 8008d18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	085b      	lsrs	r3, r3, #1
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	89fb      	ldrh	r3, [r7, #14]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	89fa      	ldrh	r2, [r7, #14]
 8008d32:	60da      	str	r2, [r3, #12]
 8008d34:	e04e      	b.n	8008dd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	76bb      	strb	r3, [r7, #26]
 8008d3a:	e04b      	b.n	8008dd4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d3c:	7efb      	ldrb	r3, [r7, #27]
 8008d3e:	2b08      	cmp	r3, #8
 8008d40:	d827      	bhi.n	8008d92 <UART_SetConfig+0x4b6>
 8008d42:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <UART_SetConfig+0x46c>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d6d 	.word	0x08008d6d
 8008d4c:	08008d75 	.word	0x08008d75
 8008d50:	08008d7d 	.word	0x08008d7d
 8008d54:	08008d93 	.word	0x08008d93
 8008d58:	08008d83 	.word	0x08008d83
 8008d5c:	08008d93 	.word	0x08008d93
 8008d60:	08008d93 	.word	0x08008d93
 8008d64:	08008d93 	.word	0x08008d93
 8008d68:	08008d8b 	.word	0x08008d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d6c:	f7fc fafc 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 8008d70:	6178      	str	r0, [r7, #20]
        break;
 8008d72:	e013      	b.n	8008d9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d74:	f7fc fb0e 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 8008d78:	6178      	str	r0, [r7, #20]
        break;
 8008d7a:	e00f      	b.n	8008d9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d7c:	4b1b      	ldr	r3, [pc, #108]	; (8008dec <UART_SetConfig+0x510>)
 8008d7e:	617b      	str	r3, [r7, #20]
        break;
 8008d80:	e00c      	b.n	8008d9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d82:	f7fc fa5b 	bl	800523c <HAL_RCC_GetSysClockFreq>
 8008d86:	6178      	str	r0, [r7, #20]
        break;
 8008d88:	e008      	b.n	8008d9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d8e:	617b      	str	r3, [r7, #20]
        break;
 8008d90:	e004      	b.n	8008d9c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	76bb      	strb	r3, [r7, #26]
        break;
 8008d9a:	bf00      	nop
    }

    if (pclk != 0U)
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d018      	beq.n	8008dd4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	085a      	lsrs	r2, r3, #1
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	441a      	add	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	2b0f      	cmp	r3, #15
 8008dbc:	d908      	bls.n	8008dd0 <UART_SetConfig+0x4f4>
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc4:	d204      	bcs.n	8008dd0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	60da      	str	r2, [r3, #12]
 8008dce:	e001      	b.n	8008dd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008de0:	7ebb      	ldrb	r3, [r7, #26]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3720      	adds	r7, #32
 8008de6:	46bd      	mov	sp, r7
 8008de8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008dec:	00f42400 	.word	0x00f42400

08008df0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	f003 0302 	and.w	r3, r3, #2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00a      	beq.n	8008e5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	f003 0308 	and.w	r3, r3, #8
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	f003 0310 	and.w	r3, r3, #16
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00a      	beq.n	8008ea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea6:	f003 0320 	and.w	r3, r3, #32
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00a      	beq.n	8008ec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d01a      	beq.n	8008f06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eee:	d10a      	bne.n	8008f06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00a      	beq.n	8008f28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	430a      	orrs	r2, r1
 8008f26:	605a      	str	r2, [r3, #4]
  }
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af02      	add	r7, sp, #8
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008f42:	f7fa f9d3 	bl	80032ec <HAL_GetTick>
 8008f46:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	d10e      	bne.n	8008f74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f82a 	bl	8008fbe <UART_WaitOnFlagUntilTimeout>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e020      	b.n	8008fb6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0304 	and.w	r3, r3, #4
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	d10e      	bne.n	8008fa0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f814 	bl	8008fbe <UART_WaitOnFlagUntilTimeout>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e00a      	b.n	8008fb6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2220      	movs	r2, #32
 8008fa4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	603b      	str	r3, [r7, #0]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fce:	e05d      	b.n	800908c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd6:	d059      	beq.n	800908c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd8:	f7fa f988 	bl	80032ec <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d302      	bcc.n	8008fee <UART_WaitOnFlagUntilTimeout+0x30>
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d11b      	bne.n	8009026 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ffc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689a      	ldr	r2, [r3, #8]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 0201 	bic.w	r2, r2, #1
 800900c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2220      	movs	r2, #32
 8009012:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2220      	movs	r2, #32
 8009018:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e042      	b.n	80090ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d02b      	beq.n	800908c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800903e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009042:	d123      	bne.n	800908c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800904c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800905c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 0201 	bic.w	r2, r2, #1
 800906c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2220      	movs	r2, #32
 8009072:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2220      	movs	r2, #32
 8009078:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2220      	movs	r2, #32
 800907e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e00f      	b.n	80090ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69da      	ldr	r2, [r3, #28]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	4013      	ands	r3, r2
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	429a      	cmp	r2, r3
 800909a:	bf0c      	ite	eq
 800909c:	2301      	moveq	r3, #1
 800909e:	2300      	movne	r3, #0
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	461a      	mov	r2, r3
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d092      	beq.n	8008fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80090b8:	4904      	ldr	r1, [pc, #16]	; (80090cc <MX_FATFS_Init+0x18>)
 80090ba:	4805      	ldr	r0, [pc, #20]	; (80090d0 <MX_FATFS_Init+0x1c>)
 80090bc:	f003 f90e 	bl	800c2dc <FATFS_LinkDriver>
 80090c0:	4603      	mov	r3, r0
 80090c2:	461a      	mov	r2, r3
 80090c4:	4b03      	ldr	r3, [pc, #12]	; (80090d4 <MX_FATFS_Init+0x20>)
 80090c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80090c8:	bf00      	nop
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	20002cd4 	.word	0x20002cd4
 80090d0:	200001a0 	.word	0x200001a0
 80090d4:	20002cd8 	.word	0x20002cd8

080090d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80090d8:	b480      	push	{r7}
 80090da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80090dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80090de:	4618      	mov	r0, r3
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7f7 fc25 	bl	8000944 <SD_disk_initialize>
 80090fa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	4618      	mov	r0, r3
 8009112:	f7f7 fd01 	bl	8000b18 <SD_disk_status>
 8009116:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60b9      	str	r1, [r7, #8]
 8009128:	607a      	str	r2, [r7, #4]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009130:	7bf8      	ldrb	r0, [r7, #15]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	68b9      	ldr	r1, [r7, #8]
 8009138:	f7f7 fd04 	bl	8000b44 <SD_disk_read>
 800913c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	603b      	str	r3, [r7, #0]
 8009152:	4603      	mov	r3, r0
 8009154:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8009156:	7bf8      	ldrb	r0, [r7, #15]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	68b9      	ldr	r1, [r7, #8]
 800915e:	f7f7 fd5b 	bl	8000c18 <SD_disk_write>
 8009162:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	603a      	str	r2, [r7, #0]
 8009176:	71fb      	strb	r3, [r7, #7]
 8009178:	460b      	mov	r3, r1
 800917a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800917c:	79b9      	ldrb	r1, [r7, #6]
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	4618      	mov	r0, r3
 8009184:	f7f7 fdcc 	bl	8000d20 <SD_disk_ioctl>
 8009188:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800919e:	79fb      	ldrb	r3, [r7, #7]
 80091a0:	4a08      	ldr	r2, [pc, #32]	; (80091c4 <disk_status+0x30>)
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	79fa      	ldrb	r2, [r7, #7]
 80091ac:	4905      	ldr	r1, [pc, #20]	; (80091c4 <disk_status+0x30>)
 80091ae:	440a      	add	r2, r1
 80091b0:	7a12      	ldrb	r2, [r2, #8]
 80091b2:	4610      	mov	r0, r2
 80091b4:	4798      	blx	r3
 80091b6:	4603      	mov	r3, r0
 80091b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	200005c8 	.word	0x200005c8

080091c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	4a0d      	ldr	r2, [pc, #52]	; (8009210 <disk_initialize+0x48>)
 80091da:	5cd3      	ldrb	r3, [r2, r3]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d111      	bne.n	8009204 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80091e0:	79fb      	ldrb	r3, [r7, #7]
 80091e2:	4a0b      	ldr	r2, [pc, #44]	; (8009210 <disk_initialize+0x48>)
 80091e4:	2101      	movs	r1, #1
 80091e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	4a09      	ldr	r2, [pc, #36]	; (8009210 <disk_initialize+0x48>)
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	79fa      	ldrb	r2, [r7, #7]
 80091f6:	4906      	ldr	r1, [pc, #24]	; (8009210 <disk_initialize+0x48>)
 80091f8:	440a      	add	r2, r1
 80091fa:	7a12      	ldrb	r2, [r2, #8]
 80091fc:	4610      	mov	r0, r2
 80091fe:	4798      	blx	r3
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	200005c8 	.word	0x200005c8

08009214 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009214:	b590      	push	{r4, r7, lr}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	607a      	str	r2, [r7, #4]
 800921e:	603b      	str	r3, [r7, #0]
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	4a0a      	ldr	r2, [pc, #40]	; (8009250 <disk_read+0x3c>)
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	689c      	ldr	r4, [r3, #8]
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	4a07      	ldr	r2, [pc, #28]	; (8009250 <disk_read+0x3c>)
 8009234:	4413      	add	r3, r2
 8009236:	7a18      	ldrb	r0, [r3, #8]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	47a0      	blx	r4
 8009240:	4603      	mov	r3, r0
 8009242:	75fb      	strb	r3, [r7, #23]
  return res;
 8009244:	7dfb      	ldrb	r3, [r7, #23]
}
 8009246:	4618      	mov	r0, r3
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	bd90      	pop	{r4, r7, pc}
 800924e:	bf00      	nop
 8009250:	200005c8 	.word	0x200005c8

08009254 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	4a0a      	ldr	r2, [pc, #40]	; (8009290 <disk_write+0x3c>)
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	68dc      	ldr	r4, [r3, #12]
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4a07      	ldr	r2, [pc, #28]	; (8009290 <disk_write+0x3c>)
 8009274:	4413      	add	r3, r2
 8009276:	7a18      	ldrb	r0, [r3, #8]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	68b9      	ldr	r1, [r7, #8]
 800927e:	47a0      	blx	r4
 8009280:	4603      	mov	r3, r0
 8009282:	75fb      	strb	r3, [r7, #23]
  return res;
 8009284:	7dfb      	ldrb	r3, [r7, #23]
}
 8009286:	4618      	mov	r0, r3
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	bd90      	pop	{r4, r7, pc}
 800928e:	bf00      	nop
 8009290:	200005c8 	.word	0x200005c8

08009294 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	603a      	str	r2, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
 80092a0:	460b      	mov	r3, r1
 80092a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	4a09      	ldr	r2, [pc, #36]	; (80092cc <disk_ioctl+0x38>)
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	79fa      	ldrb	r2, [r7, #7]
 80092b2:	4906      	ldr	r1, [pc, #24]	; (80092cc <disk_ioctl+0x38>)
 80092b4:	440a      	add	r2, r1
 80092b6:	7a10      	ldrb	r0, [r2, #8]
 80092b8:	79b9      	ldrb	r1, [r7, #6]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	4798      	blx	r3
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	200005c8 	.word	0x200005c8

080092d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	3301      	adds	r3, #1
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80092e0:	89fb      	ldrh	r3, [r7, #14]
 80092e2:	021b      	lsls	r3, r3, #8
 80092e4:	b21a      	sxth	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b21b      	sxth	r3, r3
 80092ec:	4313      	orrs	r3, r2
 80092ee:	b21b      	sxth	r3, r3
 80092f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80092f2:	89fb      	ldrh	r3, [r7, #14]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3303      	adds	r3, #3
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	021b      	lsls	r3, r3, #8
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	3202      	adds	r2, #2
 8009318:	7812      	ldrb	r2, [r2, #0]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	3201      	adds	r2, #1
 8009326:	7812      	ldrb	r2, [r2, #0]
 8009328:	4313      	orrs	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	7812      	ldrb	r2, [r2, #0]
 8009334:	4313      	orrs	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]
	return rv;
 8009338:	68fb      	ldr	r3, [r7, #12]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	887a      	ldrh	r2, [r7, #2]
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	887b      	ldrh	r3, [r7, #2]
 8009360:	0a1b      	lsrs	r3, r3, #8
 8009362:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	607a      	str	r2, [r7, #4]
 800936a:	887a      	ldrh	r2, [r7, #2]
 800936c:	b2d2      	uxtb	r2, r2
 800936e:	701a      	strb	r2, [r3, #0]
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	b2d2      	uxtb	r2, r2
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	0a1b      	lsrs	r3, r3, #8
 8009396:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	b2d2      	uxtb	r2, r2
 80093a2:	701a      	strb	r2, [r3, #0]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	0a1b      	lsrs	r3, r3, #8
 80093a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	b2d2      	uxtb	r2, r2
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	0a1b      	lsrs	r3, r3, #8
 80093ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	607a      	str	r2, [r7, #4]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	b2d2      	uxtb	r2, r2
 80093c6:	701a      	strb	r2, [r3, #0]
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80093d4:	b480      	push	{r7}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00d      	beq.n	800940a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	1c53      	adds	r3, r2, #1
 80093f2:	613b      	str	r3, [r7, #16]
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	1c59      	adds	r1, r3, #1
 80093f8:	6179      	str	r1, [r7, #20]
 80093fa:	7812      	ldrb	r2, [r2, #0]
 80093fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3b01      	subs	r3, #1
 8009402:	607b      	str	r3, [r7, #4]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1f1      	bne.n	80093ee <mem_cpy+0x1a>
	}
}
 800940a:	bf00      	nop
 800940c:	371c      	adds	r7, #28
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009416:	b480      	push	{r7}
 8009418:	b087      	sub	sp, #28
 800941a:	af00      	add	r7, sp, #0
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	1c5a      	adds	r2, r3, #1
 800942a:	617a      	str	r2, [r7, #20]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	b2d2      	uxtb	r2, r2
 8009430:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3b01      	subs	r3, #1
 8009436:	607b      	str	r3, [r7, #4]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1f3      	bne.n	8009426 <mem_set+0x10>
}
 800943e:	bf00      	nop
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800944a:	b480      	push	{r7}
 800944c:	b089      	sub	sp, #36	; 0x24
 800944e:	af00      	add	r7, sp, #0
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	60b9      	str	r1, [r7, #8]
 8009454:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	61fb      	str	r3, [r7, #28]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	1c5a      	adds	r2, r3, #1
 8009466:	61fa      	str	r2, [r7, #28]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	4619      	mov	r1, r3
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	61ba      	str	r2, [r7, #24]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	1acb      	subs	r3, r1, r3
 8009476:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3b01      	subs	r3, #1
 800947c:	607b      	str	r3, [r7, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <mem_cmp+0x40>
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0eb      	beq.n	8009462 <mem_cmp+0x18>

	return r;
 800948a:	697b      	ldr	r3, [r7, #20]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3724      	adds	r7, #36	; 0x24
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80094a2:	e002      	b.n	80094aa <chk_chr+0x12>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3301      	adds	r3, #1
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <chk_chr+0x26>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	461a      	mov	r2, r3
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d1f2      	bne.n	80094a4 <chk_chr+0xc>
	return *str;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	781b      	ldrb	r3, [r3, #0]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
	...

080094d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80094da:	2300      	movs	r3, #0
 80094dc:	60bb      	str	r3, [r7, #8]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	e029      	b.n	8009538 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80094e4:	4a27      	ldr	r2, [pc, #156]	; (8009584 <chk_lock+0xb4>)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	4413      	add	r3, r2
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d01d      	beq.n	800952e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80094f2:	4a24      	ldr	r2, [pc, #144]	; (8009584 <chk_lock+0xb4>)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	4413      	add	r3, r2
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d116      	bne.n	8009532 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009504:	4a1f      	ldr	r2, [pc, #124]	; (8009584 <chk_lock+0xb4>)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	011b      	lsls	r3, r3, #4
 800950a:	4413      	add	r3, r2
 800950c:	3304      	adds	r3, #4
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009514:	429a      	cmp	r2, r3
 8009516:	d10c      	bne.n	8009532 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009518:	4a1a      	ldr	r2, [pc, #104]	; (8009584 <chk_lock+0xb4>)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	011b      	lsls	r3, r3, #4
 800951e:	4413      	add	r3, r2
 8009520:	3308      	adds	r3, #8
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009528:	429a      	cmp	r2, r3
 800952a:	d102      	bne.n	8009532 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800952c:	e007      	b.n	800953e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800952e:	2301      	movs	r3, #1
 8009530:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3301      	adds	r3, #1
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d9d2      	bls.n	80094e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b02      	cmp	r3, #2
 8009542:	d109      	bne.n	8009558 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d102      	bne.n	8009550 <chk_lock+0x80>
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2b02      	cmp	r3, #2
 800954e:	d101      	bne.n	8009554 <chk_lock+0x84>
 8009550:	2300      	movs	r3, #0
 8009552:	e010      	b.n	8009576 <chk_lock+0xa6>
 8009554:	2312      	movs	r3, #18
 8009556:	e00e      	b.n	8009576 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d108      	bne.n	8009570 <chk_lock+0xa0>
 800955e:	4a09      	ldr	r2, [pc, #36]	; (8009584 <chk_lock+0xb4>)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	011b      	lsls	r3, r3, #4
 8009564:	4413      	add	r3, r2
 8009566:	330c      	adds	r3, #12
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800956e:	d101      	bne.n	8009574 <chk_lock+0xa4>
 8009570:	2310      	movs	r3, #16
 8009572:	e000      	b.n	8009576 <chk_lock+0xa6>
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	200003a8 	.word	0x200003a8

08009588 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800958e:	2300      	movs	r3, #0
 8009590:	607b      	str	r3, [r7, #4]
 8009592:	e002      	b.n	800959a <enq_lock+0x12>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3301      	adds	r3, #1
 8009598:	607b      	str	r3, [r7, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d806      	bhi.n	80095ae <enq_lock+0x26>
 80095a0:	4a09      	ldr	r2, [pc, #36]	; (80095c8 <enq_lock+0x40>)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	4413      	add	r3, r2
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1f2      	bne.n	8009594 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	bf14      	ite	ne
 80095b4:	2301      	movne	r3, #1
 80095b6:	2300      	moveq	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	200003a8 	.word	0x200003a8

080095cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	e01f      	b.n	800961c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80095dc:	4a41      	ldr	r2, [pc, #260]	; (80096e4 <inc_lock+0x118>)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	011b      	lsls	r3, r3, #4
 80095e2:	4413      	add	r3, r2
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d113      	bne.n	8009616 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80095ee:	4a3d      	ldr	r2, [pc, #244]	; (80096e4 <inc_lock+0x118>)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	4413      	add	r3, r2
 80095f6:	3304      	adds	r3, #4
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80095fe:	429a      	cmp	r2, r3
 8009600:	d109      	bne.n	8009616 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009602:	4a38      	ldr	r2, [pc, #224]	; (80096e4 <inc_lock+0x118>)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	011b      	lsls	r3, r3, #4
 8009608:	4413      	add	r3, r2
 800960a:	3308      	adds	r3, #8
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009612:	429a      	cmp	r2, r3
 8009614:	d006      	beq.n	8009624 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3301      	adds	r3, #1
 800961a:	60fb      	str	r3, [r7, #12]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d9dc      	bls.n	80095dc <inc_lock+0x10>
 8009622:	e000      	b.n	8009626 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009624:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b02      	cmp	r3, #2
 800962a:	d132      	bne.n	8009692 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800962c:	2300      	movs	r3, #0
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	e002      	b.n	8009638 <inc_lock+0x6c>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3301      	adds	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d806      	bhi.n	800964c <inc_lock+0x80>
 800963e:	4a29      	ldr	r2, [pc, #164]	; (80096e4 <inc_lock+0x118>)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	4413      	add	r3, r2
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1f2      	bne.n	8009632 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b02      	cmp	r3, #2
 8009650:	d101      	bne.n	8009656 <inc_lock+0x8a>
 8009652:	2300      	movs	r3, #0
 8009654:	e040      	b.n	80096d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	4922      	ldr	r1, [pc, #136]	; (80096e4 <inc_lock+0x118>)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	440b      	add	r3, r1
 8009662:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	491e      	ldr	r1, [pc, #120]	; (80096e4 <inc_lock+0x118>)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	011b      	lsls	r3, r3, #4
 800966e:	440b      	add	r3, r1
 8009670:	3304      	adds	r3, #4
 8009672:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	695a      	ldr	r2, [r3, #20]
 8009678:	491a      	ldr	r1, [pc, #104]	; (80096e4 <inc_lock+0x118>)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	440b      	add	r3, r1
 8009680:	3308      	adds	r3, #8
 8009682:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009684:	4a17      	ldr	r2, [pc, #92]	; (80096e4 <inc_lock+0x118>)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	011b      	lsls	r3, r3, #4
 800968a:	4413      	add	r3, r2
 800968c:	330c      	adds	r3, #12
 800968e:	2200      	movs	r2, #0
 8009690:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d009      	beq.n	80096ac <inc_lock+0xe0>
 8009698:	4a12      	ldr	r2, [pc, #72]	; (80096e4 <inc_lock+0x118>)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	011b      	lsls	r3, r3, #4
 800969e:	4413      	add	r3, r2
 80096a0:	330c      	adds	r3, #12
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <inc_lock+0xe0>
 80096a8:	2300      	movs	r3, #0
 80096aa:	e015      	b.n	80096d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d108      	bne.n	80096c4 <inc_lock+0xf8>
 80096b2:	4a0c      	ldr	r2, [pc, #48]	; (80096e4 <inc_lock+0x118>)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	011b      	lsls	r3, r3, #4
 80096b8:	4413      	add	r3, r2
 80096ba:	330c      	adds	r3, #12
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	3301      	adds	r3, #1
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	e001      	b.n	80096c8 <inc_lock+0xfc>
 80096c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096c8:	4906      	ldr	r1, [pc, #24]	; (80096e4 <inc_lock+0x118>)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	011b      	lsls	r3, r3, #4
 80096ce:	440b      	add	r3, r1
 80096d0:	330c      	adds	r3, #12
 80096d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3301      	adds	r3, #1
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	200003a8 	.word	0x200003a8

080096e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	607b      	str	r3, [r7, #4]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d825      	bhi.n	8009748 <dec_lock+0x60>
		n = Files[i].ctr;
 80096fc:	4a17      	ldr	r2, [pc, #92]	; (800975c <dec_lock+0x74>)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	011b      	lsls	r3, r3, #4
 8009702:	4413      	add	r3, r2
 8009704:	330c      	adds	r3, #12
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800970a:	89fb      	ldrh	r3, [r7, #14]
 800970c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009710:	d101      	bne.n	8009716 <dec_lock+0x2e>
 8009712:	2300      	movs	r3, #0
 8009714:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009716:	89fb      	ldrh	r3, [r7, #14]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <dec_lock+0x3a>
 800971c:	89fb      	ldrh	r3, [r7, #14]
 800971e:	3b01      	subs	r3, #1
 8009720:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009722:	4a0e      	ldr	r2, [pc, #56]	; (800975c <dec_lock+0x74>)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	011b      	lsls	r3, r3, #4
 8009728:	4413      	add	r3, r2
 800972a:	330c      	adds	r3, #12
 800972c:	89fa      	ldrh	r2, [r7, #14]
 800972e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009730:	89fb      	ldrh	r3, [r7, #14]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d105      	bne.n	8009742 <dec_lock+0x5a>
 8009736:	4a09      	ldr	r2, [pc, #36]	; (800975c <dec_lock+0x74>)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	011b      	lsls	r3, r3, #4
 800973c:	4413      	add	r3, r2
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	737b      	strb	r3, [r7, #13]
 8009746:	e001      	b.n	800974c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009748:	2302      	movs	r3, #2
 800974a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800974c:	7b7b      	ldrb	r3, [r7, #13]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	200003a8 	.word	0x200003a8

08009760 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	e010      	b.n	8009790 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800976e:	4a0d      	ldr	r2, [pc, #52]	; (80097a4 <clear_lock+0x44>)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	4413      	add	r3, r2
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	429a      	cmp	r2, r3
 800977c:	d105      	bne.n	800978a <clear_lock+0x2a>
 800977e:	4a09      	ldr	r2, [pc, #36]	; (80097a4 <clear_lock+0x44>)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	4413      	add	r3, r2
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3301      	adds	r3, #1
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d9eb      	bls.n	800976e <clear_lock+0xe>
	}
}
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	200003a8 	.word	0x200003a8

080097a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	78db      	ldrb	r3, [r3, #3]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d034      	beq.n	8009826 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	7858      	ldrb	r0, [r3, #1]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80097cc:	2301      	movs	r3, #1
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	f7ff fd40 	bl	8009254 <disk_write>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80097da:	2301      	movs	r3, #1
 80097dc:	73fb      	strb	r3, [r7, #15]
 80097de:	e022      	b.n	8009826 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	1ad2      	subs	r2, r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d217      	bcs.n	8009826 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	789b      	ldrb	r3, [r3, #2]
 80097fa:	613b      	str	r3, [r7, #16]
 80097fc:	e010      	b.n	8009820 <sync_window+0x78>
					wsect += fs->fsize;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	4413      	add	r3, r2
 8009806:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	7858      	ldrb	r0, [r3, #1]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009812:	2301      	movs	r3, #1
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	f7ff fd1d 	bl	8009254 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	3b01      	subs	r3, #1
 800981e:	613b      	str	r3, [r7, #16]
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d8eb      	bhi.n	80097fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3718      	adds	r7, #24
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d01b      	beq.n	8009880 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff ffad 	bl	80097a8 <sync_window>
 800984e:	4603      	mov	r3, r0
 8009850:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d113      	bne.n	8009880 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	7858      	ldrb	r0, [r3, #1]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009862:	2301      	movs	r3, #1
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	f7ff fcd5 	bl	8009214 <disk_read>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d004      	beq.n	800987a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009870:	f04f 33ff 	mov.w	r3, #4294967295
 8009874:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009876:	2301      	movs	r3, #1
 8009878:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009880:	7bfb      	ldrb	r3, [r7, #15]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
	...

0800988c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff ff87 	bl	80097a8 <sync_window>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d159      	bne.n	8009958 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d149      	bne.n	8009940 <sync_fs+0xb4>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	791b      	ldrb	r3, [r3, #4]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d145      	bne.n	8009940 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	899b      	ldrh	r3, [r3, #12]
 80098be:	461a      	mov	r2, r3
 80098c0:	2100      	movs	r1, #0
 80098c2:	f7ff fda8 	bl	8009416 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3338      	adds	r3, #56	; 0x38
 80098ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80098ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fd37 	bl	8009346 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3338      	adds	r3, #56	; 0x38
 80098dc:	4921      	ldr	r1, [pc, #132]	; (8009964 <sync_fs+0xd8>)
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fd4c 	bl	800937c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3338      	adds	r3, #56	; 0x38
 80098e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80098ec:	491e      	ldr	r1, [pc, #120]	; (8009968 <sync_fs+0xdc>)
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff fd44 	bl	800937c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3338      	adds	r3, #56	; 0x38
 80098f8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	4619      	mov	r1, r3
 8009902:	4610      	mov	r0, r2
 8009904:	f7ff fd3a 	bl	800937c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3338      	adds	r3, #56	; 0x38
 800990c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	4619      	mov	r1, r3
 8009916:	4610      	mov	r0, r2
 8009918:	f7ff fd30 	bl	800937c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	7858      	ldrb	r0, [r3, #1]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009934:	2301      	movs	r3, #1
 8009936:	f7ff fc8d 	bl	8009254 <disk_write>
			fs->fsi_flag = 0;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	2200      	movs	r2, #0
 8009946:	2100      	movs	r1, #0
 8009948:	4618      	mov	r0, r3
 800994a:	f7ff fca3 	bl	8009294 <disk_ioctl>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <sync_fs+0xcc>
 8009954:	2301      	movs	r3, #1
 8009956:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009958:	7bfb      	ldrb	r3, [r7, #15]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	41615252 	.word	0x41615252
 8009968:	61417272 	.word	0x61417272

0800996c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	3b02      	subs	r3, #2
 800997a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	69db      	ldr	r3, [r3, #28]
 8009980:	3b02      	subs	r3, #2
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	429a      	cmp	r2, r3
 8009986:	d301      	bcc.n	800998c <clust2sect+0x20>
 8009988:	2300      	movs	r3, #0
 800998a:	e008      	b.n	800999e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	895b      	ldrh	r3, [r3, #10]
 8009990:	461a      	mov	r2, r3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	fb03 f202 	mul.w	r2, r3, r2
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999c:	4413      	add	r3, r2
}
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b086      	sub	sp, #24
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d904      	bls.n	80099ca <get_fat+0x20>
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	69db      	ldr	r3, [r3, #28]
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d302      	bcc.n	80099d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80099ca:	2301      	movs	r3, #1
 80099cc:	617b      	str	r3, [r7, #20]
 80099ce:	e0b7      	b.n	8009b40 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80099d0:	f04f 33ff 	mov.w	r3, #4294967295
 80099d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d05a      	beq.n	8009a94 <get_fat+0xea>
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d07d      	beq.n	8009ade <get_fat+0x134>
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	f040 80a2 	bne.w	8009b2c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	085b      	lsrs	r3, r3, #1
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	4413      	add	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	899b      	ldrh	r3, [r3, #12]
 80099fe:	4619      	mov	r1, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a06:	4413      	add	r3, r2
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6938      	ldr	r0, [r7, #16]
 8009a0c:	f7ff ff10 	bl	8009830 <move_window>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f040 808d 	bne.w	8009b32 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	60fa      	str	r2, [r7, #12]
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	8992      	ldrh	r2, [r2, #12]
 8009a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a26:	fb02 f201 	mul.w	r2, r2, r1
 8009a2a:	1a9b      	subs	r3, r3, r2
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	899b      	ldrh	r3, [r3, #12]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a46:	4413      	add	r3, r2
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6938      	ldr	r0, [r7, #16]
 8009a4c:	f7ff fef0 	bl	8009830 <move_window>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d16f      	bne.n	8009b36 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	899b      	ldrh	r3, [r3, #12]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a62:	fb02 f201 	mul.w	r2, r2, r1
 8009a66:	1a9b      	subs	r3, r3, r2
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009a70:	021b      	lsls	r3, r3, #8
 8009a72:	461a      	mov	r2, r3
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <get_fat+0xe0>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	091b      	lsrs	r3, r3, #4
 8009a88:	e002      	b.n	8009a90 <get_fat+0xe6>
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a90:	617b      	str	r3, [r7, #20]
			break;
 8009a92:	e055      	b.n	8009b40 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	899b      	ldrh	r3, [r3, #12]
 8009a9c:	085b      	lsrs	r3, r3, #1
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009aa8:	4413      	add	r3, r2
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6938      	ldr	r0, [r7, #16]
 8009aae:	f7ff febf 	bl	8009830 <move_window>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d140      	bne.n	8009b3a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	8992      	ldrh	r2, [r2, #12]
 8009ac6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009aca:	fb02 f200 	mul.w	r2, r2, r0
 8009ace:	1a9b      	subs	r3, r3, r2
 8009ad0:	440b      	add	r3, r1
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7ff fbfc 	bl	80092d0 <ld_word>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	617b      	str	r3, [r7, #20]
			break;
 8009adc:	e030      	b.n	8009b40 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	899b      	ldrh	r3, [r3, #12]
 8009ae6:	089b      	lsrs	r3, r3, #2
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	4619      	mov	r1, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8009af2:	4413      	add	r3, r2
 8009af4:	4619      	mov	r1, r3
 8009af6:	6938      	ldr	r0, [r7, #16]
 8009af8:	f7ff fe9a 	bl	8009830 <move_window>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d11d      	bne.n	8009b3e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	8992      	ldrh	r2, [r2, #12]
 8009b10:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b14:	fb02 f200 	mul.w	r2, r2, r0
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	440b      	add	r3, r1
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7ff fbef 	bl	8009300 <ld_dword>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009b28:	617b      	str	r3, [r7, #20]
			break;
 8009b2a:	e009      	b.n	8009b40 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	e006      	b.n	8009b40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b32:	bf00      	nop
 8009b34:	e004      	b.n	8009b40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b36:	bf00      	nop
 8009b38:	e002      	b.n	8009b40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009b3a:	bf00      	nop
 8009b3c:	e000      	b.n	8009b40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009b3e:	bf00      	nop
		}
	}

	return val;
 8009b40:	697b      	ldr	r3, [r7, #20]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009b4a:	b590      	push	{r4, r7, lr}
 8009b4c:	b089      	sub	sp, #36	; 0x24
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009b56:	2302      	movs	r3, #2
 8009b58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	f240 8106 	bls.w	8009d6e <put_fat+0x224>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	f080 8100 	bcs.w	8009d6e <put_fat+0x224>
		switch (fs->fs_type) {
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	f000 8088 	beq.w	8009c88 <put_fat+0x13e>
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	f000 80b0 	beq.w	8009cde <put_fat+0x194>
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	f040 80f5 	bne.w	8009d6e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	61bb      	str	r3, [r7, #24]
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	085b      	lsrs	r3, r3, #1
 8009b8c:	69ba      	ldr	r2, [r7, #24]
 8009b8e:	4413      	add	r3, r2
 8009b90:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	899b      	ldrh	r3, [r3, #12]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ba2:	4413      	add	r3, r2
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f7ff fe42 	bl	8009830 <move_window>
 8009bac:	4603      	mov	r3, r0
 8009bae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009bb0:	7ffb      	ldrb	r3, [r7, #31]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f040 80d4 	bne.w	8009d60 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	61ba      	str	r2, [r7, #24]
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	8992      	ldrh	r2, [r2, #12]
 8009bc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009bcc:	fb02 f200 	mul.w	r2, r2, r0
 8009bd0:	1a9b      	subs	r3, r3, r2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00d      	beq.n	8009bfc <put_fat+0xb2>
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	b25b      	sxtb	r3, r3
 8009be6:	f003 030f 	and.w	r3, r3, #15
 8009bea:	b25a      	sxtb	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	b25b      	sxtb	r3, r3
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b25b      	sxtb	r3, r3
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	e001      	b.n	8009c00 <put_fat+0xb6>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2201      	movs	r2, #1
 8009c08:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	899b      	ldrh	r3, [r3, #12]
 8009c12:	4619      	mov	r1, r3
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c1a:	4413      	add	r3, r2
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff fe06 	bl	8009830 <move_window>
 8009c24:	4603      	mov	r3, r0
 8009c26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009c28:	7ffb      	ldrb	r3, [r7, #31]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f040 809a 	bne.w	8009d64 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	899b      	ldrh	r3, [r3, #12]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c42:	fb02 f200 	mul.w	r2, r2, r0
 8009c46:	1a9b      	subs	r3, r3, r2
 8009c48:	440b      	add	r3, r1
 8009c4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <put_fat+0x114>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	091b      	lsrs	r3, r3, #4
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	e00e      	b.n	8009c7c <put_fat+0x132>
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	b25b      	sxtb	r3, r3
 8009c64:	f023 030f 	bic.w	r3, r3, #15
 8009c68:	b25a      	sxtb	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	0a1b      	lsrs	r3, r3, #8
 8009c6e:	b25b      	sxtb	r3, r3
 8009c70:	f003 030f 	and.w	r3, r3, #15
 8009c74:	b25b      	sxtb	r3, r3
 8009c76:	4313      	orrs	r3, r2
 8009c78:	b25b      	sxtb	r3, r3
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2201      	movs	r2, #1
 8009c84:	70da      	strb	r2, [r3, #3]
			break;
 8009c86:	e072      	b.n	8009d6e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	899b      	ldrh	r3, [r3, #12]
 8009c90:	085b      	lsrs	r3, r3, #1
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	4619      	mov	r1, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c9c:	4413      	add	r3, r2
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7ff fdc5 	bl	8009830 <move_window>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009caa:	7ffb      	ldrb	r3, [r7, #31]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d15b      	bne.n	8009d68 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	8992      	ldrh	r2, [r2, #12]
 8009cbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8009cc2:	fb02 f200 	mul.w	r2, r2, r0
 8009cc6:	1a9b      	subs	r3, r3, r2
 8009cc8:	440b      	add	r3, r1
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	b292      	uxth	r2, r2
 8009cce:	4611      	mov	r1, r2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff fb38 	bl	8009346 <st_word>
			fs->wflag = 1;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	70da      	strb	r2, [r3, #3]
			break;
 8009cdc:	e047      	b.n	8009d6e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	899b      	ldrh	r3, [r3, #12]
 8009ce6:	089b      	lsrs	r3, r3, #2
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	4619      	mov	r1, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cf2:	4413      	add	r3, r2
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7ff fd9a 	bl	8009830 <move_window>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009d00:	7ffb      	ldrb	r3, [r7, #31]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d132      	bne.n	8009d6c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	8992      	ldrh	r2, [r2, #12]
 8009d1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d1e:	fb02 f200 	mul.w	r2, r2, r0
 8009d22:	1a9b      	subs	r3, r3, r2
 8009d24:	440b      	add	r3, r1
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff faea 	bl	8009300 <ld_dword>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009d32:	4323      	orrs	r3, r4
 8009d34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	8992      	ldrh	r2, [r2, #12]
 8009d44:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d48:	fb02 f200 	mul.w	r2, r2, r0
 8009d4c:	1a9b      	subs	r3, r3, r2
 8009d4e:	440b      	add	r3, r1
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7ff fb12 	bl	800937c <st_dword>
			fs->wflag = 1;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	70da      	strb	r2, [r3, #3]
			break;
 8009d5e:	e006      	b.n	8009d6e <put_fat+0x224>
			if (res != FR_OK) break;
 8009d60:	bf00      	nop
 8009d62:	e004      	b.n	8009d6e <put_fat+0x224>
			if (res != FR_OK) break;
 8009d64:	bf00      	nop
 8009d66:	e002      	b.n	8009d6e <put_fat+0x224>
			if (res != FR_OK) break;
 8009d68:	bf00      	nop
 8009d6a:	e000      	b.n	8009d6e <put_fat+0x224>
			if (res != FR_OK) break;
 8009d6c:	bf00      	nop
		}
	}
	return res;
 8009d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3724      	adds	r7, #36	; 0x24
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd90      	pop	{r4, r7, pc}

08009d78 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b088      	sub	sp, #32
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d904      	bls.n	8009d9e <remove_chain+0x26>
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d301      	bcc.n	8009da2 <remove_chain+0x2a>
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e04b      	b.n	8009e3a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00c      	beq.n	8009dc2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009da8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	69b8      	ldr	r0, [r7, #24]
 8009db0:	f7ff fecb 	bl	8009b4a <put_fat>
 8009db4:	4603      	mov	r3, r0
 8009db6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009db8:	7ffb      	ldrb	r3, [r7, #31]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <remove_chain+0x4a>
 8009dbe:	7ffb      	ldrb	r3, [r7, #31]
 8009dc0:	e03b      	b.n	8009e3a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009dc2:	68b9      	ldr	r1, [r7, #8]
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff fdf0 	bl	80099aa <get_fat>
 8009dca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d031      	beq.n	8009e36 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <remove_chain+0x64>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e02e      	b.n	8009e3a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de2:	d101      	bne.n	8009de8 <remove_chain+0x70>
 8009de4:	2301      	movs	r3, #1
 8009de6:	e028      	b.n	8009e3a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009de8:	2200      	movs	r2, #0
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	69b8      	ldr	r0, [r7, #24]
 8009dee:	f7ff feac 	bl	8009b4a <put_fat>
 8009df2:	4603      	mov	r3, r0
 8009df4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009df6:	7ffb      	ldrb	r3, [r7, #31]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <remove_chain+0x88>
 8009dfc:	7ffb      	ldrb	r3, [r7, #31]
 8009dfe:	e01c      	b.n	8009e3a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	699a      	ldr	r2, [r3, #24]
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	69db      	ldr	r3, [r3, #28]
 8009e08:	3b02      	subs	r3, #2
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d20b      	bcs.n	8009e26 <remove_chain+0xae>
			fs->free_clst++;
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	791b      	ldrb	r3, [r3, #4]
 8009e1c:	f043 0301 	orr.w	r3, r3, #1
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d3c6      	bcc.n	8009dc2 <remove_chain+0x4a>
 8009e34:	e000      	b.n	8009e38 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009e36:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3720      	adds	r7, #32
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b088      	sub	sp, #32
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10d      	bne.n	8009e74 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d004      	beq.n	8009e6e <create_chain+0x2c>
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d31b      	bcc.n	8009ea6 <create_chain+0x64>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	61bb      	str	r3, [r7, #24]
 8009e72:	e018      	b.n	8009ea6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff fd97 	bl	80099aa <get_fat>
 8009e7c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d801      	bhi.n	8009e88 <create_chain+0x46>
 8009e84:	2301      	movs	r3, #1
 8009e86:	e070      	b.n	8009f6a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8e:	d101      	bne.n	8009e94 <create_chain+0x52>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	e06a      	b.n	8009f6a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d201      	bcs.n	8009ea2 <create_chain+0x60>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	e063      	b.n	8009f6a <create_chain+0x128>
		scl = clst;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	3301      	adds	r3, #1
 8009eae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	69fa      	ldr	r2, [r7, #28]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d307      	bcc.n	8009eca <create_chain+0x88>
				ncl = 2;
 8009eba:	2302      	movs	r3, #2
 8009ebc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009ebe:	69fa      	ldr	r2, [r7, #28]
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d901      	bls.n	8009eca <create_chain+0x88>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e04f      	b.n	8009f6a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009eca:	69f9      	ldr	r1, [r7, #28]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff fd6c 	bl	80099aa <get_fat>
 8009ed2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00e      	beq.n	8009ef8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d003      	beq.n	8009ee8 <create_chain+0xa6>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee6:	d101      	bne.n	8009eec <create_chain+0xaa>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	e03e      	b.n	8009f6a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009eec:	69fa      	ldr	r2, [r7, #28]
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d1da      	bne.n	8009eaa <create_chain+0x68>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e038      	b.n	8009f6a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009ef8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009efa:	f04f 32ff 	mov.w	r2, #4294967295
 8009efe:	69f9      	ldr	r1, [r7, #28]
 8009f00:	6938      	ldr	r0, [r7, #16]
 8009f02:	f7ff fe22 	bl	8009b4a <put_fat>
 8009f06:	4603      	mov	r3, r0
 8009f08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d109      	bne.n	8009f24 <create_chain+0xe2>
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d006      	beq.n	8009f24 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009f16:	69fa      	ldr	r2, [r7, #28]
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6938      	ldr	r0, [r7, #16]
 8009f1c:	f7ff fe15 	bl	8009b4a <put_fat>
 8009f20:	4603      	mov	r3, r0
 8009f22:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d116      	bne.n	8009f58 <create_chain+0x116>
		fs->last_clst = ncl;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	69fa      	ldr	r2, [r7, #28]
 8009f2e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	3b02      	subs	r3, #2
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d804      	bhi.n	8009f48 <create_chain+0x106>
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	1e5a      	subs	r2, r3, #1
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	791b      	ldrb	r3, [r3, #4]
 8009f4c:	f043 0301 	orr.w	r3, r3, #1
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	711a      	strb	r2, [r3, #4]
 8009f56:	e007      	b.n	8009f68 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d102      	bne.n	8009f64 <create_chain+0x122>
 8009f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f62:	e000      	b.n	8009f66 <create_chain+0x124>
 8009f64:	2301      	movs	r3, #1
 8009f66:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009f68:	69fb      	ldr	r3, [r7, #28]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3720      	adds	r7, #32
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b087      	sub	sp, #28
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	3304      	adds	r3, #4
 8009f88:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	899b      	ldrh	r3, [r3, #12]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	8952      	ldrh	r2, [r2, #10]
 8009f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	1d1a      	adds	r2, r3, #4
 8009fa4:	613a      	str	r2, [r7, #16]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <clmt_clust+0x42>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e010      	b.n	8009fd6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d307      	bcc.n	8009fcc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009fca:	e7e9      	b.n	8009fa0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009fcc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	4413      	add	r3, r2
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b086      	sub	sp, #24
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ff8:	d204      	bcs.n	800a004 <dir_sdi+0x22>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	f003 031f 	and.w	r3, r3, #31
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a004:	2302      	movs	r3, #2
 800a006:	e071      	b.n	800a0ec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d106      	bne.n	800a028 <dir_sdi+0x46>
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d902      	bls.n	800a028 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10c      	bne.n	800a048 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	095b      	lsrs	r3, r3, #5
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	8912      	ldrh	r2, [r2, #8]
 800a036:	4293      	cmp	r3, r2
 800a038:	d301      	bcc.n	800a03e <dir_sdi+0x5c>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e056      	b.n	800a0ec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	61da      	str	r2, [r3, #28]
 800a046:	e02d      	b.n	800a0a4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	895b      	ldrh	r3, [r3, #10]
 800a04c:	461a      	mov	r2, r3
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	899b      	ldrh	r3, [r3, #12]
 800a052:	fb03 f302 	mul.w	r3, r3, r2
 800a056:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a058:	e019      	b.n	800a08e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6979      	ldr	r1, [r7, #20]
 800a05e:	4618      	mov	r0, r3
 800a060:	f7ff fca3 	bl	80099aa <get_fat>
 800a064:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a06c:	d101      	bne.n	800a072 <dir_sdi+0x90>
 800a06e:	2301      	movs	r3, #1
 800a070:	e03c      	b.n	800a0ec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d904      	bls.n	800a082 <dir_sdi+0xa0>
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d301      	bcc.n	800a086 <dir_sdi+0xa4>
 800a082:	2302      	movs	r3, #2
 800a084:	e032      	b.n	800a0ec <dir_sdi+0x10a>
			ofs -= csz;
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	429a      	cmp	r2, r3
 800a094:	d2e1      	bcs.n	800a05a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a096:	6979      	ldr	r1, [r7, #20]
 800a098:	6938      	ldr	r0, [r7, #16]
 800a09a:	f7ff fc67 	bl	800996c <clust2sect>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <dir_sdi+0xd4>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e01a      	b.n	800a0ec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	69da      	ldr	r2, [r3, #28]
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	899b      	ldrh	r3, [r3, #12]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0c6:	441a      	add	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	899b      	ldrh	r3, [r3, #12]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0de:	fb02 f200 	mul.w	r2, r2, r0
 800a0e2:	1a9b      	subs	r3, r3, r2
 800a0e4:	18ca      	adds	r2, r1, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	3320      	adds	r3, #32
 800a10a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d003      	beq.n	800a11c <dir_next+0x28>
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a11a:	d301      	bcc.n	800a120 <dir_next+0x2c>
 800a11c:	2304      	movs	r3, #4
 800a11e:	e0bb      	b.n	800a298 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	899b      	ldrh	r3, [r3, #12]
 800a124:	461a      	mov	r2, r3
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	fbb3 f1f2 	udiv	r1, r3, r2
 800a12c:	fb02 f201 	mul.w	r2, r2, r1
 800a130:	1a9b      	subs	r3, r3, r2
 800a132:	2b00      	cmp	r3, #0
 800a134:	f040 809d 	bne.w	800a272 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	69db      	ldr	r3, [r3, #28]
 800a13c:	1c5a      	adds	r2, r3, #1
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10b      	bne.n	800a162 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	095b      	lsrs	r3, r3, #5
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	8912      	ldrh	r2, [r2, #8]
 800a152:	4293      	cmp	r3, r2
 800a154:	f0c0 808d 	bcc.w	800a272 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	61da      	str	r2, [r3, #28]
 800a15e:	2304      	movs	r3, #4
 800a160:	e09a      	b.n	800a298 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	899b      	ldrh	r3, [r3, #12]
 800a166:	461a      	mov	r2, r3
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	8952      	ldrh	r2, [r2, #10]
 800a172:	3a01      	subs	r2, #1
 800a174:	4013      	ands	r3, r2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d17b      	bne.n	800a272 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7ff fc11 	bl	80099aa <get_fat>
 800a188:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d801      	bhi.n	800a194 <dir_next+0xa0>
 800a190:	2302      	movs	r3, #2
 800a192:	e081      	b.n	800a298 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a19a:	d101      	bne.n	800a1a0 <dir_next+0xac>
 800a19c:	2301      	movs	r3, #1
 800a19e:	e07b      	b.n	800a298 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d359      	bcc.n	800a25e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d104      	bne.n	800a1ba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	61da      	str	r2, [r3, #28]
 800a1b6:	2304      	movs	r3, #4
 800a1b8:	e06e      	b.n	800a298 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	f7ff fe3d 	bl	8009e42 <create_chain>
 800a1c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <dir_next+0xe0>
 800a1d0:	2307      	movs	r3, #7
 800a1d2:	e061      	b.n	800a298 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d101      	bne.n	800a1de <dir_next+0xea>
 800a1da:	2302      	movs	r3, #2
 800a1dc:	e05c      	b.n	800a298 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e4:	d101      	bne.n	800a1ea <dir_next+0xf6>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e056      	b.n	800a298 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff fadc 	bl	80097a8 <sync_window>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <dir_next+0x106>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e04e      	b.n	800a298 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	899b      	ldrh	r3, [r3, #12]
 800a204:	461a      	mov	r2, r3
 800a206:	2100      	movs	r1, #0
 800a208:	f7ff f905 	bl	8009416 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]
 800a210:	6979      	ldr	r1, [r7, #20]
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7ff fbaa 	bl	800996c <clust2sect>
 800a218:	4602      	mov	r2, r0
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	635a      	str	r2, [r3, #52]	; 0x34
 800a21e:	e012      	b.n	800a246 <dir_next+0x152>
						fs->wflag = 1;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2201      	movs	r2, #1
 800a224:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7ff fabe 	bl	80097a8 <sync_window>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <dir_next+0x142>
 800a232:	2301      	movs	r3, #1
 800a234:	e030      	b.n	800a298 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	3301      	adds	r3, #1
 800a23a:	613b      	str	r3, [r7, #16]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	635a      	str	r2, [r3, #52]	; 0x34
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	895b      	ldrh	r3, [r3, #10]
 800a24a:	461a      	mov	r2, r3
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	4293      	cmp	r3, r2
 800a250:	d3e6      	bcc.n	800a220 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	1ad2      	subs	r2, r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a264:	6979      	ldr	r1, [r7, #20]
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f7ff fb80 	bl	800996c <clust2sect>
 800a26c:	4602      	mov	r2, r0
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	899b      	ldrh	r3, [r3, #12]
 800a282:	461a      	mov	r2, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	fbb3 f0f2 	udiv	r0, r3, r2
 800a28a:	fb02 f200 	mul.w	r2, r2, r0
 800a28e:	1a9b      	subs	r3, r3, r2
 800a290:	18ca      	adds	r2, r1, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff fe95 	bl	8009fe2 <dir_sdi>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d12b      	bne.n	800a31a <dir_alloc+0x7a>
		n = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	69db      	ldr	r3, [r3, #28]
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7ff faaf 	bl	8009830 <move_window>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d11d      	bne.n	800a318 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a1b      	ldr	r3, [r3, #32]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	2be5      	cmp	r3, #229	; 0xe5
 800a2e4:	d004      	beq.n	800a2f0 <dir_alloc+0x50>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d107      	bne.n	800a300 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	613b      	str	r3, [r7, #16]
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d102      	bne.n	800a304 <dir_alloc+0x64>
 800a2fe:	e00c      	b.n	800a31a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a300:	2300      	movs	r3, #0
 800a302:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a304:	2101      	movs	r1, #1
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7ff fef4 	bl	800a0f4 <dir_next>
 800a30c:	4603      	mov	r3, r0
 800a30e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a310:	7dfb      	ldrb	r3, [r7, #23]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d0d7      	beq.n	800a2c6 <dir_alloc+0x26>
 800a316:	e000      	b.n	800a31a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a318:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d101      	bne.n	800a324 <dir_alloc+0x84>
 800a320:	2307      	movs	r3, #7
 800a322:	75fb      	strb	r3, [r7, #23]
	return res;
 800a324:	7dfb      	ldrb	r3, [r7, #23]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b084      	sub	sp, #16
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	331a      	adds	r3, #26
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe ffc7 	bl	80092d0 <ld_word>
 800a342:	4603      	mov	r3, r0
 800a344:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d109      	bne.n	800a362 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	3314      	adds	r3, #20
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe ffbc 	bl	80092d0 <ld_word>
 800a358:	4603      	mov	r3, r0
 800a35a:	041b      	lsls	r3, r3, #16
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	4313      	orrs	r3, r2
 800a360:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a362:	68fb      	ldr	r3, [r7, #12]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	331a      	adds	r3, #26
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	b292      	uxth	r2, r2
 800a380:	4611      	mov	r1, r2
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe ffdf 	bl	8009346 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d109      	bne.n	800a3a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f103 0214 	add.w	r2, r3, #20
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	0c1b      	lsrs	r3, r3, #16
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	4619      	mov	r1, r3
 800a39e:	4610      	mov	r0, r2
 800a3a0:	f7fe ffd1 	bl	8009346 <st_word>
	}
}
 800a3a4:	bf00      	nop
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a3ac:	b590      	push	{r4, r7, lr}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	331a      	adds	r3, #26
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe ff88 	bl	80092d0 <ld_word>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <cmp_lfn+0x1e>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e059      	b.n	800a47e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3d2:	1e5a      	subs	r2, r3, #1
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	4413      	add	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	81fb      	strh	r3, [r7, #14]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	613b      	str	r3, [r7, #16]
 800a3e8:	e033      	b.n	800a452 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a3ea:	4a27      	ldr	r2, [pc, #156]	; (800a488 <cmp_lfn+0xdc>)
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fe ff69 	bl	80092d0 <ld_word>
 800a3fe:	4603      	mov	r3, r0
 800a400:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a402:	89fb      	ldrh	r3, [r7, #14]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d01a      	beq.n	800a43e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2bfe      	cmp	r3, #254	; 0xfe
 800a40c:	d812      	bhi.n	800a434 <cmp_lfn+0x88>
 800a40e:	89bb      	ldrh	r3, [r7, #12]
 800a410:	4618      	mov	r0, r3
 800a412:	f001 ffaf 	bl	800c374 <ff_wtoupper>
 800a416:	4603      	mov	r3, r0
 800a418:	461c      	mov	r4, r3
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	617a      	str	r2, [r7, #20]
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	4413      	add	r3, r2
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	4618      	mov	r0, r3
 800a42a:	f001 ffa3 	bl	800c374 <ff_wtoupper>
 800a42e:	4603      	mov	r3, r0
 800a430:	429c      	cmp	r4, r3
 800a432:	d001      	beq.n	800a438 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a434:	2300      	movs	r3, #0
 800a436:	e022      	b.n	800a47e <cmp_lfn+0xd2>
			}
			wc = uc;
 800a438:	89bb      	ldrh	r3, [r7, #12]
 800a43a:	81fb      	strh	r3, [r7, #14]
 800a43c:	e006      	b.n	800a44c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a43e:	89bb      	ldrh	r3, [r7, #12]
 800a440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a444:	4293      	cmp	r3, r2
 800a446:	d001      	beq.n	800a44c <cmp_lfn+0xa0>
 800a448:	2300      	movs	r3, #0
 800a44a:	e018      	b.n	800a47e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	3301      	adds	r3, #1
 800a450:	613b      	str	r3, [r7, #16]
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	2b0c      	cmp	r3, #12
 800a456:	d9c8      	bls.n	800a3ea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00b      	beq.n	800a47c <cmp_lfn+0xd0>
 800a464:	89fb      	ldrh	r3, [r7, #14]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d008      	beq.n	800a47c <cmp_lfn+0xd0>
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	4413      	add	r3, r2
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <cmp_lfn+0xd0>
 800a478:	2300      	movs	r3, #0
 800a47a:	e000      	b.n	800a47e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a47c:	2301      	movs	r3, #1
}
 800a47e:	4618      	mov	r0, r3
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	bd90      	pop	{r4, r7, pc}
 800a486:	bf00      	nop
 800a488:	0800c9a4 	.word	0x0800c9a4

0800a48c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b088      	sub	sp, #32
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4611      	mov	r1, r2
 800a498:	461a      	mov	r2, r3
 800a49a:	460b      	mov	r3, r1
 800a49c:	71fb      	strb	r3, [r7, #7]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	330d      	adds	r3, #13
 800a4a6:	79ba      	ldrb	r2, [r7, #6]
 800a4a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	330b      	adds	r3, #11
 800a4ae:	220f      	movs	r2, #15
 800a4b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	330c      	adds	r3, #12
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	331a      	adds	r3, #26
 800a4be:	2100      	movs	r1, #0
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fe ff40 	bl	8009346 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a4c6:	79fb      	ldrb	r3, [r7, #7]
 800a4c8:	1e5a      	subs	r2, r3, #1
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	4413      	add	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	82fb      	strh	r3, [r7, #22]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a4de:	8afb      	ldrh	r3, [r7, #22]
 800a4e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d007      	beq.n	800a4f8 <put_lfn+0x6c>
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	61fa      	str	r2, [r7, #28]
 800a4ee:	005b      	lsls	r3, r3, #1
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a4f8:	4a17      	ldr	r2, [pc, #92]	; (800a558 <put_lfn+0xcc>)
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	461a      	mov	r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	4413      	add	r3, r2
 800a506:	8afa      	ldrh	r2, [r7, #22]
 800a508:	4611      	mov	r1, r2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe ff1b 	bl	8009346 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a510:	8afb      	ldrh	r3, [r7, #22]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d102      	bne.n	800a51c <put_lfn+0x90>
 800a516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a51a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	3301      	adds	r3, #1
 800a520:	61bb      	str	r3, [r7, #24]
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	2b0c      	cmp	r3, #12
 800a526:	d9da      	bls.n	800a4de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a528:	8afb      	ldrh	r3, [r7, #22]
 800a52a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a52e:	4293      	cmp	r3, r2
 800a530:	d006      	beq.n	800a540 <put_lfn+0xb4>
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	4413      	add	r3, r2
 800a53a:	881b      	ldrh	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <put_lfn+0xbc>
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a546:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	79fa      	ldrb	r2, [r7, #7]
 800a54c:	701a      	strb	r2, [r3, #0]
}
 800a54e:	bf00      	nop
 800a550:	3720      	adds	r7, #32
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	0800c9a4 	.word	0x0800c9a4

0800a55c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08c      	sub	sp, #48	; 0x30
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a56a:	220b      	movs	r2, #11
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7fe ff30 	bl	80093d4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b05      	cmp	r3, #5
 800a578:	d92b      	bls.n	800a5d2 <gen_numname+0x76>
		sr = seq;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a57e:	e022      	b.n	800a5c6 <gen_numname+0x6a>
			wc = *lfn++;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	1c9a      	adds	r2, r3, #2
 800a584:	607a      	str	r2, [r7, #4]
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a58a:	2300      	movs	r3, #0
 800a58c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a58e:	e017      	b.n	800a5c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	005a      	lsls	r2, r3, #1
 800a594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	4413      	add	r3, r2
 800a59c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a59e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5a0:	085b      	lsrs	r3, r3, #1
 800a5a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <gen_numname+0x5e>
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a5b4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a5b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	3301      	adds	r3, #1
 800a5be:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	2b0f      	cmp	r3, #15
 800a5c4:	d9e4      	bls.n	800a590 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1d8      	bne.n	800a580 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a5d2:	2307      	movs	r3, #7
 800a5d4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	f003 030f 	and.w	r3, r3, #15
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	3330      	adds	r3, #48	; 0x30
 800a5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5ea:	2b39      	cmp	r3, #57	; 0x39
 800a5ec:	d904      	bls.n	800a5f8 <gen_numname+0x9c>
 800a5ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5f2:	3307      	adds	r3, #7
 800a5f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	1e5a      	subs	r2, r3, #1
 800a5fc:	62ba      	str	r2, [r7, #40]	; 0x28
 800a5fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a602:	4413      	add	r3, r2
 800a604:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a608:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	091b      	lsrs	r3, r3, #4
 800a610:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1de      	bne.n	800a5d6 <gen_numname+0x7a>
	ns[i] = '~';
 800a618:	f107 0214 	add.w	r2, r7, #20
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	4413      	add	r3, r2
 800a620:	227e      	movs	r2, #126	; 0x7e
 800a622:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a624:	2300      	movs	r3, #0
 800a626:	627b      	str	r3, [r7, #36]	; 0x24
 800a628:	e002      	b.n	800a630 <gen_numname+0xd4>
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	3301      	adds	r3, #1
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24
 800a630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	429a      	cmp	r2, r3
 800a636:	d205      	bcs.n	800a644 <gen_numname+0xe8>
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	4413      	add	r3, r2
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	2b20      	cmp	r3, #32
 800a642:	d1f2      	bne.n	800a62a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a646:	2b07      	cmp	r3, #7
 800a648:	d808      	bhi.n	800a65c <gen_numname+0x100>
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	62ba      	str	r2, [r7, #40]	; 0x28
 800a650:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a654:	4413      	add	r3, r2
 800a656:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a65a:	e000      	b.n	800a65e <gen_numname+0x102>
 800a65c:	2120      	movs	r1, #32
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	627a      	str	r2, [r7, #36]	; 0x24
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4413      	add	r3, r2
 800a668:	460a      	mov	r2, r1
 800a66a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	2b07      	cmp	r3, #7
 800a670:	d9e8      	bls.n	800a644 <gen_numname+0xe8>
}
 800a672:	bf00      	nop
 800a674:	3730      	adds	r7, #48	; 0x30
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b085      	sub	sp, #20
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a686:	230b      	movs	r3, #11
 800a688:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	0852      	lsrs	r2, r2, #1
 800a690:	01db      	lsls	r3, r3, #7
 800a692:	4313      	orrs	r3, r2
 800a694:	b2da      	uxtb	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	1c59      	adds	r1, r3, #1
 800a69a:	6079      	str	r1, [r7, #4]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	4413      	add	r3, r2
 800a6a0:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	60bb      	str	r3, [r7, #8]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1ed      	bne.n	800a68a <sum_sfn+0x10>
	return sum;
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7ff fc88 	bl	8009fe2 <dir_sdi>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a6d6:	7dfb      	ldrb	r3, [r7, #23]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <dir_find+0x24>
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
 800a6de:	e0a9      	b.n	800a834 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a6e0:	23ff      	movs	r3, #255	; 0xff
 800a6e2:	753b      	strb	r3, [r7, #20]
 800a6e4:	7d3b      	ldrb	r3, [r7, #20]
 800a6e6:	757b      	strb	r3, [r7, #21]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	69db      	ldr	r3, [r3, #28]
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6938      	ldr	r0, [r7, #16]
 800a6f8:	f7ff f89a 	bl	8009830 <move_window>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	2b00      	cmp	r3, #0
 800a704:	f040 8090 	bne.w	800a828 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a710:	7dbb      	ldrb	r3, [r7, #22]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d102      	bne.n	800a71c <dir_find+0x60>
 800a716:	2304      	movs	r3, #4
 800a718:	75fb      	strb	r3, [r7, #23]
 800a71a:	e08a      	b.n	800a832 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	330b      	adds	r3, #11
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a728:	73fb      	strb	r3, [r7, #15]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	7bfa      	ldrb	r2, [r7, #15]
 800a72e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a730:	7dbb      	ldrb	r3, [r7, #22]
 800a732:	2be5      	cmp	r3, #229	; 0xe5
 800a734:	d007      	beq.n	800a746 <dir_find+0x8a>
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	f003 0308 	and.w	r3, r3, #8
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d009      	beq.n	800a754 <dir_find+0x98>
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	2b0f      	cmp	r3, #15
 800a744:	d006      	beq.n	800a754 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a746:	23ff      	movs	r3, #255	; 0xff
 800a748:	757b      	strb	r3, [r7, #21]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f04f 32ff 	mov.w	r2, #4294967295
 800a750:	631a      	str	r2, [r3, #48]	; 0x30
 800a752:	e05e      	b.n	800a812 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	2b0f      	cmp	r3, #15
 800a758:	d136      	bne.n	800a7c8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	d154      	bne.n	800a812 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a768:	7dbb      	ldrb	r3, [r7, #22]
 800a76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00d      	beq.n	800a78e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	7b5b      	ldrb	r3, [r3, #13]
 800a778:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a77a:	7dbb      	ldrb	r3, [r7, #22]
 800a77c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a780:	75bb      	strb	r3, [r7, #22]
 800a782:	7dbb      	ldrb	r3, [r7, #22]
 800a784:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	695a      	ldr	r2, [r3, #20]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a78e:	7dba      	ldrb	r2, [r7, #22]
 800a790:	7d7b      	ldrb	r3, [r7, #21]
 800a792:	429a      	cmp	r2, r3
 800a794:	d115      	bne.n	800a7c2 <dir_find+0x106>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	330d      	adds	r3, #13
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	7d3a      	ldrb	r2, [r7, #20]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d10e      	bne.n	800a7c2 <dir_find+0x106>
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	691a      	ldr	r2, [r3, #16]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4610      	mov	r0, r2
 800a7b0:	f7ff fdfc 	bl	800a3ac <cmp_lfn>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <dir_find+0x106>
 800a7ba:	7d7b      	ldrb	r3, [r7, #21]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	e000      	b.n	800a7c4 <dir_find+0x108>
 800a7c2:	23ff      	movs	r3, #255	; 0xff
 800a7c4:	757b      	strb	r3, [r7, #21]
 800a7c6:	e024      	b.n	800a812 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a7c8:	7d7b      	ldrb	r3, [r7, #21]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d109      	bne.n	800a7e2 <dir_find+0x126>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7ff ff51 	bl	800a67a <sum_sfn>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	461a      	mov	r2, r3
 800a7dc:	7d3b      	ldrb	r3, [r7, #20]
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d024      	beq.n	800a82c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10a      	bne.n	800a806 <dir_find+0x14a>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a18      	ldr	r0, [r3, #32]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3324      	adds	r3, #36	; 0x24
 800a7f8:	220b      	movs	r2, #11
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	f7fe fe25 	bl	800944a <mem_cmp>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d014      	beq.n	800a830 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a806:	23ff      	movs	r3, #255	; 0xff
 800a808:	757b      	strb	r3, [r7, #21]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f04f 32ff 	mov.w	r2, #4294967295
 800a810:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a812:	2100      	movs	r1, #0
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff fc6d 	bl	800a0f4 <dir_next>
 800a81a:	4603      	mov	r3, r0
 800a81c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	2b00      	cmp	r3, #0
 800a822:	f43f af65 	beq.w	800a6f0 <dir_find+0x34>
 800a826:	e004      	b.n	800a832 <dir_find+0x176>
		if (res != FR_OK) break;
 800a828:	bf00      	nop
 800a82a:	e002      	b.n	800a832 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a82c:	bf00      	nop
 800a82e:	e000      	b.n	800a832 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a830:	bf00      	nop

	return res;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08c      	sub	sp, #48	; 0x30
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a850:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <dir_register+0x20>
 800a858:	2306      	movs	r3, #6
 800a85a:	e0e0      	b.n	800aa1e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a85c:	2300      	movs	r3, #0
 800a85e:	627b      	str	r3, [r7, #36]	; 0x24
 800a860:	e002      	b.n	800a868 <dir_register+0x2c>
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a864:	3301      	adds	r3, #1
 800a866:	627b      	str	r3, [r7, #36]	; 0x24
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	691a      	ldr	r2, [r3, #16]
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	005b      	lsls	r3, r3, #1
 800a870:	4413      	add	r3, r2
 800a872:	881b      	ldrh	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1f4      	bne.n	800a862 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a87e:	f107 030c 	add.w	r3, r7, #12
 800a882:	220c      	movs	r2, #12
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe fda5 	bl	80093d4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a88a:	7dfb      	ldrb	r3, [r7, #23]
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	2b00      	cmp	r3, #0
 800a892:	d032      	beq.n	800a8fa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2240      	movs	r2, #64	; 0x40
 800a898:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a89c:	2301      	movs	r3, #1
 800a89e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8a0:	e016      	b.n	800a8d0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	691a      	ldr	r2, [r3, #16]
 800a8ac:	f107 010c 	add.w	r1, r7, #12
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	f7ff fe53 	bl	800a55c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7ff ff00 	bl	800a6bc <dir_find>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a8c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d106      	bne.n	800a8d8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d2:	2b63      	cmp	r3, #99	; 0x63
 800a8d4:	d9e5      	bls.n	800a8a2 <dir_register+0x66>
 800a8d6:	e000      	b.n	800a8da <dir_register+0x9e>
			if (res != FR_OK) break;
 800a8d8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	2b64      	cmp	r3, #100	; 0x64
 800a8de:	d101      	bne.n	800a8e4 <dir_register+0xa8>
 800a8e0:	2307      	movs	r3, #7
 800a8e2:	e09c      	b.n	800aa1e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a8e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d002      	beq.n	800a8f2 <dir_register+0xb6>
 800a8ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a8f0:	e095      	b.n	800aa1e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a8f2:	7dfa      	ldrb	r2, [r7, #23]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
 800a8fc:	f003 0302 	and.w	r3, r3, #2
 800a900:	2b00      	cmp	r3, #0
 800a902:	d007      	beq.n	800a914 <dir_register+0xd8>
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	330c      	adds	r3, #12
 800a908:	4a47      	ldr	r2, [pc, #284]	; (800aa28 <dir_register+0x1ec>)
 800a90a:	fba2 2303 	umull	r2, r3, r2, r3
 800a90e:	089b      	lsrs	r3, r3, #2
 800a910:	3301      	adds	r3, #1
 800a912:	e000      	b.n	800a916 <dir_register+0xda>
 800a914:	2301      	movs	r3, #1
 800a916:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a918:	6a39      	ldr	r1, [r7, #32]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7ff fcc0 	bl	800a2a0 <dir_alloc>
 800a920:	4603      	mov	r3, r0
 800a922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d148      	bne.n	800a9c0 <dir_register+0x184>
 800a92e:	6a3b      	ldr	r3, [r7, #32]
 800a930:	3b01      	subs	r3, #1
 800a932:	623b      	str	r3, [r7, #32]
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d042      	beq.n	800a9c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	695a      	ldr	r2, [r3, #20]
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	015b      	lsls	r3, r3, #5
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	4619      	mov	r1, r3
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7ff fb4b 	bl	8009fe2 <dir_sdi>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a956:	2b00      	cmp	r3, #0
 800a958:	d132      	bne.n	800a9c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	3324      	adds	r3, #36	; 0x24
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff fe8b 	bl	800a67a <sum_sfn>
 800a964:	4603      	mov	r3, r0
 800a966:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	4619      	mov	r1, r3
 800a96e:	69f8      	ldr	r0, [r7, #28]
 800a970:	f7fe ff5e 	bl	8009830 <move_window>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a97a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d11d      	bne.n	800a9be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	6918      	ldr	r0, [r3, #16]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a19      	ldr	r1, [r3, #32]
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	7efb      	ldrb	r3, [r7, #27]
 800a990:	f7ff fd7c 	bl	800a48c <put_lfn>
				fs->wflag = 1;
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	2201      	movs	r2, #1
 800a998:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a99a:	2100      	movs	r1, #0
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7ff fba9 	bl	800a0f4 <dir_next>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a9a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d107      	bne.n	800a9c0 <dir_register+0x184>
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	623b      	str	r3, [r7, #32]
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1d5      	bne.n	800a968 <dir_register+0x12c>
 800a9bc:	e000      	b.n	800a9c0 <dir_register+0x184>
				if (res != FR_OK) break;
 800a9be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a9c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d128      	bne.n	800aa1a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	69db      	ldr	r3, [r3, #28]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	69f8      	ldr	r0, [r7, #28]
 800a9d0:	f7fe ff2e 	bl	8009830 <move_window>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a9da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d11b      	bne.n	800aa1a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe fd13 	bl	8009416 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a18      	ldr	r0, [r3, #32]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	3324      	adds	r3, #36	; 0x24
 800a9f8:	220b      	movs	r2, #11
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f7fe fcea 	bl	80093d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	330c      	adds	r3, #12
 800aa0c:	f002 0218 	and.w	r2, r2, #24
 800aa10:	b2d2      	uxtb	r2, r2
 800aa12:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	2201      	movs	r2, #1
 800aa18:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aa1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3730      	adds	r7, #48	; 0x30
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	4ec4ec4f 	.word	0x4ec4ec4f

0800aa2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08a      	sub	sp, #40	; 0x28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	613b      	str	r3, [r7, #16]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	2300      	movs	r3, #0
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	1c5a      	adds	r2, r3, #1
 800aa50:	61ba      	str	r2, [r7, #24]
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	4413      	add	r3, r2
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800aa5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa5c:	2b1f      	cmp	r3, #31
 800aa5e:	d940      	bls.n	800aae2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800aa60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa62:	2b2f      	cmp	r3, #47	; 0x2f
 800aa64:	d006      	beq.n	800aa74 <create_name+0x48>
 800aa66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa68:	2b5c      	cmp	r3, #92	; 0x5c
 800aa6a:	d110      	bne.n	800aa8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aa6c:	e002      	b.n	800aa74 <create_name+0x48>
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	3301      	adds	r3, #1
 800aa72:	61bb      	str	r3, [r7, #24]
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	4413      	add	r3, r2
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b2f      	cmp	r3, #47	; 0x2f
 800aa7e:	d0f6      	beq.n	800aa6e <create_name+0x42>
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	4413      	add	r3, r2
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	2b5c      	cmp	r3, #92	; 0x5c
 800aa8a:	d0f0      	beq.n	800aa6e <create_name+0x42>
			break;
 800aa8c:	e02a      	b.n	800aae4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2bfe      	cmp	r3, #254	; 0xfe
 800aa92:	d901      	bls.n	800aa98 <create_name+0x6c>
 800aa94:	2306      	movs	r3, #6
 800aa96:	e177      	b.n	800ad88 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800aa98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800aa9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaa0:	2101      	movs	r1, #1
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f001 fc2a 	bl	800c2fc <ff_convert>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aaac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d101      	bne.n	800aab6 <create_name+0x8a>
 800aab2:	2306      	movs	r3, #6
 800aab4:	e168      	b.n	800ad88 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800aab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aab8:	2b7f      	cmp	r3, #127	; 0x7f
 800aaba:	d809      	bhi.n	800aad0 <create_name+0xa4>
 800aabc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aabe:	4619      	mov	r1, r3
 800aac0:	48b3      	ldr	r0, [pc, #716]	; (800ad90 <create_name+0x364>)
 800aac2:	f7fe fce9 	bl	8009498 <chk_chr>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <create_name+0xa4>
 800aacc:	2306      	movs	r3, #6
 800aace:	e15b      	b.n	800ad88 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	617a      	str	r2, [r7, #20]
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	4413      	add	r3, r2
 800aadc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aade:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800aae0:	e7b4      	b.n	800aa4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800aae2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	441a      	add	r2, r3
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aaee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaf0:	2b1f      	cmp	r3, #31
 800aaf2:	d801      	bhi.n	800aaf8 <create_name+0xcc>
 800aaf4:	2304      	movs	r3, #4
 800aaf6:	e000      	b.n	800aafa <create_name+0xce>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aafe:	e011      	b.n	800ab24 <create_name+0xf8>
		w = lfn[di - 1];
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ab06:	3b01      	subs	r3, #1
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	881b      	ldrh	r3, [r3, #0]
 800ab10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ab12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab14:	2b20      	cmp	r3, #32
 800ab16:	d002      	beq.n	800ab1e <create_name+0xf2>
 800ab18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab1a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab1c:	d106      	bne.n	800ab2c <create_name+0x100>
		di--;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1ea      	bne.n	800ab00 <create_name+0xd4>
 800ab2a:	e000      	b.n	800ab2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ab2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	005b      	lsls	r3, r3, #1
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4413      	add	r3, r2
 800ab36:	2200      	movs	r2, #0
 800ab38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <create_name+0x118>
 800ab40:	2306      	movs	r3, #6
 800ab42:	e121      	b.n	800ad88 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3324      	adds	r3, #36	; 0x24
 800ab48:	220b      	movs	r2, #11
 800ab4a:	2120      	movs	r1, #32
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fe fc62 	bl	8009416 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ab52:	2300      	movs	r3, #0
 800ab54:	61bb      	str	r3, [r7, #24]
 800ab56:	e002      	b.n	800ab5e <create_name+0x132>
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	61bb      	str	r3, [r7, #24]
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	005b      	lsls	r3, r3, #1
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	4413      	add	r3, r2
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	2b20      	cmp	r3, #32
 800ab6a:	d0f5      	beq.n	800ab58 <create_name+0x12c>
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	4413      	add	r3, r2
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	2b2e      	cmp	r3, #46	; 0x2e
 800ab78:	d0ee      	beq.n	800ab58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d009      	beq.n	800ab94 <create_name+0x168>
 800ab80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab84:	f043 0303 	orr.w	r3, r3, #3
 800ab88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ab8c:	e002      	b.n	800ab94 <create_name+0x168>
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	617b      	str	r3, [r7, #20]
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d009      	beq.n	800abae <create_name+0x182>
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aba0:	3b01      	subs	r3, #1
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	4413      	add	r3, r2
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	2b2e      	cmp	r3, #46	; 0x2e
 800abac:	d1ef      	bne.n	800ab8e <create_name+0x162>

	i = b = 0; ni = 8;
 800abae:	2300      	movs	r3, #0
 800abb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800abb4:	2300      	movs	r3, #0
 800abb6:	623b      	str	r3, [r7, #32]
 800abb8:	2308      	movs	r3, #8
 800abba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	61ba      	str	r2, [r7, #24]
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	4413      	add	r3, r2
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800abcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f000 8090 	beq.w	800acf4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800abd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abd6:	2b20      	cmp	r3, #32
 800abd8:	d006      	beq.n	800abe8 <create_name+0x1bc>
 800abda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abdc:	2b2e      	cmp	r3, #46	; 0x2e
 800abde:	d10a      	bne.n	800abf6 <create_name+0x1ca>
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d006      	beq.n	800abf6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800abe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abec:	f043 0303 	orr.w	r3, r3, #3
 800abf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abf4:	e07d      	b.n	800acf2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800abf6:	6a3a      	ldr	r2, [r7, #32]
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d203      	bcs.n	800ac06 <create_name+0x1da>
 800abfe:	69ba      	ldr	r2, [r7, #24]
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d123      	bne.n	800ac4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	2b0b      	cmp	r3, #11
 800ac0a:	d106      	bne.n	800ac1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ac0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac10:	f043 0303 	orr.w	r3, r3, #3
 800ac14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac18:	e06f      	b.n	800acfa <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ac1a:	69ba      	ldr	r2, [r7, #24]
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d005      	beq.n	800ac2e <create_name+0x202>
 800ac22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac26:	f043 0303 	orr.w	r3, r3, #3
 800ac2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ac2e:	69ba      	ldr	r2, [r7, #24]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d860      	bhi.n	800acf8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	61bb      	str	r3, [r7, #24]
 800ac3a:	2308      	movs	r3, #8
 800ac3c:	623b      	str	r3, [r7, #32]
 800ac3e:	230b      	movs	r3, #11
 800ac40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ac42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac4c:	e051      	b.n	800acf2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ac4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac50:	2b7f      	cmp	r3, #127	; 0x7f
 800ac52:	d914      	bls.n	800ac7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ac54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac56:	2100      	movs	r1, #0
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f001 fb4f 	bl	800c2fc <ff_convert>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ac62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d004      	beq.n	800ac72 <create_name+0x246>
 800ac68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac6a:	3b80      	subs	r3, #128	; 0x80
 800ac6c:	4a49      	ldr	r2, [pc, #292]	; (800ad94 <create_name+0x368>)
 800ac6e:	5cd3      	ldrb	r3, [r2, r3]
 800ac70:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ac72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac76:	f043 0302 	orr.w	r3, r3, #2
 800ac7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ac7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d007      	beq.n	800ac94 <create_name+0x268>
 800ac84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac86:	4619      	mov	r1, r3
 800ac88:	4843      	ldr	r0, [pc, #268]	; (800ad98 <create_name+0x36c>)
 800ac8a:	f7fe fc05 	bl	8009498 <chk_chr>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d008      	beq.n	800aca6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ac94:	235f      	movs	r3, #95	; 0x5f
 800ac96:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ac98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac9c:	f043 0303 	orr.w	r3, r3, #3
 800aca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aca4:	e01b      	b.n	800acde <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800aca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aca8:	2b40      	cmp	r3, #64	; 0x40
 800acaa:	d909      	bls.n	800acc0 <create_name+0x294>
 800acac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acae:	2b5a      	cmp	r3, #90	; 0x5a
 800acb0:	d806      	bhi.n	800acc0 <create_name+0x294>
					b |= 2;
 800acb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acb6:	f043 0302 	orr.w	r3, r3, #2
 800acba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800acbe:	e00e      	b.n	800acde <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800acc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acc2:	2b60      	cmp	r3, #96	; 0x60
 800acc4:	d90b      	bls.n	800acde <create_name+0x2b2>
 800acc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acc8:	2b7a      	cmp	r3, #122	; 0x7a
 800acca:	d808      	bhi.n	800acde <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800accc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acd0:	f043 0301 	orr.w	r3, r3, #1
 800acd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800acd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acda:	3b20      	subs	r3, #32
 800acdc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800acde:	6a3b      	ldr	r3, [r7, #32]
 800ace0:	1c5a      	adds	r2, r3, #1
 800ace2:	623a      	str	r2, [r7, #32]
 800ace4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ace6:	b2d1      	uxtb	r1, r2
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	4413      	add	r3, r2
 800acec:	460a      	mov	r2, r1
 800acee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800acf2:	e763      	b.n	800abbc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800acf4:	bf00      	nop
 800acf6:	e000      	b.n	800acfa <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800acf8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad00:	2be5      	cmp	r3, #229	; 0xe5
 800ad02:	d103      	bne.n	800ad0c <create_name+0x2e0>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2205      	movs	r2, #5
 800ad08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	2b08      	cmp	r3, #8
 800ad10:	d104      	bne.n	800ad1c <create_name+0x2f0>
 800ad12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ad1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad20:	f003 030c 	and.w	r3, r3, #12
 800ad24:	2b0c      	cmp	r3, #12
 800ad26:	d005      	beq.n	800ad34 <create_name+0x308>
 800ad28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad2c:	f003 0303 	and.w	r3, r3, #3
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d105      	bne.n	800ad40 <create_name+0x314>
 800ad34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad38:	f043 0302 	orr.w	r3, r3, #2
 800ad3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ad40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d117      	bne.n	800ad7c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ad4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad50:	f003 0303 	and.w	r3, r3, #3
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d105      	bne.n	800ad64 <create_name+0x338>
 800ad58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad5c:	f043 0310 	orr.w	r3, r3, #16
 800ad60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ad64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad68:	f003 030c 	and.w	r3, r3, #12
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	d105      	bne.n	800ad7c <create_name+0x350>
 800ad70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad74:	f043 0308 	orr.w	r3, r3, #8
 800ad78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ad82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ad86:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3728      	adds	r7, #40	; 0x28
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	0800c88c 	.word	0x0800c88c
 800ad94:	0800c924 	.word	0x0800c924
 800ad98:	0800c898 	.word	0x0800c898

0800ad9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800adb0:	e002      	b.n	800adb8 <follow_path+0x1c>
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	3301      	adds	r3, #1
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b2f      	cmp	r3, #47	; 0x2f
 800adbe:	d0f8      	beq.n	800adb2 <follow_path+0x16>
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	2b5c      	cmp	r3, #92	; 0x5c
 800adc6:	d0f4      	beq.n	800adb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2200      	movs	r2, #0
 800adcc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b1f      	cmp	r3, #31
 800add4:	d80a      	bhi.n	800adec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2280      	movs	r2, #128	; 0x80
 800adda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800adde:	2100      	movs	r1, #0
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff f8fe 	bl	8009fe2 <dir_sdi>
 800ade6:	4603      	mov	r3, r0
 800ade8:	75fb      	strb	r3, [r7, #23]
 800adea:	e048      	b.n	800ae7e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800adec:	463b      	mov	r3, r7
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7ff fe1b 	bl	800aa2c <create_name>
 800adf6:	4603      	mov	r3, r0
 800adf8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d139      	bne.n	800ae74 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff fc5b 	bl	800a6bc <dir_find>
 800ae06:	4603      	mov	r3, r0
 800ae08:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae10:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00a      	beq.n	800ae2e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ae18:	7dfb      	ldrb	r3, [r7, #23]
 800ae1a:	2b04      	cmp	r3, #4
 800ae1c:	d12c      	bne.n	800ae78 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ae1e:	7afb      	ldrb	r3, [r7, #11]
 800ae20:	f003 0304 	and.w	r3, r3, #4
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d127      	bne.n	800ae78 <follow_path+0xdc>
 800ae28:	2305      	movs	r3, #5
 800ae2a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ae2c:	e024      	b.n	800ae78 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae2e:	7afb      	ldrb	r3, [r7, #11]
 800ae30:	f003 0304 	and.w	r3, r3, #4
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d121      	bne.n	800ae7c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	799b      	ldrb	r3, [r3, #6]
 800ae3c:	f003 0310 	and.w	r3, r3, #16
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d102      	bne.n	800ae4a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ae44:	2305      	movs	r3, #5
 800ae46:	75fb      	strb	r3, [r7, #23]
 800ae48:	e019      	b.n	800ae7e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	8992      	ldrh	r2, [r2, #12]
 800ae58:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae5c:	fb02 f200 	mul.w	r2, r2, r0
 800ae60:	1a9b      	subs	r3, r3, r2
 800ae62:	440b      	add	r3, r1
 800ae64:	4619      	mov	r1, r3
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f7ff fa61 	bl	800a32e <ld_clust>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae72:	e7bb      	b.n	800adec <follow_path+0x50>
			if (res != FR_OK) break;
 800ae74:	bf00      	nop
 800ae76:	e002      	b.n	800ae7e <follow_path+0xe2>
				break;
 800ae78:	bf00      	nop
 800ae7a:	e000      	b.n	800ae7e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae7c:	bf00      	nop
			}
		}
	}

	return res;
 800ae7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b087      	sub	sp, #28
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ae90:	f04f 33ff 	mov.w	r3, #4294967295
 800ae94:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d031      	beq.n	800af02 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e002      	b.n	800aeac <get_ldnumber+0x24>
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	617b      	str	r3, [r7, #20]
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b1f      	cmp	r3, #31
 800aeb2:	d903      	bls.n	800aebc <get_ldnumber+0x34>
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	2b3a      	cmp	r3, #58	; 0x3a
 800aeba:	d1f4      	bne.n	800aea6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b3a      	cmp	r3, #58	; 0x3a
 800aec2:	d11c      	bne.n	800aefe <get_ldnumber+0x76>
			tp = *path;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	1c5a      	adds	r2, r3, #1
 800aece:	60fa      	str	r2, [r7, #12]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	3b30      	subs	r3, #48	; 0x30
 800aed4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	2b09      	cmp	r3, #9
 800aeda:	d80e      	bhi.n	800aefa <get_ldnumber+0x72>
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d10a      	bne.n	800aefa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d107      	bne.n	800aefa <get_ldnumber+0x72>
					vol = (int)i;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	3301      	adds	r3, #1
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	e002      	b.n	800af04 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aefe:	2300      	movs	r3, #0
 800af00:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800af02:	693b      	ldr	r3, [r7, #16]
}
 800af04:	4618      	mov	r0, r3
 800af06:	371c      	adds	r7, #28
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	70da      	strb	r2, [r3, #3]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f04f 32ff 	mov.w	r2, #4294967295
 800af26:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7fe fc80 	bl	8009830 <move_window>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d001      	beq.n	800af3a <check_fs+0x2a>
 800af36:	2304      	movs	r3, #4
 800af38:	e038      	b.n	800afac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3338      	adds	r3, #56	; 0x38
 800af3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe f9c4 	bl	80092d0 <ld_word>
 800af48:	4603      	mov	r3, r0
 800af4a:	461a      	mov	r2, r3
 800af4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800af50:	429a      	cmp	r2, r3
 800af52:	d001      	beq.n	800af58 <check_fs+0x48>
 800af54:	2303      	movs	r3, #3
 800af56:	e029      	b.n	800afac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af5e:	2be9      	cmp	r3, #233	; 0xe9
 800af60:	d009      	beq.n	800af76 <check_fs+0x66>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af68:	2beb      	cmp	r3, #235	; 0xeb
 800af6a:	d11e      	bne.n	800afaa <check_fs+0x9a>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800af72:	2b90      	cmp	r3, #144	; 0x90
 800af74:	d119      	bne.n	800afaa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	3338      	adds	r3, #56	; 0x38
 800af7a:	3336      	adds	r3, #54	; 0x36
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe f9bf 	bl	8009300 <ld_dword>
 800af82:	4603      	mov	r3, r0
 800af84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af88:	4a0a      	ldr	r2, [pc, #40]	; (800afb4 <check_fs+0xa4>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d101      	bne.n	800af92 <check_fs+0x82>
 800af8e:	2300      	movs	r3, #0
 800af90:	e00c      	b.n	800afac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3338      	adds	r3, #56	; 0x38
 800af96:	3352      	adds	r3, #82	; 0x52
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe f9b1 	bl	8009300 <ld_dword>
 800af9e:	4602      	mov	r2, r0
 800afa0:	4b05      	ldr	r3, [pc, #20]	; (800afb8 <check_fs+0xa8>)
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d101      	bne.n	800afaa <check_fs+0x9a>
 800afa6:	2300      	movs	r3, #0
 800afa8:	e000      	b.n	800afac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800afaa:	2302      	movs	r3, #2
}
 800afac:	4618      	mov	r0, r3
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	00544146 	.word	0x00544146
 800afb8:	33544146 	.word	0x33544146

0800afbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b096      	sub	sp, #88	; 0x58
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	4613      	mov	r3, r2
 800afc8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2200      	movs	r2, #0
 800afce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f7ff ff59 	bl	800ae88 <get_ldnumber>
 800afd6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800afd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	da01      	bge.n	800afe2 <find_volume+0x26>
 800afde:	230b      	movs	r3, #11
 800afe0:	e268      	b.n	800b4b4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800afe2:	4ab0      	ldr	r2, [pc, #704]	; (800b2a4 <find_volume+0x2e8>)
 800afe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <find_volume+0x3a>
 800aff2:	230c      	movs	r3, #12
 800aff4:	e25e      	b.n	800b4b4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800affa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800affc:	79fb      	ldrb	r3, [r7, #7]
 800affe:	f023 0301 	bic.w	r3, r3, #1
 800b002:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d01a      	beq.n	800b042 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	785b      	ldrb	r3, [r3, #1]
 800b010:	4618      	mov	r0, r3
 800b012:	f7fe f8bf 	bl	8009194 <disk_status>
 800b016:	4603      	mov	r3, r0
 800b018:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b01c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b020:	f003 0301 	and.w	r3, r3, #1
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10c      	bne.n	800b042 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b028:	79fb      	ldrb	r3, [r7, #7]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d007      	beq.n	800b03e <find_volume+0x82>
 800b02e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b032:	f003 0304 	and.w	r3, r3, #4
 800b036:	2b00      	cmp	r3, #0
 800b038:	d001      	beq.n	800b03e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b03a:	230a      	movs	r3, #10
 800b03c:	e23a      	b.n	800b4b4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800b03e:	2300      	movs	r3, #0
 800b040:	e238      	b.n	800b4b4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	2200      	movs	r2, #0
 800b046:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	785b      	ldrb	r3, [r3, #1]
 800b054:	4618      	mov	r0, r3
 800b056:	f7fe f8b7 	bl	80091c8 <disk_initialize>
 800b05a:	4603      	mov	r3, r0
 800b05c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b060:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b06c:	2303      	movs	r3, #3
 800b06e:	e221      	b.n	800b4b4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d007      	beq.n	800b086 <find_volume+0xca>
 800b076:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b07a:	f003 0304 	and.w	r3, r3, #4
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b082:	230a      	movs	r3, #10
 800b084:	e216      	b.n	800b4b4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b088:	7858      	ldrb	r0, [r3, #1]
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	330c      	adds	r3, #12
 800b08e:	461a      	mov	r2, r3
 800b090:	2102      	movs	r1, #2
 800b092:	f7fe f8ff 	bl	8009294 <disk_ioctl>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <find_volume+0xe4>
 800b09c:	2301      	movs	r3, #1
 800b09e:	e209      	b.n	800b4b4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a2:	899b      	ldrh	r3, [r3, #12]
 800b0a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0a8:	d80d      	bhi.n	800b0c6 <find_volume+0x10a>
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	899b      	ldrh	r3, [r3, #12]
 800b0ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0b2:	d308      	bcc.n	800b0c6 <find_volume+0x10a>
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	899b      	ldrh	r3, [r3, #12]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	899b      	ldrh	r3, [r3, #12]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <find_volume+0x10e>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e1f4      	b.n	800b4b4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b0ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0d2:	f7ff ff1d 	bl	800af10 <check_fs>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b0dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d14b      	bne.n	800b17c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	643b      	str	r3, [r7, #64]	; 0x40
 800b0e8:	e01f      	b.n	800b12a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0f2:	011b      	lsls	r3, r3, #4
 800b0f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b0f8:	4413      	add	r3, r2
 800b0fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	3304      	adds	r3, #4
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d006      	beq.n	800b114 <find_volume+0x158>
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	3308      	adds	r3, #8
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fe f8f8 	bl	8009300 <ld_dword>
 800b110:	4602      	mov	r2, r0
 800b112:	e000      	b.n	800b116 <find_volume+0x15a>
 800b114:	2200      	movs	r2, #0
 800b116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b11e:	440b      	add	r3, r1
 800b120:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b126:	3301      	adds	r3, #1
 800b128:	643b      	str	r3, [r7, #64]	; 0x40
 800b12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	d9dc      	bls.n	800b0ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b130:	2300      	movs	r3, #0
 800b132:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b136:	2b00      	cmp	r3, #0
 800b138:	d002      	beq.n	800b140 <find_volume+0x184>
 800b13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b13c:	3b01      	subs	r3, #1
 800b13e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b148:	4413      	add	r3, r2
 800b14a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b14e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b152:	2b00      	cmp	r3, #0
 800b154:	d005      	beq.n	800b162 <find_volume+0x1a6>
 800b156:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b15a:	f7ff fed9 	bl	800af10 <check_fs>
 800b15e:	4603      	mov	r3, r0
 800b160:	e000      	b.n	800b164 <find_volume+0x1a8>
 800b162:	2303      	movs	r3, #3
 800b164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d905      	bls.n	800b17c <find_volume+0x1c0>
 800b170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b172:	3301      	adds	r3, #1
 800b174:	643b      	str	r3, [r7, #64]	; 0x40
 800b176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b178:	2b03      	cmp	r3, #3
 800b17a:	d9e1      	bls.n	800b140 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b17c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b180:	2b04      	cmp	r3, #4
 800b182:	d101      	bne.n	800b188 <find_volume+0x1cc>
 800b184:	2301      	movs	r3, #1
 800b186:	e195      	b.n	800b4b4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d901      	bls.n	800b194 <find_volume+0x1d8>
 800b190:	230d      	movs	r3, #13
 800b192:	e18f      	b.n	800b4b4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	3338      	adds	r3, #56	; 0x38
 800b198:	330b      	adds	r3, #11
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fe f898 	bl	80092d0 <ld_word>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	899b      	ldrh	r3, [r3, #12]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d001      	beq.n	800b1b0 <find_volume+0x1f4>
 800b1ac:	230d      	movs	r3, #13
 800b1ae:	e181      	b.n	800b4b4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	3338      	adds	r3, #56	; 0x38
 800b1b4:	3316      	adds	r3, #22
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fe f88a 	bl	80092d0 <ld_word>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <find_volume+0x218>
 800b1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c8:	3338      	adds	r3, #56	; 0x38
 800b1ca:	3324      	adds	r3, #36	; 0x24
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe f897 	bl	8009300 <ld_dword>
 800b1d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1d8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	789b      	ldrb	r3, [r3, #2]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d005      	beq.n	800b1f8 <find_volume+0x23c>
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ee:	789b      	ldrb	r3, [r3, #2]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d001      	beq.n	800b1f8 <find_volume+0x23c>
 800b1f4:	230d      	movs	r3, #13
 800b1f6:	e15d      	b.n	800b4b4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	789b      	ldrb	r3, [r3, #2]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b200:	fb02 f303 	mul.w	r3, r2, r3
 800b204:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b208:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b214:	895b      	ldrh	r3, [r3, #10]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d008      	beq.n	800b22c <find_volume+0x270>
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	895b      	ldrh	r3, [r3, #10]
 800b21e:	461a      	mov	r2, r3
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	895b      	ldrh	r3, [r3, #10]
 800b224:	3b01      	subs	r3, #1
 800b226:	4013      	ands	r3, r2
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <find_volume+0x274>
 800b22c:	230d      	movs	r3, #13
 800b22e:	e141      	b.n	800b4b4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b232:	3338      	adds	r3, #56	; 0x38
 800b234:	3311      	adds	r3, #17
 800b236:	4618      	mov	r0, r3
 800b238:	f7fe f84a 	bl	80092d0 <ld_word>
 800b23c:	4603      	mov	r3, r0
 800b23e:	461a      	mov	r2, r3
 800b240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b242:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	891b      	ldrh	r3, [r3, #8]
 800b248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b24a:	8992      	ldrh	r2, [r2, #12]
 800b24c:	0952      	lsrs	r2, r2, #5
 800b24e:	b292      	uxth	r2, r2
 800b250:	fbb3 f1f2 	udiv	r1, r3, r2
 800b254:	fb02 f201 	mul.w	r2, r2, r1
 800b258:	1a9b      	subs	r3, r3, r2
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <find_volume+0x2a8>
 800b260:	230d      	movs	r3, #13
 800b262:	e127      	b.n	800b4b4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	3338      	adds	r3, #56	; 0x38
 800b268:	3313      	adds	r3, #19
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe f830 	bl	80092d0 <ld_word>
 800b270:	4603      	mov	r3, r0
 800b272:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b276:	2b00      	cmp	r3, #0
 800b278:	d106      	bne.n	800b288 <find_volume+0x2cc>
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	3338      	adds	r3, #56	; 0x38
 800b27e:	3320      	adds	r3, #32
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe f83d 	bl	8009300 <ld_dword>
 800b286:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28a:	3338      	adds	r3, #56	; 0x38
 800b28c:	330e      	adds	r3, #14
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe f81e 	bl	80092d0 <ld_word>
 800b294:	4603      	mov	r3, r0
 800b296:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b298:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d104      	bne.n	800b2a8 <find_volume+0x2ec>
 800b29e:	230d      	movs	r3, #13
 800b2a0:	e108      	b.n	800b4b4 <find_volume+0x4f8>
 800b2a2:	bf00      	nop
 800b2a4:	200003a0 	.word	0x200003a0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b2a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ac:	4413      	add	r3, r2
 800b2ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2b0:	8911      	ldrh	r1, [r2, #8]
 800b2b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2b4:	8992      	ldrh	r2, [r2, #12]
 800b2b6:	0952      	lsrs	r2, r2, #5
 800b2b8:	b292      	uxth	r2, r2
 800b2ba:	fbb1 f2f2 	udiv	r2, r1, r2
 800b2be:	b292      	uxth	r2, r2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b2c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d201      	bcs.n	800b2d0 <find_volume+0x314>
 800b2cc:	230d      	movs	r3, #13
 800b2ce:	e0f1      	b.n	800b4b4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b2d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2d8:	8952      	ldrh	r2, [r2, #10]
 800b2da:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2de:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <find_volume+0x32e>
 800b2e6:	230d      	movs	r3, #13
 800b2e8:	e0e4      	b.n	800b4b4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d802      	bhi.n	800b300 <find_volume+0x344>
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b306:	4293      	cmp	r3, r2
 800b308:	d802      	bhi.n	800b310 <find_volume+0x354>
 800b30a:	2301      	movs	r3, #1
 800b30c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	1c9a      	adds	r2, r3, #2
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b31c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b31e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b322:	441a      	add	r2, r3
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b328:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32c:	441a      	add	r2, r3
 800b32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b330:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b332:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b336:	2b03      	cmp	r3, #3
 800b338:	d11e      	bne.n	800b378 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	3338      	adds	r3, #56	; 0x38
 800b33e:	332a      	adds	r3, #42	; 0x2a
 800b340:	4618      	mov	r0, r3
 800b342:	f7fd ffc5 	bl	80092d0 <ld_word>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <find_volume+0x394>
 800b34c:	230d      	movs	r3, #13
 800b34e:	e0b1      	b.n	800b4b4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	891b      	ldrh	r3, [r3, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d001      	beq.n	800b35c <find_volume+0x3a0>
 800b358:	230d      	movs	r3, #13
 800b35a:	e0ab      	b.n	800b4b4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35e:	3338      	adds	r3, #56	; 0x38
 800b360:	332c      	adds	r3, #44	; 0x2c
 800b362:	4618      	mov	r0, r3
 800b364:	f7fd ffcc 	bl	8009300 <ld_dword>
 800b368:	4602      	mov	r2, r0
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	69db      	ldr	r3, [r3, #28]
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	647b      	str	r3, [r7, #68]	; 0x44
 800b376:	e01f      	b.n	800b3b8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	891b      	ldrh	r3, [r3, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <find_volume+0x3c8>
 800b380:	230d      	movs	r3, #13
 800b382:	e097      	b.n	800b4b4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b38a:	441a      	add	r2, r3
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b394:	2b02      	cmp	r3, #2
 800b396:	d103      	bne.n	800b3a0 <find_volume+0x3e4>
 800b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39a:	69db      	ldr	r3, [r3, #28]
 800b39c:	005b      	lsls	r3, r3, #1
 800b39e:	e00a      	b.n	800b3b6 <find_volume+0x3fa>
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a2:	69da      	ldr	r2, [r3, #28]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	005b      	lsls	r3, r3, #1
 800b3a8:	4413      	add	r3, r2
 800b3aa:	085a      	lsrs	r2, r3, #1
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ae:	69db      	ldr	r3, [r3, #28]
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b3b6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	6a1a      	ldr	r2, [r3, #32]
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3be:	899b      	ldrh	r3, [r3, #12]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c4:	440b      	add	r3, r1
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3ca:	8989      	ldrh	r1, [r1, #12]
 800b3cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d201      	bcs.n	800b3d8 <find_volume+0x41c>
 800b3d4:	230d      	movs	r3, #13
 800b3d6:	e06d      	b.n	800b4b4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3da:	f04f 32ff 	mov.w	r2, #4294967295
 800b3de:	619a      	str	r2, [r3, #24]
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e2:	699a      	ldr	r2, [r3, #24]
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ea:	2280      	movs	r2, #128	; 0x80
 800b3ec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b3ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3f2:	2b03      	cmp	r3, #3
 800b3f4:	d149      	bne.n	800b48a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f8:	3338      	adds	r3, #56	; 0x38
 800b3fa:	3330      	adds	r3, #48	; 0x30
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fd ff67 	bl	80092d0 <ld_word>
 800b402:	4603      	mov	r3, r0
 800b404:	2b01      	cmp	r3, #1
 800b406:	d140      	bne.n	800b48a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b40a:	3301      	adds	r3, #1
 800b40c:	4619      	mov	r1, r3
 800b40e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b410:	f7fe fa0e 	bl	8009830 <move_window>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d137      	bne.n	800b48a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	2200      	movs	r2, #0
 800b41e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	3338      	adds	r3, #56	; 0x38
 800b424:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fd ff51 	bl	80092d0 <ld_word>
 800b42e:	4603      	mov	r3, r0
 800b430:	461a      	mov	r2, r3
 800b432:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b436:	429a      	cmp	r2, r3
 800b438:	d127      	bne.n	800b48a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43c:	3338      	adds	r3, #56	; 0x38
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fd ff5e 	bl	8009300 <ld_dword>
 800b444:	4602      	mov	r2, r0
 800b446:	4b1d      	ldr	r3, [pc, #116]	; (800b4bc <find_volume+0x500>)
 800b448:	429a      	cmp	r2, r3
 800b44a:	d11e      	bne.n	800b48a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	3338      	adds	r3, #56	; 0x38
 800b450:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b454:	4618      	mov	r0, r3
 800b456:	f7fd ff53 	bl	8009300 <ld_dword>
 800b45a:	4602      	mov	r2, r0
 800b45c:	4b18      	ldr	r3, [pc, #96]	; (800b4c0 <find_volume+0x504>)
 800b45e:	429a      	cmp	r2, r3
 800b460:	d113      	bne.n	800b48a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	3338      	adds	r3, #56	; 0x38
 800b466:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fd ff48 	bl	8009300 <ld_dword>
 800b470:	4602      	mov	r2, r0
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	3338      	adds	r3, #56	; 0x38
 800b47a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fd ff3e 	bl	8009300 <ld_dword>
 800b484:	4602      	mov	r2, r0
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b490:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b492:	4b0c      	ldr	r3, [pc, #48]	; (800b4c4 <find_volume+0x508>)
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	3301      	adds	r3, #1
 800b498:	b29a      	uxth	r2, r3
 800b49a:	4b0a      	ldr	r3, [pc, #40]	; (800b4c4 <find_volume+0x508>)
 800b49c:	801a      	strh	r2, [r3, #0]
 800b49e:	4b09      	ldr	r3, [pc, #36]	; (800b4c4 <find_volume+0x508>)
 800b4a0:	881a      	ldrh	r2, [r3, #0]
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a8:	4a07      	ldr	r2, [pc, #28]	; (800b4c8 <find_volume+0x50c>)
 800b4aa:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b4ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4ae:	f7fe f957 	bl	8009760 <clear_lock>
#endif
	return FR_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3758      	adds	r7, #88	; 0x58
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	41615252 	.word	0x41615252
 800b4c0:	61417272 	.word	0x61417272
 800b4c4:	200003a4 	.word	0x200003a4
 800b4c8:	200003c8 	.word	0x200003c8

0800b4cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b4d6:	2309      	movs	r3, #9
 800b4d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d01c      	beq.n	800b51a <validate+0x4e>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d018      	beq.n	800b51a <validate+0x4e>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d013      	beq.n	800b51a <validate+0x4e>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	889a      	ldrh	r2, [r3, #4]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	88db      	ldrh	r3, [r3, #6]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d10c      	bne.n	800b51a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	785b      	ldrb	r3, [r3, #1]
 800b506:	4618      	mov	r0, r3
 800b508:	f7fd fe44 	bl	8009194 <disk_status>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f003 0301 	and.w	r3, r3, #1
 800b512:	2b00      	cmp	r3, #0
 800b514:	d101      	bne.n	800b51a <validate+0x4e>
			res = FR_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b51a:	7bfb      	ldrb	r3, [r7, #15]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <validate+0x5a>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	e000      	b.n	800b528 <validate+0x5c>
 800b526:	2300      	movs	r3, #0
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	6013      	str	r3, [r2, #0]
	return res;
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
	...

0800b538 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	4613      	mov	r3, r2
 800b544:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b54a:	f107 0310 	add.w	r3, r7, #16
 800b54e:	4618      	mov	r0, r3
 800b550:	f7ff fc9a 	bl	800ae88 <get_ldnumber>
 800b554:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	da01      	bge.n	800b560 <f_mount+0x28>
 800b55c:	230b      	movs	r3, #11
 800b55e:	e02b      	b.n	800b5b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b560:	4a17      	ldr	r2, [pc, #92]	; (800b5c0 <f_mount+0x88>)
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b568:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d005      	beq.n	800b57c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b570:	69b8      	ldr	r0, [r7, #24]
 800b572:	f7fe f8f5 	bl	8009760 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	2200      	movs	r2, #0
 800b57a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	490d      	ldr	r1, [pc, #52]	; (800b5c0 <f_mount+0x88>)
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <f_mount+0x66>
 800b598:	79fb      	ldrb	r3, [r7, #7]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d001      	beq.n	800b5a2 <f_mount+0x6a>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e00a      	b.n	800b5b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b5a2:	f107 010c 	add.w	r1, r7, #12
 800b5a6:	f107 0308 	add.w	r3, r7, #8
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7ff fd05 	bl	800afbc <find_volume>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3720      	adds	r7, #32
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	200003a0 	.word	0x200003a0

0800b5c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b09a      	sub	sp, #104	; 0x68
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <f_open+0x18>
 800b5d8:	2309      	movs	r3, #9
 800b5da:	e1bb      	b.n	800b954 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b5dc:	79fb      	ldrb	r3, [r7, #7]
 800b5de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b5e4:	79fa      	ldrb	r2, [r7, #7]
 800b5e6:	f107 0114 	add.w	r1, r7, #20
 800b5ea:	f107 0308 	add.w	r3, r7, #8
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7ff fce4 	bl	800afbc <find_volume>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b5fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f040 819f 	bne.w	800b942 <f_open+0x37e>
		dj.obj.fs = fs;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	f107 0318 	add.w	r3, r7, #24
 800b60e:	4611      	mov	r1, r2
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff fbc3 	bl	800ad9c <follow_path>
 800b616:	4603      	mov	r3, r0
 800b618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b61c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b620:	2b00      	cmp	r3, #0
 800b622:	d11a      	bne.n	800b65a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b624:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b628:	b25b      	sxtb	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	da03      	bge.n	800b636 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b62e:	2306      	movs	r3, #6
 800b630:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b634:	e011      	b.n	800b65a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	f023 0301 	bic.w	r3, r3, #1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	bf14      	ite	ne
 800b640:	2301      	movne	r3, #1
 800b642:	2300      	moveq	r3, #0
 800b644:	b2db      	uxtb	r3, r3
 800b646:	461a      	mov	r2, r3
 800b648:	f107 0318 	add.w	r3, r7, #24
 800b64c:	4611      	mov	r1, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fd ff3e 	bl	80094d0 <chk_lock>
 800b654:	4603      	mov	r3, r0
 800b656:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b65a:	79fb      	ldrb	r3, [r7, #7]
 800b65c:	f003 031c 	and.w	r3, r3, #28
 800b660:	2b00      	cmp	r3, #0
 800b662:	d07f      	beq.n	800b764 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b664:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d017      	beq.n	800b69c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b66c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b670:	2b04      	cmp	r3, #4
 800b672:	d10e      	bne.n	800b692 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b674:	f7fd ff88 	bl	8009588 <enq_lock>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d006      	beq.n	800b68c <f_open+0xc8>
 800b67e:	f107 0318 	add.w	r3, r7, #24
 800b682:	4618      	mov	r0, r3
 800b684:	f7ff f8da 	bl	800a83c <dir_register>
 800b688:	4603      	mov	r3, r0
 800b68a:	e000      	b.n	800b68e <f_open+0xca>
 800b68c:	2312      	movs	r3, #18
 800b68e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b692:	79fb      	ldrb	r3, [r7, #7]
 800b694:	f043 0308 	orr.w	r3, r3, #8
 800b698:	71fb      	strb	r3, [r7, #7]
 800b69a:	e010      	b.n	800b6be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b69c:	7fbb      	ldrb	r3, [r7, #30]
 800b69e:	f003 0311 	and.w	r3, r3, #17
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d003      	beq.n	800b6ae <f_open+0xea>
					res = FR_DENIED;
 800b6a6:	2307      	movs	r3, #7
 800b6a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b6ac:	e007      	b.n	800b6be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b6ae:	79fb      	ldrb	r3, [r7, #7]
 800b6b0:	f003 0304 	and.w	r3, r3, #4
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <f_open+0xfa>
 800b6b8:	2308      	movs	r3, #8
 800b6ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b6be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d168      	bne.n	800b798 <f_open+0x1d4>
 800b6c6:	79fb      	ldrb	r3, [r7, #7]
 800b6c8:	f003 0308 	and.w	r3, r3, #8
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d063      	beq.n	800b798 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b6d0:	f7fd fd02 	bl	80090d8 <get_fattime>
 800b6d4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d8:	330e      	adds	r3, #14
 800b6da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fd fe4d 	bl	800937c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e4:	3316      	adds	r3, #22
 800b6e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7fd fe47 	bl	800937c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f0:	330b      	adds	r3, #11
 800b6f2:	2220      	movs	r2, #32
 800b6f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fe fe16 	bl	800a32e <ld_clust>
 800b702:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b708:	2200      	movs	r2, #0
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fe fe2e 	bl	800a36c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	331c      	adds	r3, #28
 800b714:	2100      	movs	r1, #0
 800b716:	4618      	mov	r0, r3
 800b718:	f7fd fe30 	bl	800937c <st_dword>
					fs->wflag = 1;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	2201      	movs	r2, #1
 800b720:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b724:	2b00      	cmp	r3, #0
 800b726:	d037      	beq.n	800b798 <f_open+0x1d4>
						dw = fs->winsect;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b72e:	f107 0318 	add.w	r3, r7, #24
 800b732:	2200      	movs	r2, #0
 800b734:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b736:	4618      	mov	r0, r3
 800b738:	f7fe fb1e 	bl	8009d78 <remove_chain>
 800b73c:	4603      	mov	r3, r0
 800b73e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b742:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b746:	2b00      	cmp	r3, #0
 800b748:	d126      	bne.n	800b798 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe f86e 	bl	8009830 <move_window>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b75e:	3a01      	subs	r2, #1
 800b760:	615a      	str	r2, [r3, #20]
 800b762:	e019      	b.n	800b798 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b764:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d115      	bne.n	800b798 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b76c:	7fbb      	ldrb	r3, [r7, #30]
 800b76e:	f003 0310 	and.w	r3, r3, #16
 800b772:	2b00      	cmp	r3, #0
 800b774:	d003      	beq.n	800b77e <f_open+0x1ba>
					res = FR_NO_FILE;
 800b776:	2304      	movs	r3, #4
 800b778:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b77c:	e00c      	b.n	800b798 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	f003 0302 	and.w	r3, r3, #2
 800b784:	2b00      	cmp	r3, #0
 800b786:	d007      	beq.n	800b798 <f_open+0x1d4>
 800b788:	7fbb      	ldrb	r3, [r7, #30]
 800b78a:	f003 0301 	and.w	r3, r3, #1
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <f_open+0x1d4>
						res = FR_DENIED;
 800b792:	2307      	movs	r3, #7
 800b794:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b798:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d128      	bne.n	800b7f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
 800b7a2:	f003 0308 	and.w	r3, r3, #8
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d003      	beq.n	800b7b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b7aa:	79fb      	ldrb	r3, [r7, #7]
 800b7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b7ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b7c0:	79fb      	ldrb	r3, [r7, #7]
 800b7c2:	f023 0301 	bic.w	r3, r3, #1
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	bf14      	ite	ne
 800b7ca:	2301      	movne	r3, #1
 800b7cc:	2300      	moveq	r3, #0
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	f107 0318 	add.w	r3, r7, #24
 800b7d6:	4611      	mov	r1, r2
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7fd fef7 	bl	80095cc <inc_lock>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d102      	bne.n	800b7f2 <f_open+0x22e>
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b7f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f040 80a3 	bne.w	800b942 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b800:	4611      	mov	r1, r2
 800b802:	4618      	mov	r0, r3
 800b804:	f7fe fd93 	bl	800a32e <ld_clust>
 800b808:	4602      	mov	r2, r0
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b810:	331c      	adds	r3, #28
 800b812:	4618      	mov	r0, r3
 800b814:	f7fd fd74 	bl	8009300 <ld_dword>
 800b818:	4602      	mov	r2, r0
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	88da      	ldrh	r2, [r3, #6]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	79fa      	ldrb	r2, [r7, #7]
 800b836:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	3330      	adds	r3, #48	; 0x30
 800b84e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b852:	2100      	movs	r1, #0
 800b854:	4618      	mov	r0, r3
 800b856:	f7fd fdde 	bl	8009416 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b85a:	79fb      	ldrb	r3, [r7, #7]
 800b85c:	f003 0320 	and.w	r3, r3, #32
 800b860:	2b00      	cmp	r3, #0
 800b862:	d06e      	beq.n	800b942 <f_open+0x37e>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d06a      	beq.n	800b942 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	68da      	ldr	r2, [r3, #12]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	895b      	ldrh	r3, [r3, #10]
 800b878:	461a      	mov	r2, r3
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	899b      	ldrh	r3, [r3, #12]
 800b87e:	fb03 f302 	mul.w	r3, r3, r2
 800b882:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b890:	e016      	b.n	800b8c0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe f887 	bl	80099aa <get_fat>
 800b89c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b89e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d802      	bhi.n	800b8aa <f_open+0x2e6>
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b8aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b0:	d102      	bne.n	800b8b8 <f_open+0x2f4>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b8b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d103      	bne.n	800b8d0 <f_open+0x30c>
 800b8c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b8ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d8e0      	bhi.n	800b892 <f_open+0x2ce>
				}
				fp->clust = clst;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b8d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d131      	bne.n	800b942 <f_open+0x37e>
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	899b      	ldrh	r3, [r3, #12]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8ea:	fb02 f201 	mul.w	r2, r2, r1
 800b8ee:	1a9b      	subs	r3, r3, r2
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d026      	beq.n	800b942 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe f837 	bl	800996c <clust2sect>
 800b8fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b902:	2b00      	cmp	r3, #0
 800b904:	d103      	bne.n	800b90e <f_open+0x34a>
						res = FR_INT_ERR;
 800b906:	2302      	movs	r3, #2
 800b908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b90c:	e019      	b.n	800b942 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	899b      	ldrh	r3, [r3, #12]
 800b912:	461a      	mov	r2, r3
 800b914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b916:	fbb3 f2f2 	udiv	r2, r3, r2
 800b91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b91c:	441a      	add	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	7858      	ldrb	r0, [r3, #1]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6a1a      	ldr	r2, [r3, #32]
 800b930:	2301      	movs	r3, #1
 800b932:	f7fd fc6f 	bl	8009214 <disk_read>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <f_open+0x37e>
 800b93c:	2301      	movs	r3, #1
 800b93e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b942:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <f_open+0x38c>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b950:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b954:	4618      	mov	r0, r3
 800b956:	3768      	adds	r7, #104	; 0x68
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08e      	sub	sp, #56	; 0x38
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
 800b968:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	2200      	movs	r2, #0
 800b972:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f107 0214 	add.w	r2, r7, #20
 800b97a:	4611      	mov	r1, r2
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7ff fda5 	bl	800b4cc <validate>
 800b982:	4603      	mov	r3, r0
 800b984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d107      	bne.n	800b9a0 <f_read+0x44>
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	7d5b      	ldrb	r3, [r3, #21]
 800b994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <f_read+0x4a>
 800b9a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9a4:	e135      	b.n	800bc12 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	7d1b      	ldrb	r3, [r3, #20]
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <f_read+0x5a>
 800b9b2:	2307      	movs	r3, #7
 800b9b4:	e12d      	b.n	800bc12 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	68da      	ldr	r2, [r3, #12]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	1ad3      	subs	r3, r2, r3
 800b9c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	f240 811e 	bls.w	800bc08 <f_read+0x2ac>
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b9d0:	e11a      	b.n	800bc08 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	8992      	ldrh	r2, [r2, #12]
 800b9da:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9de:	fb02 f201 	mul.w	r2, r2, r1
 800b9e2:	1a9b      	subs	r3, r3, r2
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f040 80d5 	bne.w	800bb94 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	8992      	ldrh	r2, [r2, #12]
 800b9f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9f6:	697a      	ldr	r2, [r7, #20]
 800b9f8:	8952      	ldrh	r2, [r2, #10]
 800b9fa:	3a01      	subs	r2, #1
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d12f      	bne.n	800ba66 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d103      	bne.n	800ba16 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	633b      	str	r3, [r7, #48]	; 0x30
 800ba14:	e013      	b.n	800ba3e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d007      	beq.n	800ba2e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	4619      	mov	r1, r3
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f7fe faa4 	bl	8009f72 <clmt_clust>
 800ba2a:	6338      	str	r0, [r7, #48]	; 0x30
 800ba2c:	e007      	b.n	800ba3e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	69db      	ldr	r3, [r3, #28]
 800ba34:	4619      	mov	r1, r3
 800ba36:	4610      	mov	r0, r2
 800ba38:	f7fd ffb7 	bl	80099aa <get_fat>
 800ba3c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d804      	bhi.n	800ba4e <f_read+0xf2>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2202      	movs	r2, #2
 800ba48:	755a      	strb	r2, [r3, #21]
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	e0e1      	b.n	800bc12 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba54:	d104      	bne.n	800ba60 <f_read+0x104>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	755a      	strb	r2, [r3, #21]
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e0d8      	b.n	800bc12 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba64:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	69db      	ldr	r3, [r3, #28]
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	4610      	mov	r0, r2
 800ba70:	f7fd ff7c 	bl	800996c <clust2sect>
 800ba74:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d104      	bne.n	800ba86 <f_read+0x12a>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2202      	movs	r2, #2
 800ba80:	755a      	strb	r2, [r3, #21]
 800ba82:	2302      	movs	r3, #2
 800ba84:	e0c5      	b.n	800bc12 <f_read+0x2b6>
			sect += csect;
 800ba86:	69ba      	ldr	r2, [r7, #24]
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	899b      	ldrh	r3, [r3, #12]
 800ba92:	461a      	mov	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba9a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ba9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d041      	beq.n	800bb26 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800baa2:	69fa      	ldr	r2, [r7, #28]
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	4413      	add	r3, r2
 800baa8:	697a      	ldr	r2, [r7, #20]
 800baaa:	8952      	ldrh	r2, [r2, #10]
 800baac:	4293      	cmp	r3, r2
 800baae:	d905      	bls.n	800babc <f_read+0x160>
					cc = fs->csize - csect;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	895b      	ldrh	r3, [r3, #10]
 800bab4:	461a      	mov	r2, r3
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	7858      	ldrb	r0, [r3, #1]
 800bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac2:	69ba      	ldr	r2, [r7, #24]
 800bac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bac6:	f7fd fba5 	bl	8009214 <disk_read>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d004      	beq.n	800bada <f_read+0x17e>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2201      	movs	r2, #1
 800bad4:	755a      	strb	r2, [r3, #21]
 800bad6:	2301      	movs	r3, #1
 800bad8:	e09b      	b.n	800bc12 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	7d1b      	ldrb	r3, [r3, #20]
 800bade:	b25b      	sxtb	r3, r3
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	da18      	bge.n	800bb16 <f_read+0x1ba>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6a1a      	ldr	r2, [r3, #32]
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baee:	429a      	cmp	r2, r3
 800baf0:	d911      	bls.n	800bb16 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6a1a      	ldr	r2, [r3, #32]
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	8992      	ldrh	r2, [r2, #12]
 800bafe:	fb02 f303 	mul.w	r3, r2, r3
 800bb02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb04:	18d0      	adds	r0, r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	899b      	ldrh	r3, [r3, #12]
 800bb10:	461a      	mov	r2, r3
 800bb12:	f7fd fc5f 	bl	80093d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	899b      	ldrh	r3, [r3, #12]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1e:	fb02 f303 	mul.w	r3, r2, r3
 800bb22:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bb24:	e05c      	b.n	800bbe0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	69ba      	ldr	r2, [r7, #24]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d02e      	beq.n	800bb8e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	7d1b      	ldrb	r3, [r3, #20]
 800bb34:	b25b      	sxtb	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	da18      	bge.n	800bb6c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	7858      	ldrb	r0, [r3, #1]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6a1a      	ldr	r2, [r3, #32]
 800bb48:	2301      	movs	r3, #1
 800bb4a:	f7fd fb83 	bl	8009254 <disk_write>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d004      	beq.n	800bb5e <f_read+0x202>
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2201      	movs	r2, #1
 800bb58:	755a      	strb	r2, [r3, #21]
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e059      	b.n	800bc12 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	7d1b      	ldrb	r3, [r3, #20]
 800bb62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	7858      	ldrb	r0, [r3, #1]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb76:	2301      	movs	r3, #1
 800bb78:	69ba      	ldr	r2, [r7, #24]
 800bb7a:	f7fd fb4b 	bl	8009214 <disk_read>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d004      	beq.n	800bb8e <f_read+0x232>
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2201      	movs	r2, #1
 800bb88:	755a      	strb	r2, [r3, #21]
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e041      	b.n	800bc12 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	69ba      	ldr	r2, [r7, #24]
 800bb92:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	899b      	ldrh	r3, [r3, #12]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	8992      	ldrh	r2, [r2, #12]
 800bba2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bba6:	fb02 f201 	mul.w	r2, r2, r1
 800bbaa:	1a9b      	subs	r3, r3, r2
 800bbac:	1ac3      	subs	r3, r0, r3
 800bbae:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bbb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d901      	bls.n	800bbbc <f_read+0x260>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	8992      	ldrh	r2, [r2, #12]
 800bbca:	fbb3 f0f2 	udiv	r0, r3, r2
 800bbce:	fb02 f200 	mul.w	r2, r2, r0
 800bbd2:	1a9b      	subs	r3, r3, r2
 800bbd4:	440b      	add	r3, r1
 800bbd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbdc:	f7fd fbfa 	bl	80093d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bbe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe4:	4413      	add	r3, r2
 800bbe6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	699a      	ldr	r2, [r3, #24]
 800bbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbee:	441a      	add	r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	619a      	str	r2, [r3, #24]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	441a      	add	r2, r3
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f47f aee1 	bne.w	800b9d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3738      	adds	r7, #56	; 0x38
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b08c      	sub	sp, #48	; 0x30
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	60f8      	str	r0, [r7, #12]
 800bc22:	60b9      	str	r1, [r7, #8]
 800bc24:	607a      	str	r2, [r7, #4]
 800bc26:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f107 0210 	add.w	r2, r7, #16
 800bc38:	4611      	mov	r1, r2
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7ff fc46 	bl	800b4cc <validate>
 800bc40:	4603      	mov	r3, r0
 800bc42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bc46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d107      	bne.n	800bc5e <f_write+0x44>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	7d5b      	ldrb	r3, [r3, #21]
 800bc52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bc56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <f_write+0x4a>
 800bc5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc62:	e16a      	b.n	800bf3a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	7d1b      	ldrb	r3, [r3, #20]
 800bc68:	f003 0302 	and.w	r3, r3, #2
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <f_write+0x5a>
 800bc70:	2307      	movs	r3, #7
 800bc72:	e162      	b.n	800bf3a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	699a      	ldr	r2, [r3, #24]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	441a      	add	r2, r3
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	f080 814c 	bcs.w	800bf1e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	43db      	mvns	r3, r3
 800bc8c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bc8e:	e146      	b.n	800bf1e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	8992      	ldrh	r2, [r2, #12]
 800bc98:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc9c:	fb02 f201 	mul.w	r2, r2, r1
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f040 80f1 	bne.w	800be8a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	699b      	ldr	r3, [r3, #24]
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	8992      	ldrh	r2, [r2, #12]
 800bcb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcb4:	693a      	ldr	r2, [r7, #16]
 800bcb6:	8952      	ldrh	r2, [r2, #10]
 800bcb8:	3a01      	subs	r2, #1
 800bcba:	4013      	ands	r3, r2
 800bcbc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d143      	bne.n	800bd4c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	699b      	ldr	r3, [r3, #24]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10c      	bne.n	800bce6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d11a      	bne.n	800bd0e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2100      	movs	r1, #0
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fe f8b0 	bl	8009e42 <create_chain>
 800bce2:	62b8      	str	r0, [r7, #40]	; 0x28
 800bce4:	e013      	b.n	800bd0e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d007      	beq.n	800bcfe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	699b      	ldr	r3, [r3, #24]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f7fe f93c 	bl	8009f72 <clmt_clust>
 800bcfa:	62b8      	str	r0, [r7, #40]	; 0x28
 800bcfc:	e007      	b.n	800bd0e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	4619      	mov	r1, r3
 800bd06:	4610      	mov	r0, r2
 800bd08:	f7fe f89b 	bl	8009e42 <create_chain>
 800bd0c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f000 8109 	beq.w	800bf28 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d104      	bne.n	800bd26 <f_write+0x10c>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	755a      	strb	r2, [r3, #21]
 800bd22:	2302      	movs	r3, #2
 800bd24:	e109      	b.n	800bf3a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2c:	d104      	bne.n	800bd38 <f_write+0x11e>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2201      	movs	r2, #1
 800bd32:	755a      	strb	r2, [r3, #21]
 800bd34:	2301      	movs	r3, #1
 800bd36:	e100      	b.n	800bf3a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd3c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d102      	bne.n	800bd4c <f_write+0x132>
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd4a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	7d1b      	ldrb	r3, [r3, #20]
 800bd50:	b25b      	sxtb	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	da18      	bge.n	800bd88 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	7858      	ldrb	r0, [r3, #1]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6a1a      	ldr	r2, [r3, #32]
 800bd64:	2301      	movs	r3, #1
 800bd66:	f7fd fa75 	bl	8009254 <disk_write>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d004      	beq.n	800bd7a <f_write+0x160>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2201      	movs	r2, #1
 800bd74:	755a      	strb	r2, [r3, #21]
 800bd76:	2301      	movs	r3, #1
 800bd78:	e0df      	b.n	800bf3a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	7d1b      	ldrb	r3, [r3, #20]
 800bd7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bd88:	693a      	ldr	r2, [r7, #16]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	69db      	ldr	r3, [r3, #28]
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4610      	mov	r0, r2
 800bd92:	f7fd fdeb 	bl	800996c <clust2sect>
 800bd96:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d104      	bne.n	800bda8 <f_write+0x18e>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2202      	movs	r2, #2
 800bda2:	755a      	strb	r2, [r3, #21]
 800bda4:	2302      	movs	r3, #2
 800bda6:	e0c8      	b.n	800bf3a <f_write+0x320>
			sect += csect;
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	4413      	add	r3, r2
 800bdae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	899b      	ldrh	r3, [r3, #12]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdbc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bdbe:	6a3b      	ldr	r3, [r7, #32]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d043      	beq.n	800be4c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bdc4:	69ba      	ldr	r2, [r7, #24]
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	4413      	add	r3, r2
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	8952      	ldrh	r2, [r2, #10]
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d905      	bls.n	800bdde <f_write+0x1c4>
					cc = fs->csize - csect;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	895b      	ldrh	r3, [r3, #10]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	7858      	ldrb	r0, [r3, #1]
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	69f9      	ldr	r1, [r7, #28]
 800bde8:	f7fd fa34 	bl	8009254 <disk_write>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d004      	beq.n	800bdfc <f_write+0x1e2>
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	755a      	strb	r2, [r3, #21]
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e09e      	b.n	800bf3a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6a1a      	ldr	r2, [r3, #32]
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	6a3a      	ldr	r2, [r7, #32]
 800be06:	429a      	cmp	r2, r3
 800be08:	d918      	bls.n	800be3c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6a1a      	ldr	r2, [r3, #32]
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	1ad3      	subs	r3, r2, r3
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	8992      	ldrh	r2, [r2, #12]
 800be1c:	fb02 f303 	mul.w	r3, r2, r3
 800be20:	69fa      	ldr	r2, [r7, #28]
 800be22:	18d1      	adds	r1, r2, r3
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	899b      	ldrh	r3, [r3, #12]
 800be28:	461a      	mov	r2, r3
 800be2a:	f7fd fad3 	bl	80093d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	7d1b      	ldrb	r3, [r3, #20]
 800be32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be36:	b2da      	uxtb	r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	899b      	ldrh	r3, [r3, #12]
 800be40:	461a      	mov	r2, r3
 800be42:	6a3b      	ldr	r3, [r7, #32]
 800be44:	fb02 f303 	mul.w	r3, r2, r3
 800be48:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800be4a:	e04b      	b.n	800bee4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6a1b      	ldr	r3, [r3, #32]
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	429a      	cmp	r2, r3
 800be54:	d016      	beq.n	800be84 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	699a      	ldr	r2, [r3, #24]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be5e:	429a      	cmp	r2, r3
 800be60:	d210      	bcs.n	800be84 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	7858      	ldrb	r0, [r3, #1]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be6c:	2301      	movs	r3, #1
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	f7fd f9d0 	bl	8009214 <disk_read>
 800be74:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800be76:	2b00      	cmp	r3, #0
 800be78:	d004      	beq.n	800be84 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2201      	movs	r2, #1
 800be7e:	755a      	strb	r2, [r3, #21]
 800be80:	2301      	movs	r3, #1
 800be82:	e05a      	b.n	800bf3a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	899b      	ldrh	r3, [r3, #12]
 800be8e:	4618      	mov	r0, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	699b      	ldr	r3, [r3, #24]
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	8992      	ldrh	r2, [r2, #12]
 800be98:	fbb3 f1f2 	udiv	r1, r3, r2
 800be9c:	fb02 f201 	mul.w	r2, r2, r1
 800bea0:	1a9b      	subs	r3, r3, r2
 800bea2:	1ac3      	subs	r3, r0, r3
 800bea4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d901      	bls.n	800beb2 <f_write+0x298>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	8992      	ldrh	r2, [r2, #12]
 800bec0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bec4:	fb02 f200 	mul.w	r2, r2, r0
 800bec8:	1a9b      	subs	r3, r3, r2
 800beca:	440b      	add	r3, r1
 800becc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bece:	69f9      	ldr	r1, [r7, #28]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fd fa7f 	bl	80093d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	7d1b      	ldrb	r3, [r3, #20]
 800beda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bee4:	69fa      	ldr	r2, [r7, #28]
 800bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee8:	4413      	add	r3, r2
 800beea:	61fb      	str	r3, [r7, #28]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	699a      	ldr	r2, [r3, #24]
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	441a      	add	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	619a      	str	r2, [r3, #24]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	68da      	ldr	r2, [r3, #12]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	699b      	ldr	r3, [r3, #24]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	bf38      	it	cc
 800bf04:	461a      	movcc	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	60da      	str	r2, [r3, #12]
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	441a      	add	r2, r3
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	601a      	str	r2, [r3, #0]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f47f aeb5 	bne.w	800bc90 <f_write+0x76>
 800bf26:	e000      	b.n	800bf2a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bf28:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	7d1b      	ldrb	r3, [r3, #20]
 800bf2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3730      	adds	r7, #48	; 0x30
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b086      	sub	sp, #24
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f107 0208 	add.w	r2, r7, #8
 800bf50:	4611      	mov	r1, r2
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7ff faba 	bl	800b4cc <validate>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d168      	bne.n	800c034 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7d1b      	ldrb	r3, [r3, #20]
 800bf66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d062      	beq.n	800c034 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	7d1b      	ldrb	r3, [r3, #20]
 800bf72:	b25b      	sxtb	r3, r3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	da15      	bge.n	800bfa4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	7858      	ldrb	r0, [r3, #1]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1a      	ldr	r2, [r3, #32]
 800bf86:	2301      	movs	r3, #1
 800bf88:	f7fd f964 	bl	8009254 <disk_write>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d001      	beq.n	800bf96 <f_sync+0x54>
 800bf92:	2301      	movs	r3, #1
 800bf94:	e04f      	b.n	800c036 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	7d1b      	ldrb	r3, [r3, #20]
 800bf9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bfa4:	f7fd f898 	bl	80090d8 <get_fattime>
 800bfa8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	f7fd fc3c 	bl	8009830 <move_window>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d138      	bne.n	800c034 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	330b      	adds	r3, #11
 800bfcc:	781a      	ldrb	r2, [r3, #0]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	330b      	adds	r3, #11
 800bfd2:	f042 0220 	orr.w	r2, r2, #32
 800bfd6:	b2d2      	uxtb	r2, r2
 800bfd8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6818      	ldr	r0, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	68f9      	ldr	r1, [r7, #12]
 800bfe6:	f7fe f9c1 	bl	800a36c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f103 021c 	add.w	r2, r3, #28
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	4619      	mov	r1, r3
 800bff6:	4610      	mov	r0, r2
 800bff8:	f7fd f9c0 	bl	800937c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	3316      	adds	r3, #22
 800c000:	6939      	ldr	r1, [r7, #16]
 800c002:	4618      	mov	r0, r3
 800c004:	f7fd f9ba 	bl	800937c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3312      	adds	r3, #18
 800c00c:	2100      	movs	r1, #0
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fd f999 	bl	8009346 <st_word>
					fs->wflag = 1;
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	2201      	movs	r2, #1
 800c018:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fd fc35 	bl	800988c <sync_fs>
 800c022:	4603      	mov	r3, r0
 800c024:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	7d1b      	ldrb	r3, [r3, #20]
 800c02a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c02e:	b2da      	uxtb	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c034:	7dfb      	ldrb	r3, [r7, #23]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3718      	adds	r7, #24
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b084      	sub	sp, #16
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7ff ff7b 	bl	800bf42 <f_sync>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c050:	7bfb      	ldrb	r3, [r7, #15]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d118      	bne.n	800c088 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f107 0208 	add.w	r2, r7, #8
 800c05c:	4611      	mov	r1, r2
 800c05e:	4618      	mov	r0, r3
 800c060:	f7ff fa34 	bl	800b4cc <validate>
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c068:	7bfb      	ldrb	r3, [r7, #15]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10c      	bne.n	800c088 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	4618      	mov	r0, r3
 800c074:	f7fd fb38 	bl	80096e8 <dec_lock>
 800c078:	4603      	mov	r3, r0
 800c07a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d102      	bne.n	800c088 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c088:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b088      	sub	sp, #32
 800c096:	af00      	add	r7, sp, #0
 800c098:	60f8      	str	r0, [r7, #12]
 800c09a:	60b9      	str	r1, [r7, #8]
 800c09c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c0a6:	e01b      	b.n	800c0e0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c0a8:	f107 0310 	add.w	r3, r7, #16
 800c0ac:	f107 0114 	add.w	r1, r7, #20
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7ff fc52 	bl	800b95c <f_read>
		if (rc != 1) break;
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d116      	bne.n	800c0ec <f_gets+0x5a>
		c = s[0];
 800c0be:	7d3b      	ldrb	r3, [r7, #20]
 800c0c0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c0c2:	7dfb      	ldrb	r3, [r7, #23]
 800c0c4:	2b0d      	cmp	r3, #13
 800c0c6:	d100      	bne.n	800c0ca <f_gets+0x38>
 800c0c8:	e00a      	b.n	800c0e0 <f_gets+0x4e>
		*p++ = c;
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	61ba      	str	r2, [r7, #24]
 800c0d0:	7dfa      	ldrb	r2, [r7, #23]
 800c0d2:	701a      	strb	r2, [r3, #0]
		n++;
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
 800c0dc:	2b0a      	cmp	r3, #10
 800c0de:	d007      	beq.n	800c0f0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	69fa      	ldr	r2, [r7, #28]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	dbde      	blt.n	800c0a8 <f_gets+0x16>
 800c0ea:	e002      	b.n	800c0f2 <f_gets+0x60>
		if (rc != 1) break;
 800c0ec:	bf00      	nop
 800c0ee:	e000      	b.n	800c0f2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800c0f0:	bf00      	nop
	}
	*p = 0;
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <f_gets+0x70>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	e000      	b.n	800c104 <f_gets+0x72>
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3720      	adds	r7, #32
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	460b      	mov	r3, r1
 800c116:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c118:	78fb      	ldrb	r3, [r7, #3]
 800c11a:	2b0a      	cmp	r3, #10
 800c11c:	d103      	bne.n	800c126 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c11e:	210d      	movs	r1, #13
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff fff3 	bl	800c10c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	db25      	blt.n	800c17e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	1c5a      	adds	r2, r3, #1
 800c136:	60fa      	str	r2, [r7, #12]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	4413      	add	r3, r2
 800c13c:	78fa      	ldrb	r2, [r7, #3]
 800c13e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2b3c      	cmp	r3, #60	; 0x3c
 800c144:	dd12      	ble.n	800c16c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6818      	ldr	r0, [r3, #0]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f103 010c 	add.w	r1, r3, #12
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	f107 0308 	add.w	r3, r7, #8
 800c156:	f7ff fd60 	bl	800bc1a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d101      	bne.n	800c166 <putc_bfd+0x5a>
 800c162:	2300      	movs	r3, #0
 800c164:	e001      	b.n	800c16a <putc_bfd+0x5e>
 800c166:	f04f 33ff 	mov.w	r3, #4294967295
 800c16a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	609a      	str	r2, [r3, #8]
 800c17c:	e000      	b.n	800c180 <putc_bfd+0x74>
	if (i < 0) return;
 800c17e:	bf00      	nop
}
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b084      	sub	sp, #16
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	db17      	blt.n	800c1c6 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f103 010c 	add.w	r1, r3, #12
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	f107 030c 	add.w	r3, r7, #12
 800c1aa:	f7ff fd36 	bl	800bc1a <f_write>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d108      	bne.n	800c1c6 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d102      	bne.n	800c1c6 <putc_flush+0x40>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	e001      	b.n	800c1ca <putc_flush+0x44>
	return EOF;
 800c1c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	b083      	sub	sp, #12
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	605a      	str	r2, [r3, #4]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	685a      	ldr	r2, [r3, #4]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	609a      	str	r2, [r3, #8]
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b096      	sub	sp, #88	; 0x58
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c206:	f107 030c 	add.w	r3, r7, #12
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7ff ffe0 	bl	800c1d2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c212:	e009      	b.n	800c228 <f_puts+0x2c>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	1c5a      	adds	r2, r3, #1
 800c218:	607a      	str	r2, [r7, #4]
 800c21a:	781a      	ldrb	r2, [r3, #0]
 800c21c:	f107 030c 	add.w	r3, r7, #12
 800c220:	4611      	mov	r1, r2
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff ff72 	bl	800c10c <putc_bfd>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1f1      	bne.n	800c214 <f_puts+0x18>
	return putc_flush(&pb);
 800c230:	f107 030c 	add.w	r3, r7, #12
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff ffa6 	bl	800c186 <putc_flush>
 800c23a:	4603      	mov	r3, r0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3758      	adds	r7, #88	; 0x58
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c244:	b480      	push	{r7}
 800c246:	b087      	sub	sp, #28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	4613      	mov	r3, r2
 800c250:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c252:	2301      	movs	r3, #1
 800c254:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c25a:	4b1f      	ldr	r3, [pc, #124]	; (800c2d8 <FATFS_LinkDriverEx+0x94>)
 800c25c:	7a5b      	ldrb	r3, [r3, #9]
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	2b00      	cmp	r3, #0
 800c262:	d131      	bne.n	800c2c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c264:	4b1c      	ldr	r3, [pc, #112]	; (800c2d8 <FATFS_LinkDriverEx+0x94>)
 800c266:	7a5b      	ldrb	r3, [r3, #9]
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	461a      	mov	r2, r3
 800c26c:	4b1a      	ldr	r3, [pc, #104]	; (800c2d8 <FATFS_LinkDriverEx+0x94>)
 800c26e:	2100      	movs	r1, #0
 800c270:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c272:	4b19      	ldr	r3, [pc, #100]	; (800c2d8 <FATFS_LinkDriverEx+0x94>)
 800c274:	7a5b      	ldrb	r3, [r3, #9]
 800c276:	b2db      	uxtb	r3, r3
 800c278:	4a17      	ldr	r2, [pc, #92]	; (800c2d8 <FATFS_LinkDriverEx+0x94>)
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	4413      	add	r3, r2
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c282:	4b15      	ldr	r3, [pc, #84]	; (800c2d8 <FATFS_LinkDriverEx+0x94>)
 800c284:	7a5b      	ldrb	r3, [r3, #9]
 800c286:	b2db      	uxtb	r3, r3
 800c288:	461a      	mov	r2, r3
 800c28a:	4b13      	ldr	r3, [pc, #76]	; (800c2d8 <FATFS_LinkDriverEx+0x94>)
 800c28c:	4413      	add	r3, r2
 800c28e:	79fa      	ldrb	r2, [r7, #7]
 800c290:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c292:	4b11      	ldr	r3, [pc, #68]	; (800c2d8 <FATFS_LinkDriverEx+0x94>)
 800c294:	7a5b      	ldrb	r3, [r3, #9]
 800c296:	b2db      	uxtb	r3, r3
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	b2d1      	uxtb	r1, r2
 800c29c:	4a0e      	ldr	r2, [pc, #56]	; (800c2d8 <FATFS_LinkDriverEx+0x94>)
 800c29e:	7251      	strb	r1, [r2, #9]
 800c2a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c2a2:	7dbb      	ldrb	r3, [r7, #22]
 800c2a4:	3330      	adds	r3, #48	; 0x30
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	223a      	movs	r2, #58	; 0x3a
 800c2b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	3302      	adds	r3, #2
 800c2b8:	222f      	movs	r2, #47	; 0x2f
 800c2ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	3303      	adds	r3, #3
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	371c      	adds	r7, #28
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	200005c8 	.word	0x200005c8

0800c2dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff ffaa 	bl	800c244 <FATFS_LinkDriverEx>
 800c2f0:	4603      	mov	r3, r0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	4603      	mov	r3, r0
 800c304:	6039      	str	r1, [r7, #0]
 800c306:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c308:	88fb      	ldrh	r3, [r7, #6]
 800c30a:	2b7f      	cmp	r3, #127	; 0x7f
 800c30c:	d802      	bhi.n	800c314 <ff_convert+0x18>
		c = chr;
 800c30e:	88fb      	ldrh	r3, [r7, #6]
 800c310:	81fb      	strh	r3, [r7, #14]
 800c312:	e025      	b.n	800c360 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00b      	beq.n	800c332 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c31a:	88fb      	ldrh	r3, [r7, #6]
 800c31c:	2bff      	cmp	r3, #255	; 0xff
 800c31e:	d805      	bhi.n	800c32c <ff_convert+0x30>
 800c320:	88fb      	ldrh	r3, [r7, #6]
 800c322:	3b80      	subs	r3, #128	; 0x80
 800c324:	4a12      	ldr	r2, [pc, #72]	; (800c370 <ff_convert+0x74>)
 800c326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c32a:	e000      	b.n	800c32e <ff_convert+0x32>
 800c32c:	2300      	movs	r3, #0
 800c32e:	81fb      	strh	r3, [r7, #14]
 800c330:	e016      	b.n	800c360 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c332:	2300      	movs	r3, #0
 800c334:	81fb      	strh	r3, [r7, #14]
 800c336:	e009      	b.n	800c34c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c338:	89fb      	ldrh	r3, [r7, #14]
 800c33a:	4a0d      	ldr	r2, [pc, #52]	; (800c370 <ff_convert+0x74>)
 800c33c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c340:	88fa      	ldrh	r2, [r7, #6]
 800c342:	429a      	cmp	r2, r3
 800c344:	d006      	beq.n	800c354 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c346:	89fb      	ldrh	r3, [r7, #14]
 800c348:	3301      	adds	r3, #1
 800c34a:	81fb      	strh	r3, [r7, #14]
 800c34c:	89fb      	ldrh	r3, [r7, #14]
 800c34e:	2b7f      	cmp	r3, #127	; 0x7f
 800c350:	d9f2      	bls.n	800c338 <ff_convert+0x3c>
 800c352:	e000      	b.n	800c356 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c354:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c356:	89fb      	ldrh	r3, [r7, #14]
 800c358:	3380      	adds	r3, #128	; 0x80
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c360:	89fb      	ldrh	r3, [r7, #14]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3714      	adds	r7, #20
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	0800c9b4 	.word	0x0800c9b4

0800c374 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c374:	b480      	push	{r7}
 800c376:	b087      	sub	sp, #28
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c37e:	88fb      	ldrh	r3, [r7, #6]
 800c380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c384:	d201      	bcs.n	800c38a <ff_wtoupper+0x16>
 800c386:	4b3e      	ldr	r3, [pc, #248]	; (800c480 <ff_wtoupper+0x10c>)
 800c388:	e000      	b.n	800c38c <ff_wtoupper+0x18>
 800c38a:	4b3e      	ldr	r3, [pc, #248]	; (800c484 <ff_wtoupper+0x110>)
 800c38c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	1c9a      	adds	r2, r3, #2
 800c392:	617a      	str	r2, [r7, #20]
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c398:	8a7b      	ldrh	r3, [r7, #18]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d068      	beq.n	800c470 <ff_wtoupper+0xfc>
 800c39e:	88fa      	ldrh	r2, [r7, #6]
 800c3a0:	8a7b      	ldrh	r3, [r7, #18]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d364      	bcc.n	800c470 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	1c9a      	adds	r2, r3, #2
 800c3aa:	617a      	str	r2, [r7, #20]
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	823b      	strh	r3, [r7, #16]
 800c3b0:	8a3b      	ldrh	r3, [r7, #16]
 800c3b2:	0a1b      	lsrs	r3, r3, #8
 800c3b4:	81fb      	strh	r3, [r7, #14]
 800c3b6:	8a3b      	ldrh	r3, [r7, #16]
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c3bc:	88fa      	ldrh	r2, [r7, #6]
 800c3be:	8a79      	ldrh	r1, [r7, #18]
 800c3c0:	8a3b      	ldrh	r3, [r7, #16]
 800c3c2:	440b      	add	r3, r1
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	da49      	bge.n	800c45c <ff_wtoupper+0xe8>
			switch (cmd) {
 800c3c8:	89fb      	ldrh	r3, [r7, #14]
 800c3ca:	2b08      	cmp	r3, #8
 800c3cc:	d84f      	bhi.n	800c46e <ff_wtoupper+0xfa>
 800c3ce:	a201      	add	r2, pc, #4	; (adr r2, 800c3d4 <ff_wtoupper+0x60>)
 800c3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d4:	0800c3f9 	.word	0x0800c3f9
 800c3d8:	0800c40b 	.word	0x0800c40b
 800c3dc:	0800c421 	.word	0x0800c421
 800c3e0:	0800c429 	.word	0x0800c429
 800c3e4:	0800c431 	.word	0x0800c431
 800c3e8:	0800c439 	.word	0x0800c439
 800c3ec:	0800c441 	.word	0x0800c441
 800c3f0:	0800c449 	.word	0x0800c449
 800c3f4:	0800c451 	.word	0x0800c451
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c3f8:	88fa      	ldrh	r2, [r7, #6]
 800c3fa:	8a7b      	ldrh	r3, [r7, #18]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	005b      	lsls	r3, r3, #1
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	4413      	add	r3, r2
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	80fb      	strh	r3, [r7, #6]
 800c408:	e027      	b.n	800c45a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c40a:	88fa      	ldrh	r2, [r7, #6]
 800c40c:	8a7b      	ldrh	r3, [r7, #18]
 800c40e:	1ad3      	subs	r3, r2, r3
 800c410:	b29b      	uxth	r3, r3
 800c412:	f003 0301 	and.w	r3, r3, #1
 800c416:	b29b      	uxth	r3, r3
 800c418:	88fa      	ldrh	r2, [r7, #6]
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	80fb      	strh	r3, [r7, #6]
 800c41e:	e01c      	b.n	800c45a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c420:	88fb      	ldrh	r3, [r7, #6]
 800c422:	3b10      	subs	r3, #16
 800c424:	80fb      	strh	r3, [r7, #6]
 800c426:	e018      	b.n	800c45a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c428:	88fb      	ldrh	r3, [r7, #6]
 800c42a:	3b20      	subs	r3, #32
 800c42c:	80fb      	strh	r3, [r7, #6]
 800c42e:	e014      	b.n	800c45a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c430:	88fb      	ldrh	r3, [r7, #6]
 800c432:	3b30      	subs	r3, #48	; 0x30
 800c434:	80fb      	strh	r3, [r7, #6]
 800c436:	e010      	b.n	800c45a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c438:	88fb      	ldrh	r3, [r7, #6]
 800c43a:	3b1a      	subs	r3, #26
 800c43c:	80fb      	strh	r3, [r7, #6]
 800c43e:	e00c      	b.n	800c45a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c440:	88fb      	ldrh	r3, [r7, #6]
 800c442:	3308      	adds	r3, #8
 800c444:	80fb      	strh	r3, [r7, #6]
 800c446:	e008      	b.n	800c45a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c448:	88fb      	ldrh	r3, [r7, #6]
 800c44a:	3b50      	subs	r3, #80	; 0x50
 800c44c:	80fb      	strh	r3, [r7, #6]
 800c44e:	e004      	b.n	800c45a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c450:	88fb      	ldrh	r3, [r7, #6]
 800c452:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c456:	80fb      	strh	r3, [r7, #6]
 800c458:	bf00      	nop
			}
			break;
 800c45a:	e008      	b.n	800c46e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c45c:	89fb      	ldrh	r3, [r7, #14]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d195      	bne.n	800c38e <ff_wtoupper+0x1a>
 800c462:	8a3b      	ldrh	r3, [r7, #16]
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	4413      	add	r3, r2
 800c46a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c46c:	e78f      	b.n	800c38e <ff_wtoupper+0x1a>
			break;
 800c46e:	bf00      	nop
	}

	return chr;
 800c470:	88fb      	ldrh	r3, [r7, #6]
}
 800c472:	4618      	mov	r0, r3
 800c474:	371c      	adds	r7, #28
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	0800cab4 	.word	0x0800cab4
 800c484:	0800cca8 	.word	0x0800cca8

0800c488 <__libc_init_array>:
 800c488:	b570      	push	{r4, r5, r6, lr}
 800c48a:	4e0d      	ldr	r6, [pc, #52]	; (800c4c0 <__libc_init_array+0x38>)
 800c48c:	4c0d      	ldr	r4, [pc, #52]	; (800c4c4 <__libc_init_array+0x3c>)
 800c48e:	1ba4      	subs	r4, r4, r6
 800c490:	10a4      	asrs	r4, r4, #2
 800c492:	2500      	movs	r5, #0
 800c494:	42a5      	cmp	r5, r4
 800c496:	d109      	bne.n	800c4ac <__libc_init_array+0x24>
 800c498:	4e0b      	ldr	r6, [pc, #44]	; (800c4c8 <__libc_init_array+0x40>)
 800c49a:	4c0c      	ldr	r4, [pc, #48]	; (800c4cc <__libc_init_array+0x44>)
 800c49c:	f000 f890 	bl	800c5c0 <_init>
 800c4a0:	1ba4      	subs	r4, r4, r6
 800c4a2:	10a4      	asrs	r4, r4, #2
 800c4a4:	2500      	movs	r5, #0
 800c4a6:	42a5      	cmp	r5, r4
 800c4a8:	d105      	bne.n	800c4b6 <__libc_init_array+0x2e>
 800c4aa:	bd70      	pop	{r4, r5, r6, pc}
 800c4ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4b0:	4798      	blx	r3
 800c4b2:	3501      	adds	r5, #1
 800c4b4:	e7ee      	b.n	800c494 <__libc_init_array+0xc>
 800c4b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c4ba:	4798      	blx	r3
 800c4bc:	3501      	adds	r5, #1
 800c4be:	e7f2      	b.n	800c4a6 <__libc_init_array+0x1e>
 800c4c0:	0800cd94 	.word	0x0800cd94
 800c4c4:	0800cd94 	.word	0x0800cd94
 800c4c8:	0800cd94 	.word	0x0800cd94
 800c4cc:	0800cd98 	.word	0x0800cd98

0800c4d0 <__itoa>:
 800c4d0:	1e93      	subs	r3, r2, #2
 800c4d2:	2b22      	cmp	r3, #34	; 0x22
 800c4d4:	b510      	push	{r4, lr}
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	d904      	bls.n	800c4e4 <__itoa+0x14>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	700b      	strb	r3, [r1, #0]
 800c4de:	461c      	mov	r4, r3
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	bd10      	pop	{r4, pc}
 800c4e4:	2a0a      	cmp	r2, #10
 800c4e6:	d109      	bne.n	800c4fc <__itoa+0x2c>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	da07      	bge.n	800c4fc <__itoa+0x2c>
 800c4ec:	232d      	movs	r3, #45	; 0x2d
 800c4ee:	700b      	strb	r3, [r1, #0]
 800c4f0:	4240      	negs	r0, r0
 800c4f2:	2101      	movs	r1, #1
 800c4f4:	4421      	add	r1, r4
 800c4f6:	f000 f825 	bl	800c544 <__utoa>
 800c4fa:	e7f1      	b.n	800c4e0 <__itoa+0x10>
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	e7f9      	b.n	800c4f4 <__itoa+0x24>

0800c500 <itoa>:
 800c500:	f7ff bfe6 	b.w	800c4d0 <__itoa>

0800c504 <memset>:
 800c504:	4402      	add	r2, r0
 800c506:	4603      	mov	r3, r0
 800c508:	4293      	cmp	r3, r2
 800c50a:	d100      	bne.n	800c50e <memset+0xa>
 800c50c:	4770      	bx	lr
 800c50e:	f803 1b01 	strb.w	r1, [r3], #1
 800c512:	e7f9      	b.n	800c508 <memset+0x4>

0800c514 <strcat>:
 800c514:	b510      	push	{r4, lr}
 800c516:	4603      	mov	r3, r0
 800c518:	781a      	ldrb	r2, [r3, #0]
 800c51a:	1c5c      	adds	r4, r3, #1
 800c51c:	b93a      	cbnz	r2, 800c52e <strcat+0x1a>
 800c51e:	3b01      	subs	r3, #1
 800c520:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c524:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c528:	2a00      	cmp	r2, #0
 800c52a:	d1f9      	bne.n	800c520 <strcat+0xc>
 800c52c:	bd10      	pop	{r4, pc}
 800c52e:	4623      	mov	r3, r4
 800c530:	e7f2      	b.n	800c518 <strcat+0x4>

0800c532 <strcpy>:
 800c532:	4603      	mov	r3, r0
 800c534:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c538:	f803 2b01 	strb.w	r2, [r3], #1
 800c53c:	2a00      	cmp	r2, #0
 800c53e:	d1f9      	bne.n	800c534 <strcpy+0x2>
 800c540:	4770      	bx	lr
	...

0800c544 <__utoa>:
 800c544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c546:	4b1d      	ldr	r3, [pc, #116]	; (800c5bc <__utoa+0x78>)
 800c548:	b08b      	sub	sp, #44	; 0x2c
 800c54a:	4605      	mov	r5, r0
 800c54c:	460c      	mov	r4, r1
 800c54e:	466e      	mov	r6, sp
 800c550:	f103 0c20 	add.w	ip, r3, #32
 800c554:	6818      	ldr	r0, [r3, #0]
 800c556:	6859      	ldr	r1, [r3, #4]
 800c558:	4637      	mov	r7, r6
 800c55a:	c703      	stmia	r7!, {r0, r1}
 800c55c:	3308      	adds	r3, #8
 800c55e:	4563      	cmp	r3, ip
 800c560:	463e      	mov	r6, r7
 800c562:	d1f7      	bne.n	800c554 <__utoa+0x10>
 800c564:	6818      	ldr	r0, [r3, #0]
 800c566:	791b      	ldrb	r3, [r3, #4]
 800c568:	713b      	strb	r3, [r7, #4]
 800c56a:	1e93      	subs	r3, r2, #2
 800c56c:	2b22      	cmp	r3, #34	; 0x22
 800c56e:	6038      	str	r0, [r7, #0]
 800c570:	f04f 0300 	mov.w	r3, #0
 800c574:	d904      	bls.n	800c580 <__utoa+0x3c>
 800c576:	7023      	strb	r3, [r4, #0]
 800c578:	461c      	mov	r4, r3
 800c57a:	4620      	mov	r0, r4
 800c57c:	b00b      	add	sp, #44	; 0x2c
 800c57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c580:	1e66      	subs	r6, r4, #1
 800c582:	fbb5 f0f2 	udiv	r0, r5, r2
 800c586:	af0a      	add	r7, sp, #40	; 0x28
 800c588:	fb02 5510 	mls	r5, r2, r0, r5
 800c58c:	443d      	add	r5, r7
 800c58e:	1c59      	adds	r1, r3, #1
 800c590:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800c594:	f806 5f01 	strb.w	r5, [r6, #1]!
 800c598:	4605      	mov	r5, r0
 800c59a:	b968      	cbnz	r0, 800c5b8 <__utoa+0x74>
 800c59c:	5460      	strb	r0, [r4, r1]
 800c59e:	4423      	add	r3, r4
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	1b19      	subs	r1, r3, r4
 800c5a4:	1b10      	subs	r0, r2, r4
 800c5a6:	4281      	cmp	r1, r0
 800c5a8:	dde7      	ble.n	800c57a <__utoa+0x36>
 800c5aa:	7811      	ldrb	r1, [r2, #0]
 800c5ac:	7818      	ldrb	r0, [r3, #0]
 800c5ae:	f802 0b01 	strb.w	r0, [r2], #1
 800c5b2:	f803 1901 	strb.w	r1, [r3], #-1
 800c5b6:	e7f4      	b.n	800c5a2 <__utoa+0x5e>
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	e7e2      	b.n	800c582 <__utoa+0x3e>
 800c5bc:	0800cd64 	.word	0x0800cd64

0800c5c0 <_init>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	bf00      	nop
 800c5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c6:	bc08      	pop	{r3}
 800c5c8:	469e      	mov	lr, r3
 800c5ca:	4770      	bx	lr

0800c5cc <_fini>:
 800c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ce:	bf00      	nop
 800c5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d2:	bc08      	pop	{r3}
 800c5d4:	469e      	mov	lr, r3
 800c5d6:	4770      	bx	lr
